//Main int that will hold boss obj ID
let objBoss = 0;

//Main Boss Handler/Timeline/Plural
task boss_kisume_bh()
{
	objBoss = ObjEnemy_Create(OBJ_ENEMY);
	
	thBoss_Init(objBoss);

	while(!isBossActive)
	{
		yield;
	}

	thBoss_SetUpA(objBoss, BOSS_KISUME, 0, -32);
	thBoss_SetUpB(objBoss);
	boss_kisume_loop(objBoss);
	
	while(!bossEnd)
	{
		if(Obj_GetValueD(objBoss, "NA", false) == true)
		{
			alternative(bossAttackState)
			case(0)
			{
				boss_kisume_ns01(objBoss);
			}
			case(1)
			{
				boss_kisume_ns02(objBoss);
			}
			case(2)
			{
				if(isDifficulty(HL))
				{
					boss_kisume_sc01(objBoss);
				}
				else
				{
					boss_kisume_ns03(objBoss);
				}
			}
			case(999)
			{
				debug_FinishMid_th10(objBoss);
				bossEnd = true;
			}
			others
			{
				if(bossTimeout)
				{
					thBoss_EscapeMid(objBoss, 0, -32, 60);
				}
				else
				{
					thBoss_FinishMid(objBoss);
				}
				bossEnd = true;
			}
		}
		yield;
	}
}

//Similar to @MainLoop, runs until boss object is deleted
task boss_kisume_loop(obj)
{
	isBossInitialized = true;
	while(!Obj_IsDeleted(obj))
	{
		thBoss_MainLoop(obj);
		yield;
	}
}

//Non-spell #1
function boss_kisume_ns01(obj)
{	
	let ecl = thEcl_Init(obj);
	let bossAdvance = false;
	
	thBoss_InitPattern(obj, 4000, 600);
	thBoss_SetBossMoveField(obj, CenY, 384, 999);
	thBoss_SetDamageRate(obj, 100, 100);
	
	MainTask;
	thBoss_WaitForZeroLife(obj);

	bossAdvance = true;
	thBoss_FinishA(obj);
	thEcl_Finish(ecl);

	task MainTask
	{
		let main_frame = 0;
		
		while(!bossAdvance)
		{
			alternative(main_frame)
			case(0)
			{
				thEnemy_SetMovePosition(obj, IP_DECELERATE, 0, 128, 60, false);
				//thBoss_Delay(60, bossAdvance);
			}
			case(100)
			{
				isBossInvincible = false;
				ns01_at1();
				thEnemy_SetSpeedAtAngle(obj, 5.5, 90);
				thEnemy_TransitionSpeed(obj, IP_DECELERATE, 0, 100);
			}
			case(200)
			{
				ns01_at2();
			}
			case(230)
			{
				thEnemy_SetMovePosition(obj, IP_DECELERATE, ObjMove_GetX(GetPlayerObjectID) - CenX, 128, 60, false);
			}
			case(290)
			{
				main_frame = 99;
			}
			main_frame++;
			yield;
		}
	}
	
	function ns01_at1()
	{
		let counter = 0;
		
		let ecl_speed = SetValueD(2, 3, 3, 3);
		let ecl_count = SetValueD(3, 6, 9, 11);
		let ecl_angle = GetAngleToPlayer(obj);
		
		et_set(ecl, 0, STYLE_CIRCLE, ecl_speed, ecl_angle, SHOT_ROUND_BLUE, ecl_count, 1);
		et_pr(ecl, 0, 49);
		exi_effon(ecl, 0, DELAY_BLUE, EFFON_DEF, EFFON_25);
		exi_spdown(ecl, 0);
		et_rad(ecl, 0, 24);
		
		while(!bossAdvance && counter < 4)
		{
			et_on(ecl, 0);
			ecl_count = ecl_count * 2;
			et_count(ecl, 0, ecl_count);
			counter++;
			wait(10);
		}
	}
	
	function ns01_at2()
	{
		let counter = 0;
		
		let ecl_speed = SetValueD(1, 1, 2, 2);
		let ecl_count = SetValueD(6, 8, 16, 32);
		let ecl_layer = SetValueD(1, 1, 2, 2);
		let ecl_angle = SetValueD(ANGLE_AIMED_GAP, ANGLE_AIMED, ANGLE_AIMED, ANGLE_AIMED);
		
		et_set(ecl, 1, STYLE_CIRCLE, ecl_speed, ecl_angle, SHOT_ROUND_RED, ecl_count, ecl_layer);
		et_pr(ecl, 1, 49);
		exi_effon(ecl, 1, DELAY_RED, EFFON_DEF, EFFON_25);
		et_ang2(ecl, 1, 1.875);
		et_rad(ecl, 1, 24);
		
		et_on(ecl, 1);
	}
}

//Non-spell #2
function boss_kisume_ns02(obj)
{	
	let ecl = thEcl_Init(obj);
	let bossAdvance = false;
	
	thBoss_InitPattern(obj, 4300, 600);
	thBoss_SetBossMoveField(obj, CenY, 384, 999);
	thBoss_SetDamageRate(obj, 100, 100);
	
	MainTask;
	thBoss_WaitForZeroLife(obj);

	bossAdvance = true;
	thBoss_FinishA(obj);
	thEcl_Finish(ecl);

	task MainTask
	{
		let main_frame = 0;
		
		while(!bossAdvance)
		{
			alternative(main_frame)
			case(0)
			{
				thEnemy_SetMovePosition(obj, IP_DECELERATE, 0, 160, 60, false);
			}
			case(60)
			{
				thEffect_Play(obj, EFF_CHARGE);
			}
			case(120)
			{
				ns02_at1();
			}
			main_frame++;
			yield;
		}
	}
	
	task ns02_at1()
	{
		let ecl_speed = 0.4;
		let ecl_angle = 180;
		let ecl_wait = SetValueD(2, 2, 1, 1);
		
		et_set(ecl, 0, STYLE_CIRCLE, ecl_speed, ecl_angle, SHOT_YOUMU_DRED, 1, 1);
		et_rad(ecl, 0, 20);
		
		exi_effon(ecl, 0, DELAY_RED, EFFON_DEF, EFFON_25);
		et_copy(ecl, 0, 1);
		et_gr(ecl, 1, SHOT_YOUMU_RED);
		
		if(isDifficulty(L))
		{
			//ex_spup(ecl, 0, 0, ECL_NULL, 2.10 + ecl_speed, 60);
			//ex_spup(ecl, 1, 0, ECL_NULL, 3.00 + ecl_speed, 60);
			ex_spup(ecl, 0, 60, 0.035);
			ex_spup(ecl, 1, 60, 0.05);
		}
		else
		{
			//ex_spup(ecl, 0, 0, ECL_NULL, 1.69 + ecl_speed, 60);
			//ex_spup(ecl, 1, 0, ECL_NULL, 2.19 + ecl_speed, 60);
			ex_spup(ecl, 0, 60, 0.0366);
			ex_spup(ecl, 1, 60, 0.0283);
		}
		
		while(!bossAdvance)
		{
			et_ang(ecl, 0, ecl_angle);
			ecl_angle += 222.49;
			if(isDifficulty(NHL))
			{
				et_on(ecl, 0);
			}
			et_ang(ecl, 1, ecl_angle);
			ecl_angle -= 444.98446303;
			et_on(ecl, 1);
			wait(ecl_wait);
		}
	}
}

//Non-spell #3
function boss_kisume_ns03(obj)
{	
	let ecl = thEcl_Init(obj);
	let bossAdvance = false;
	
	thBoss_InitPattern(obj, 4300, 600);
	thBoss_SetDamageRate(obj, 100, 100);
	
	MainTask;
	thBoss_WaitForZeroLife(obj);

	bossAdvance = true;
	thBoss_FinishA(obj);
	thEcl_Finish(ecl);

	task MainTask
	{
		let main_frame = 0;
		
		let flag = false;
		
		while(!bossAdvance)
		{
			alternative(main_frame)
			case(0)
			{
				thBoss_SetBossMoveField(obj, 160, 280, 64);
				thEnemy_SetMovePosition(obj, IP_DECELERATE, 0, 160, 60, false);
				//thBoss_Delay(60, bossAdvance);
			}
			case(60)
			{
				if(!flag){ns03_at1(); flag = true;}
				isBossInvincible = false;
				thBoss_SetRandomMoveSpeed(obj, bossAdvance, IP_DECELERATE, 2, 60, false);
			}
			case(160)
			{
				main_frame = 59;
			}
			main_frame++;
			yield;
		}
	}
	
	task ns03_at1()
	{
		let ecl_speed = SetValueD(0.4, 0.4, 1.4, 2.4);
		let ecl_angle = 180;
		let ecl_wait = SetValueD(2, 2, 1, 1);
		
		et_set(ecl, 0, STYLE_CIRCLE, ecl_speed, ecl_angle, SHOT_YOUMU_PURPLE, 1, 1);
		et_rad(ecl, 0, 20);
		
		exi_effon(ecl, 0, DELAY_PURPLE, EFFON_DEF, EFFON_25);
		et_copy(ecl, 0, 1);
		et_gr(ecl, 1, SHOT_YOUMU_PINK);
		
		//ex_spup(ecl, 0, 0, ECL_NULL, 2 + ecl_speed, 60);
		//ex_spup(ecl, 1, 0, ECL_NULL, 2.5 + ecl_speed, 60);
		
		ex_spup(ecl, 0, 60, 0.0333);
		ex_spup(ecl, 1, 60, 0.0416);
		
		while(!bossAdvance)
		{
			et_ang(ecl, 0, ecl_angle);
			ecl_angle += 222.49;
			if(isDifficulty(NHL))
			{
				et_on(ecl, 0);
			}
			et_ang(ecl, 1, ecl_angle);
			ecl_angle -= 444.98446303;
			et_on(ecl, 1);
			wait(ecl_wait);
		}
	}
}

//Spellcard #1
function boss_kisume_sc01(obj)
{	
	let ecl = thEcl_Init(obj);
	let bossAdvance = false;
	isBossInvincible = true;
	
	thBoss_InitSpellcard(obj, 2160, 600, 500000, "怪奇「釣瓶落としの怪」");
	thBoss_SetBossMoveField(obj, 72, 384, 16);
	thBoss_SetDamageRate(obj, 33, 100);
	thBoss_SetInvincibilityTime(obj, 60);
	
	MainTask;
	thBoss_WaitForZeroLife(obj);

	bossAdvance = true;
	thBoss_FinishA(obj);
	thEcl_Finish(ecl);

	task MainTask
	{
		let main_frame = 0;
		
		let flag = false;
		
		while(!bossAdvance)
		{
			alternative(main_frame)
			case(0)
			{
				thEnemy_SetMovePosition(obj, IP_DECELERATE, 0, 80, 60, false);
			}
			case(60)
			{
				thEffect_Play(obj, EFF_CHARGE);
			}
			case(150)
			{
				sc01_at1;
				sc01_at2;
			}
			main_frame++;
			yield;
		}
	}
	
	task sc01_at1()
	{
		let ecl_speed = 0;
		let ecl_angle = 90;
		let ecl_wait = SetValueD(5, 5, 5, 5);
		
		et_set(ecl, 0, STYLE_CIRCLE, ecl_speed, ecl_angle, SHOT_LROUND_ICE, 1, 1);
		
		exi_effon(ecl, 0, DELAY_ICE, EFFON_LARGE, EFFON_25);
		ex_wait(ecl, 0, 180);
		ex_spup(ecl, 0, 120, 0.066);
		//ex_spup(ecl, 0, 0, ECL_NULL, 2 + ecl_speed, 60);
		
		while(!bossAdvance)
		{
			et_ofs2(ecl, 0, sRand(0, 360), sRand(-1, 1) * 80);
			et_on(ecl, 0);
			wait(ecl_wait);
		}
	}
	
	task sc01_at2()
	{
		let ecl_frame = 0;
		let ecl_count = SetValueD(1, 1, 1, 3);
		
		et_set_ll(ecl, 1, STYLE_FAN, 4, 90, SHOT_LROUND_RED, 1, ecl_count, 224, 64);
		et_blend(ecl, 1, BLEND_ADD_ARGB);
		et_ang2(ecl, 1, 30);
		while(!bossAdvance)
		{
			alternative(ecl_frame)
			case(60)
			{
				if(ObjMove_GetX(obj) > GetPlayerX)
				{
					thEnemy_SetSpeedAtAngle(obj, (4 * z_randOne) + 1.5, 180);
				}
				else
				{
					thEnemy_SetSpeedAtAngle(obj, (4 * z_randOne) + 1.5, 0);
				}
				thEnemy_TransitionSpeed(obj, IP_DECELERATE, 0, 60);
				et_on(ecl, 1);
				ecl_frame = -1;
			}
			ecl_frame++;
			yield;
		}
	}
}























