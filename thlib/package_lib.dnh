/* -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
	thlib Package Library (package_lib.dnh)
	
	Author: Frenticpony
	Version 1.0
	
	to do (A LOT): ease of use- simpler menu object creation
		practice, replay, player data, music room, options, manual.  clean up everything, default th11 theme
	
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= */

let menuItemPlSel = 3;
let menuItemScriptSel = 0;

// ---------- Constants ----------

let DEBUG_MODE = KEY_F15 == 2;

let INDEX_TITLE = 0;
let INDEX_DIFFICULTY = 1;
let INDEX_PLAYERSELECT = 2;
let INDEX_PRACTICESTAGE = 3;
let INDEX_REPLAY = 4;
let INDEX_HIGHSCORE = 5;
let INDEX_MUSICROOM = 6;
let INDEX_OPTIONS = 7;
let INDEX_MANUAL = 8;
let INDEX_SPELLPRAC = 9;
let INDEX_SCRIPT_SELECT = 10;

let INDEX_DAYS = 11;
let INDEX_SCENE = 12;
let INDEX_ITEM = 13;

let INDEX_DEBUG = 99;

let ANIM_TITLE = 0;

// ---------- Menu Select Variables ----------

let menuPage = 0;
let menuState = 0;
let menuSelect =
[
	0, //0 -  INDEX_TITLE
	1, //1 -  INDEX_DIFFICULTY
	0, //2 -  INDEX_PLAYERSELECT
	0, //3 -  INDEX_PRACTICESTAGE
	0, //4 -  INDEX_REPLAY
	0, //5 -  INDEX_HIGHSCORE
	0, //6 -  INDEX_MUSICROOM
	0, //7 -  INDEX_OPTIONS
	0, //8 -  INDEX_MANUAL
	0, //9 -  INDEX_SPELLPRAC
	0, //10 - INDEX_SCRIPT_SELECT
	0, //11 - INDEX_DAYS
	0, //12 - INDEX_SCENE
	0, //13 - INDEX_ITEM
	0, //14 - INDEX_???
];

let menuItem = 8;
let menuItemDiff = 4;
let menuItemDebug = 1;
let menuItemDiffEx = 2;
let menuItemPlSelOver = 5;
let menuItemOptions = 5;
let menuItemPractice = [0, 0, 0, 0, 0, 0, 0, 0];
let menuItemReplay = [0, 0, 0, 0, 0];
let menuItemPause = [0, 0, 0, 0, 0];
let menuSelectFlashTime = 10;

let menuArray;
let maxMenu = length(menuItem) - 1;

let stageIndex = 1;
let stagePath = GetModuleDirectory ~ "script/thlib/stage.dnh";

// ---------- Player Script Paths ----------

let player_th10ReimuA = GetModuleDirectory ~ "script/player/MoF Players/MoF Reimu/MoFReimuA.dnh";
let player_th10ReimuB = GetModuleDirectory ~ "script/player/MoF Players/MoF Reimu/MoFReimuB.dnh";
let player_th10ReimuC = GetModuleDirectory ~ "script/player/MoF Players/MoF Reimu/MoFReimuC.dnh";

let player_th10MarisaA = GetModuleDirectory ~ "script/player/MoF Players/MoF Marisa/MoFMarisaA.dnh";
let player_th10MarisaB = GetModuleDirectory ~ "script/player/MoF Players/MoF Marisa/MoFMarisaB.dnh";
let player_th10MarisaC = GetModuleDirectory ~ "script/player/MoF Players/MoF Marisa/MoFMarisaC.dnh";

let player_th11ReimuA = GetModuleDirectory ~ "script/player/SA Players/SA Reimu/SAReimuA.dnh";
let player_th11ReimuB = GetModuleDirectory ~ "script/player/SA Players/SA Reimu/SAReimuB.dnh";
let player_th11ReimuC = GetModuleDirectory ~ "script/player/SA Players/SA Reimu/SAReimuC.dnh";

let player_th11MarisaA = GetModuleDirectory ~ "script/player/SA Players/SA Marisa/SAMarisaA.dnh";
let player_th11MarisaB = GetModuleDirectory ~ "script/player/SA Players/SA Marisa/SAMarisaB.dnh";
let player_th11MarisaC = GetModuleDirectory ~ "script/player/SA Players/SA Marisa/SAMarisaC.dnh";

let player_th12MarisaA = GetModuleDirectory ~ "script/player/UFO Marisa/UFOMarisaA.dnh";
let player_th12MarisaB = GetModuleDirectory ~ "script/player/UFO Marisa/UFOMarisaB.dnh";

//let player_th14Reimu = GetModuleDirectory ~ "script/player/DDC Reimu/DDCReimuB.dnh";

let player_th16Reimu = GetModuleDirectory ~ "script/player/HSiFS Players/HSiFS Reimu/HSiFSReimu.dnh";
let player_th16Marisa = GetModuleDirectory ~ "script/player/HSiFS Players/HSiFS Marisa/HSiFSMarisa.dnh";
let player_th16Cirno = GetModuleDirectory ~ "script/player/HSiFS Players/HSiFS Cirno/HSiFSCirno.dnh";
let player_th16Aya = GetModuleDirectory ~ "script/player/HSiFS Players/HSiFS Aya/HSiFSAya.dnh";

let player_tsdReimu = GetModuleDirectory ~ "script/player/TSD Reimu/TSDReimu.dnh";


let randPlayerArray = 
[
	player_th11ReimuA, 
	player_th11ReimuB, 
	player_th11ReimuC, 
	player_th11MarisaA, 
	player_th11MarisaB, 
	player_th11MarisaC
];

//let player_current = randPlayerArray[floor(rand(0, 6))];
let player_current = player_th10ReimuA;

// ---------- Camera Defaults and Positions ----------

let def_CameraX = GetCameraX;
let def_CameraY = GetCameraY;
let def_CameraZ = GetCameraZ;
let def_CameraFocX = GetCameraFocusX;
let def_CameraFocY = GetCameraFocusY;
let def_CameraFocZ = GetCameraFocusZ;
let def_CameraRadius = GetCameraRadius;
let def_CameraAzi = GetCameraAzimuthAngle;
let def_CameraEle = GetCameraElevationAngle;
let def_CameraYaw = GetCameraYaw;
let def_CameraPitch = GetCameraPitch;
let def_CameraRoll = GetCameraRoll;

// ---------- Other Variables ----------

let bgmVolObj = 0;
let seVolObj = 0;

let isGameStarted = false;
let hasStarted = false;
let goToMenu = false;

let maxScene = 0;
let isFadeBGM = false;
let currentBGM = 0;

let stageNumber = 1;

let isGamePaused = false;

let Script_SE = GetCurrentScriptDirectory ~ "event/se_ev.dnh";
let Script_BGM = GetCurrentScriptDirectory ~ "event/bgm_ev.dnh";
let Script_Effect = GetCurrentScriptDirectory ~ "event/eff_ev.dnh";

let scriptID_se = 0;

let priorityI_Minimum = 20;

let priorityI_StageBG = 20;
let priorityI_SpellBG = 25;
let priorityI_Enemy   = 30;
let priorityI_Player  = 40;
let priorityI_Shot    = 50;

let priorityI_Maximum = 80;

SetCommonData("RP", 
[
	priorityI_Minimum, 
	priorityI_Maximum, 
	priorityI_StageBG,
	priorityI_SpellBG,
	priorityI_Enemy,
	priorityI_Player,
	priorityI_Shot
]);



// ---------- Common Data ----------
//to do: remove unused commondata, redefine existing ones to fit thlib naming

SetCommonData("Difficulty", 3);
SetCommonData("Stage", 1);
SetCommonData("isDebugEnabled", true);
SetCommonData("isGameStarted", false);
SetCommonData("isBGMEnabled", 1);
SetCommonData("BGMVol", 0);
SetCommonData("SEVol", 80);
SetCommonData("isBGMEnabled", 1);
SetCommonData("isGamePaused", false);
SetCommonData("isBossRushEnabled", false);
SetCommonData("isHyperModeEnabled", false);

SetCommonData("ChangeBGM", -1);

SetCommonData("FP_UNLOCKED_DAY", 9);

SetCommonData("FP_SLOW_MULTIPLIER", 1); //Slowdown Multiplier
SetCommonData("FP_PLAYER_LIFE", 0);
SetCommonData("FP_PAUSE_TYPE", 0);      //0 - Pause, 1 - Game Over, 2 - Replay Pause, 3 - Replay End Pause
SetCommonData("FP_DEATH_COUNT", 0);     //Total player death count
SetCommonData("FP_BOMB_COUNT", 0);      //Total times a player bombed
SetCommonData("FP_ENE_KILL_COUNT", 0);  //Total enemies shot down

SetCommonData("FP_EVENT_PLAYER_SHOOTDOWN", false);

SetCommonData("FP_SPELLCARD_BONUS", 0);      //This is the variable for bonus points on a spellcard
SetCommonData("FP_IS_SPELLCARD", false);     //Tells everything that a spellcard is active
SetCommonData("FP_IS_SPELLCARD_GET", false); //Tells everything that the spellcard was captured
SetCommonData("FP_BOSS_TIMER", 0);           //Boss Timer
SetCommonData("FP_BOSSID", 0);               //Global Boss Object ID
SetCommonData("FP_BOSS_START", false);       //Tells everything that a boss has begun

SetCommonData("FP_STG_FRAME", [32, 16, 416, 464]);
SetCommonData("FP_POINT_VALUE", 10000);


//SetCommonData("FP_STG_FRAME", [128, 16, 512, 464]);

//--------------------------------------------

#include"./common_lib.dnh"
#include"./image_lib.dnh"
#include"./bgm_lib.dnh"

// -=-=-=-=-=-=-=-=-=-=- Menu Common -=-=-=-=-=-=-=-=-=-=-

function Package_Init()
{
	VoidCatcher();
	PauseHandler();

	StartScript(LoadScriptInThread(Script_SE));
	Menu_Init();
	LoadingGraphic();
	//PlayStage();
}

function Package_MainLoop()
{
	if(goToMenu == true)
	{
		Menu_Reload();
		goToMenu = false;
	}
	scriptID_se = GetCommonData("SE_SCRIPT", -999);
	
	thDraw_SetNumericSpriteListValue(bgmVolObj, GetCommonData("BGMVol", 0));
	thDraw_SetNumericSpriteListValue(seVolObj, GetCommonData("SEVol", 0));
	
	yield;
}

function Package_Finalize()
{
	
}

function Package_Event()
{
	alternative(GetEventType())
	case(EV_USER_PACKAGE) 
	{
		let itemType = GetEventArgument(0);
		alternative(itemType)
		case(0) //Replay Over
		{
			
		}
	}
}

task Menu_Init()
{	
	SetCameraFocusX(0);
	SetCameraFocusY(0);
	SetCameraFocusZ(0);
	SetCameraAzimuthAngle(0);
	SetCameraElevationAngle(0);
	SetCommonData("isLoading", true);
	
	FadeFromBlack(8);
	LoadingBack(img_th11_sig);
	wait(30);
	LoadMenuTextures_th11();
	LoadMenuBGM();
	
	
	wait(120);
	
	//MenuBGM();
	SetCommonData("isLoading", false);
	
	FadeFromBlack(8);
	InitMenuObjects_th11();
	MenuHandler_th11();
}

function Menu_Reload()
{
	LoadMenuBGM();
	LoadMenuTextures_th11();
	SetCameraFocusX(0);
	SetCameraFocusY(0);
	SetCameraFocusZ(0);
	SetCameraAzimuthAngle(0);
	SetCameraElevationAngle(0);
	wait(50);
	
	MenuBGM();
	SetCommonData("isLoading", false);
	
	FadeFromBlack(8);
	InitMenuObjects_th11();
	MenuHandler_th11();
}

function GetStageNumber
{
	return stageNumber;
}

function Create2DSpriteObject_M(texPath, x1, y1, width, height)
{
	let loc_obj = ObjPrim_Create(OBJ_SPRITE_2D);
	Obj_SetRenderPriorityI(loc_obj, 11);
	ObjPrim_SetTexture(loc_obj, texPath);
	ObjSprite2D_SetSourceRect(loc_obj, x1, y1, x1 + width, y1 + height);
	ObjSprite2D_SetDestRect(loc_obj, 0, 0, width, height);
	return loc_obj;
}

function Create2DSpriteListObject_M(texPath, x1, y1, width, height)
{
	let loc_obj = ObjPrim_Create(OBJ_SPRITE_LIST_2D);
	Obj_SetRenderPriorityI(loc_obj, 11);
	ObjPrim_SetTexture(loc_obj, texPath);
	Obj_SetValue(loc_obj, "A", [x1, y1, width, height]);
	return loc_obj;
}

function UpdateNumericSpriteList_M(obj, x, y, value)
{
	let loc_value = itoa(value);
	WriteLog(loc_value);
}

task LoadingBack(texture)
{
	let loadingBg = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(loadingBg, texture);
	ObjSprite2D_SetSourceRect(loadingBg, 0, 0, 640, 480);
	ObjSprite2D_SetDestRect(loadingBg, 0, 0, 640, 480);
	Obj_SetRenderPriorityI(loadingBg, 10);
	wait(150);
	Obj_Delete(loadingBg);
}

// -=-=-=-=-=-=-=-=-=-=- Menu/Stage Management Functions -=-=-=-=-=-=-=-=-=-=-

function ResetMenuPosition()
{
	menuPage = 0;
	menuState = 0;
	menuSelect = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

	menuItem = 9;
	menuItemDiff = 4;
	menuItemDebug = 1;
	menuItemDiffEx = 2;
	menuItemPlSelOver = 5;
	menuItemPractice = [0, 0, 0, 0, 0, 0, 0, 0];
	menuItemReplay = [0, 0, 0, 0, 0];
	menuItemPause = [0, 0, 0, 0, 0];

	maxMenu = length(menuItem) - 1;
}

function Reset3DCamera_All()
{
	//SetCameraXYZ(def_CameraX, def_CameraY, def_CameraZ);
	SetCameraFocusXYZ(0, 0, 0);
	SetCameraRadius(500);
	SetCameraAzimuthAngle(0);
	SetCameraElevationAngle(0);
	SetCameraYaw(0);
	SetCameraPitch(0);
	SetCameraRoll(0);
}

function StartStageFromMain(stagenum)
{
	//RaiseError("test");
	SetCommonData("Stage", stagenum);
	LoadStageBGM(bgm_th10_09, bgm_th10_10);
	InitializeStageScene();
	SetStageIndex(stageIndex);
	SetStageMainScript(stagePath);
	SetStagePlayerScript(player_current);
	SetCommonData("isLoading", true);
	FadeToBlack(5);
	FadeMenuBGM();
	wait(30);
	SetCommonData("FP_BOSS_START", false);
	RemoveMenuTextures();
	wait(30);
	StartStageScene();
	RemoveBlack();
	FadeFromBlack(8);
	SetCommonData("isGameStarted", true);
	currentBGM = StartBGM(100, bgm_th10_09, bgm_th10_10);
	wait(20);
	SetCommonData("isLoading", false);
}

function StartGame()
{
	//LoadStageTextures();
	SetCommonData("Stage", 1);
	LoadStageBGM(bgm_th10_09, bgm_th10_10);
	InitializeStageScene();
	SetStageIndex(stageIndex);
	SetStageMainScript(stagePath);
	SetStagePlayerScript(player_current);
	SetCommonData("isLoading", true);
	FadeToBlack(5);
	FadeMenuBGM();
	wait(30);
	SetCommonData("FP_BOSS_START", false);
	RemoveMenuTextures();
	wait(30);
	StartStageScene();
	RemoveBlack();
	FadeFromBlack(8);
	SetCommonData("isGameStarted", true);
	currentBGM = StartBGM(100, bgm_th10_09, bgm_th10_10);
	wait(20);
	SetCommonData("isLoading", false);
}

function PlayStage()
{
	LoadStageTextures();
	LoadStageBGM(bgm_th10_09, bgm_th10_10);
	InitializeStageScene();
	SetStageIndex(stageIndex);
	SetStageMainScript(stagePath);
	SetStagePlayerScript(player_current);
	SetCommonData("isLoading", true);
	FadeToBlack(5);
	FadeMenuBGM();
	wait(50);
	SetCommonData("FP_BOSS_START", false);
	RemoveMenuTextures();
	wait(50);
	StartStageScene();
	RemoveBlack();
	FadeFromBlack(8);
	SetCommonData("isGameStarted", true);
	currentBGM = StartBGM(100, bgm_th10_09, bgm_th10_10);
	SetCommonData("isLoading", false);
}

function RestartStage()
{
	SetCommonData("isLoading", true);
	SetCommonData("FP_SLOW_MULTIPLIER", 1);
	FadeToBlack(3);
	SetCommonData("isGameStarted", false);
	SetCommonData("FP_EVENT_PLAYER_SHOOTDOWN", false);
	TerminateStageScene;
	wait(4);
	SetCommonData("FP_BOSS_START", false);
	LoadStageTextures();
	LoadStageBGM(bgm_th10_09, bgm_th10_10);
	InitializeStageScene();
	SetStageIndex(stageIndex);
	SetStageMainScript(stagePath);
	SetStagePlayerScript(player_current);
	wait(4);
	StartStageScene();
	RemoveBlack();
	FadeFromBlack(3);
	SetCommonData("isGameStarted", true);
	currentBGM = StartBGM(100, bgm_th10_09, bgm_th10_10);
	SetCommonData("isLoading", false);
}

function EndStageToTitle()
{
	SetCommonData("isLoading", true);
	SetCommonData("FP_BOSS_START", false);
	SetCommonData("isGameStarted", false);
	SetCommonData("FP_EVENT_PLAYER_SHOOTDOWN", false);
	RemoveStageTextures();
	TerminateStageScene;
	//ResetMenuPosition();
	goToMenu = true;
}


task DoMenu(array, menu)
{
	maxMenu = array - 1;
	if(GetVirtualKeyState(VK_DOWN) == KEY_PUSH)
	{
		menuState++;
		menuSelect[menu] = menuState;
		if(menuState > maxMenu)
		{
			menuState = 0;
			menuSelect[menu] = menuState;
		}
		PlaySE(se_select00);
	}
	if(GetVirtualKeyState(VK_UP) == KEY_PUSH)
	{
		menuState--;
		menuSelect[menu] = menuState;
		if(menuState < 0)
		{
			menuState = maxMenu;
			menuSelect[menu] = menuState;
		}
		PlaySE(se_select00);
	}
}

task DoMenuB(array, menu)
{
	maxMenu = array - 1;
	if(GetVirtualKeyState(VK_DOWN) == KEY_PUSH)
	{
		menuState++;
		menuSelect[menu] = menuState;
		if(menuState > maxMenu)
		{
			menuState = maxMenu;
			menuSelect[menu] = menuState;
		}
		PlaySE(se_select00);
	}
	if(GetVirtualKeyState(VK_UP) == KEY_PUSH)
	{
		menuState--;
		menuSelect[menu] = menuState;
		if(menuState < 0)
		{
			menuState = 0;
			menuSelect[menu] = menuState;
		}
		PlaySE(se_select00);
	}
}

// -=-=-=-=-=-=-=-=-=-=- Effects -=-=-=-=-=-=-=-=-=-=-

task LoadingGraphic()
{
	task CreateEffectParticle(x, y, angle, rotation, alpha, scale)
	{
		let speed = rand(1,1.5);
		let particleAlpha = 0;
		let particleFrame = 0;
		let particleAngle = 0;
		let aliveTime = round(rand(40,60));
		let xVel = cos(angle)*speed;
		let yVel = sin(angle)*speed;
		let leafParticle = Create2DSpriteObject(img_th11_loading, 0, 64, 32, 96);
		ObjSprite2D_SetDestRect(leafParticle, -16, -16, 16, 16);
		ObjRender_SetAlpha(leafParticle, particleAlpha);
		Obj_SetRenderPriorityI(leafParticle, 99);
		ObjRender_SetScaleXYZ(leafParticle, scale, scale, 0);
		ObjRender_SetBlendType(leafParticle, BLEND_ADD_ARGB);
		while(particleFrame != aliveTime && GetCommonData("isLoading", false))
		{
			if(particleAlpha < alpha)
			{
				particleAlpha += 20;
			}
			x += xVel;
			y += yVel;
			particleAngle += rotation;
			ObjRender_SetPosition(leafParticle, x, y, 0);
			ObjRender_SetAngleZ(leafParticle, particleAngle);
			//ObjRender_SetColor(leafParticle, particleAlpha, particleAlpha, particleAlpha);
			ObjRender_SetAlpha(leafParticle, particleAlpha);
			particleFrame++;
			yield;
		}
		while(particleAlpha > 0)
		{
			particleAlpha -= 15;
			x += xVel;
			y += yVel;
			particleAngle += rotation;
			ObjRender_SetPosition(leafParticle, x, y, 0);
			ObjRender_SetAngleZ(leafParticle, particleAngle);
			ObjRender_SetAlpha(leafParticle, particleAlpha);
			yield;
		}
		Obj_Delete(leafParticle);
	}

	let alpha1 = 0;
	let alpha2 = 200;
	let counter = 0;

	let loadImg1 = Create2DSpriteObject(img_th11_loading, 0, 0, 128, 32);
	Obj_SetRenderPriorityI(loadImg1, 100);
	ObjRender_SetPosition(loadImg1, 460, 380, 0);
	ObjRender_SetAlpha(loadImg1, 0);

	let loadImg2 = Create2DSpriteObject(img_th11_loading, 0, 32, 128, 64);
	Obj_SetRenderPriorityI(loadImg2, 100);
	ObjRender_SetPosition(loadImg2, 640, 370, 0);
	ObjRender_SetAlpha(loadImg2, 0);

	loop
	{
		if(GetCommonData("isLoading", false))
		{
			if(ObjRender_GetX(loadImg2) > 480)
			{
				ObjRender_SetX(loadImg2, ObjRender_GetX(loadImg2) - 8)
			}
			alpha1 += 10;
			ObjRender_SetAlpha(loadImg1, 220 + (sin(alpha1/1.3)*70));
			alpha2 += 10;
			ObjRender_SetAlpha(loadImg2, 220 + (sin(alpha2/1.3)*70));
			if(counter >= 2)
			{
				CreateEffectParticle(525 + rand(-80,80), 382 + rand(-40,40), 90 + rand(30,-30), rand(0,5), round(rand(170,255)), rand(0.2,1));
				counter = 0;
			}
			counter++;
		}
		else
		{
			if(ObjRender_GetX(loadImg2) < 640)
			{
				ObjRender_SetX(loadImg2, ObjRender_GetX(loadImg2) + 8)
			}
			if(alpha1 > 0)
			{
				alpha1 -= alpha1/5;
			}
			ObjRender_SetAlpha(loadImg1, alpha1);
			ObjRender_SetAlpha(loadImg2, alpha1);
		}
		yield;
	}
}

// -=-=-=-=-=-=-=-=-=-=- BGM / SE -=-=-=-=-=-=-=-=-=-=-

task MenuBGM()
{
	let td_bgm = StartBGM(0, bgm_th10_00, "");
	let volumeTD = 0;

	while(isFadeBGM == false)
	{
		if(GetCommonData("isBGMEnabled", 1) == 0)
		{
			ObjSound_SetVolumeRate(td_bgm, 0);
		}
		else
		{
			ObjSound_SetVolumeRate(td_bgm, 0);
		}
		yield;
	}
	let fadeFrame = 0;
	loop(100)
	{
		if(ObjSound_GetVolumeRate(td_bgm) > 0)
		{
			ObjSound_SetVolumeRate(td_bgm, fadeFrame);
		}
		else
		{
			ObjSound_SetVolumeRate(td_bgm, 0);
		}
		fadeFrame -= 1;
		yield;
	}
	ObjSound_SetVolumeRate(td_bgm, 0);
	Obj_Delete(td_bgm);
}

task FadeMenuBGM()
{
	isFadeBGM = true;
}

// -=-=-=-=-=-=-=-=-=-=- Pause Menu -=-=-=-=-=-=-=-=-=-=-

task PauseHandler()
{
	let PAUSE_GAMERETURN  = 0;
	let PAUSE_TITLERETURN = 1;
	let PAUSE_SAVEREPLAY  = 2;
	let PAUSE_MANUAL      = 3;
	let PAUSE_GIVEUP      = 4;
	let PAUSE_RETRY       = 5;
	let PAUSE_EQUIPCHANGE = 6;

	let TYPE_INGAME = 0;
	let TYPE_GAMEOVER = 1;
	let TYPE_SOMETHING = 4;
	let TYPE_INREPLAY = 2;
	let TYPE_REPLAYOVER = 3;

	let pauseType = 0;
	let pauseMenu = 0;
	let pauseItem = 0;
	let confirmItem = 1;
	let pauseActive = false;
	let isConfirm = false;

	let frameArray = GetCommonData("FP_STG_FRAME", [32, 16, 416, 464]);
	task DoPause()
	{
		//let textureName = GetTransitionRenderTargetName();
		let alpha = 0;
		CreateRenderTarget("p");
		RenderToTextureA1("p", 20, 98, true);
		//RenderToTextureA1("RT", 1, 19, true);

		function CreatePauseFrame()
		{
			let objRender = ObjPrim_Create(OBJ_SPRITE_2D);

			ObjPrim_SetTexture(objRender, "p");
			ObjSprite2D_SetSourceRect(objRender, 0, 0, 640, 480);
			ObjSprite2D_SetDestRect(objRender, 0, 0, 640, 480);
			Obj_SetRenderPriorityI(objRender, 98);
			ObjRender_SetAlpha(objRender, 255);
			ObjRender_SetPosition(objRender, 0, 0, 0);

			return objRender;
		}

		//SetStgFrame(128, 16, 512, 464, 20, 80);
		function CreateGamePause(id, alpha)
		{
			let objRender = ObjPrim_Create(OBJ_SPRITE_2D);
			ObjPrim_SetTexture(objRender, "p");
			if(id == 0)
			{
				ObjSprite2D_SetSourceRect(objRender, frameArray[0] - 5, frameArray[1] - 5, frameArray[2] - 5, frameArray[3] - 5);
				ObjSprite2D_SetDestRect(objRender, 0, 0, 384, 448);
			}
			if(id == 1)
			{
				ObjSprite2D_SetSourceRect(objRender, frameArray[0] - 1, frameArray[1] - 5, frameArray[2] - 1, frameArray[3] - 5);
				ObjSprite2D_SetDestRect(objRender, 0, 0, 384, 448);
			}
			if(id == 2)
			{
				ObjSprite2D_SetSourceRect(objRender, frameArray[0] - 5, frameArray[1] - 1, frameArray[2] - 5, frameArray[3] - 1);
				ObjSprite2D_SetDestRect(objRender, 0, 0, 384, 448);
			}
			if(id == 3)
			{
				ObjSprite2D_SetSourceRect(objRender, frameArray[0] - 1, frameArray[1] - 1, frameArray[2] - 1, frameArray[3] - 1);
				ObjSprite2D_SetDestRect(objRender, 0, 0, 384, 448);
			}
			Obj_SetRenderPriorityI(objRender, 99);
			ObjRender_SetColor(objRender, 100, 170, 185);
			ObjRender_SetAlpha(objRender, alpha/5);
			ObjRender_SetPosition(objRender, frameArray[0], frameArray[1], 0);
			return objRender;
		}

		function CreateGamePause2(id, alpha)
		{
			let objRender = ObjPrim_Create(OBJ_SPRITE_2D);
			ObjPrim_SetTexture(objRender, "p");
			if(id == 0)
			{
				ObjSprite2D_SetSourceRect(objRender, frameArray[0] - 9, frameArray[1] - 9, frameArray[2] - 9, frameArray[3] - 9);
				ObjSprite2D_SetDestRect(objRender, 0, 0, 384, 448);
			}
			if(id == 1)
			{
				ObjSprite2D_SetSourceRect(objRender, frameArray[0] - 5, frameArray[1] - 9, frameArray[2] - 5, frameArray[3] - 9);
				ObjSprite2D_SetDestRect(objRender, 0, 0, 384, 448);
			}
			if(id == 2)
			{
				ObjSprite2D_SetSourceRect(objRender, frameArray[0] - 9, frameArray[1] - 5, frameArray[2] - 9, frameArray[3] - 5);
				ObjSprite2D_SetDestRect(objRender, 0, 0, 384, 448);
			}
			if(id == 3)
			{
				ObjSprite2D_SetSourceRect(objRender, frameArray[0] - 5, frameArray[1] - 5, frameArray[2] - 5, frameArray[3] - 5);
				ObjSprite2D_SetDestRect(objRender, 0, 0, 384, 448);
			}
			Obj_SetRenderPriorityI(objRender, 99);
			ObjRender_SetColor(objRender, 170, 170, 215);
			ObjRender_SetAlpha(objRender, alpha/10);
			ObjRender_SetPosition(objRender, frameArray[0], frameArray[1], 0);
			return objRender;
		}

		function PauseBlur()
		{
			let listEffect = [0, 0, 0, 0, 0, 0, 0, 0];
			let id = 0;

			ascent(i in 0..4)
			{
				let store = CreateGamePause(id, alpha);
				listEffect[i] = store;
				id++;
			}
			ascent(i in 0..4)
			{
				let store = CreateGamePause2(id, alpha);
				listEffect[i + 4] = store;
				id++;
			}
			while(isGamePaused == true)
			{
				if(alpha < 110)
				{
					alpha += 5;
					ascent(i in 0..8)
					{
						ObjRender_SetAlpha(listEffect[i], alpha);
					}
				}
				if(isConfirm == true)
				{

				}
				yield;
			}
			while(alpha > 0)
			{
				alpha -= 7.3;
				ascent(i in 0..8)
				{
					ObjRender_SetAlpha(listEffect[i], alpha);
				}
				yield;
			}
			ascent(i in 0..8)
			{
				Obj_Delete(listEffect[i]);
			}
		}

		task PauseMenuLeaf(type)
		{
			let angle = 0;
			let frame = 0;
			let alpha = 255;
			let r = 62;
			let g = 169;
			let b = 141;
			//-32, 138, 108
			let tR = 132;
			let tG = 138;
			let tB = 108;

			let objSprite = ObjPrim_Create(OBJ_SPRITE_2D);
			ObjPrim_SetTexture(objSprite, img_th11_pause);
			ObjSprite2D_SetSourceRect(objSprite, 0, 0, 48, 220);
			ObjSprite2D_SetDestCenter(objSprite);
			Obj_SetRenderPriorityI(objSprite, 100);
			ObjRender_SetPosition(objSprite, frameArray[0] + 28, 280, 0);
			//ObjRender_SetColor(objSprite, 194, 31, 33);
			ObjRender_SetColor(objSprite, 62, 169, 141);

			let destinationx = 85;
			let destinationy = 328;

			let distancetopoint = ((destinationx-ObjRender_GetX(objSprite))^2+(destinationy-ObjRender_GetY(objSprite))^2)^0.5;
			let directiontopoint = atan2(destinationy-ObjRender_GetY(objSprite),destinationx-ObjRender_GetX(objSprite));

			while(isGamePaused == true)
			{
				distancetopoint = ((destinationx - ObjRender_GetX(objSprite)) ^ 2 + (destinationy - ObjRender_GetY(objSprite)) ^ 2) ^ 0.5;
				directiontopoint = atan2(destinationy - ObjRender_GetY(objSprite), destinationx - ObjRender_GetX(objSprite));

				if (distancetopoint >= 1)
				{
					ObjRender_SetPosition(objSprite, ObjRender_GetX(objSprite) + cos(directiontopoint) * distancetopoint * 0.35, ObjRender_GetY(objSprite) + sin(directiontopoint) * distancetopoint * 0.35, 0);
				}
				else
				{
					ObjRender_SetPosition(objSprite, destinationx, destinationy, 0);
				}
				if(isConfirm == true)
				{
					destinationx = frameArray[0] + 242; //242
					destinationy = 328;
					if(g > 31)
					{
						r -= -132/5;
						g -= 138/5;
						b -= 108/5;
					}
				}
				else
				{
					destinationx = frameArray[0] + 53; //53
					destinationy = 328;
					if(g < 169)
					{
						r += -132/5;
						g += 138/5;
						b += 108/5;
					}
				}

				angle = cos(frame * 2.73) * 3;
				frame++;
				ObjRender_SetAngleZ(objSprite, 353 + angle);
				alternative(type)
				case(TYPE_INGAME)
				{
					ObjRender_SetColor(objSprite, r, g, b);
				}
				case(TYPE_GAMEOVER)
				{
					ObjRender_SetColor(objSprite, 220, 3, 11);
				}

				yield;
			}
			destinationx = frameArray[0] + 28;
			destinationy = 328;
			while(alpha > 0)
			{
				distancetopoint = ((destinationx - ObjRender_GetX(objSprite)) ^ 2 + (destinationy - ObjRender_GetY(objSprite)) ^ 2) ^ 0.5;
				directiontopoint = atan2(destinationy - ObjRender_GetY(objSprite), destinationx - ObjRender_GetX(objSprite));

				if (distancetopoint >= 1)
				{
					ObjRender_SetPosition(objSprite, ObjRender_GetX(objSprite) + cos(directiontopoint) * distancetopoint * 0.35, ObjRender_GetY(objSprite) + sin(directiontopoint) * distancetopoint * 0.35, 0);
				}
				else
				{
					ObjRender_SetPosition(objSprite, destinationx, destinationy, 0);
				}
				angle = cos(frame * 2.73) * 3;
				alpha -= 255/8;
				frame++;
				ObjRender_SetAngleZ(objSprite, 353 + angle);
				ObjRender_SetAlpha(objSprite, alpha);
				yield;
			}
			Obj_Delete(objSprite);
		}

		task PauseMenuTitle(type)
		{
			let frame = 0;
			let alpha = 255;

			let objSprite = ObjPrim_Create(OBJ_SPRITE_2D);
			ObjPrim_SetTexture(objSprite, img_th11_pause);
			alternative(type)
			case(TYPE_INGAME)
			{
				ObjSprite2D_SetSourceRect(objSprite, 48, 0, 112, 32);
				ObjSprite2D_SetDestRect(objSprite, 0, 0, 64, 32);
			}
			case(TYPE_GAMEOVER)
			{
				ObjSprite2D_SetSourceRect(objSprite, 114, 0, 186, 32);
				ObjSprite2D_SetDestRect(objSprite, 0, 0, 72, 32);
			}

			Obj_SetRenderPriorityI(objSprite, 100);
			ObjRender_SetPosition(objSprite, frameArray[0] + 14, 200, 0);

			let destinationx = frameArray[0] + 14;
			let destinationy = 220;

			let distancetopoint = ((destinationx-ObjRender_GetX(objSprite))^2+(destinationy-ObjRender_GetY(objSprite))^2)^0.5;
			let directiontopoint = atan2(destinationy-ObjRender_GetY(objSprite),destinationx-ObjRender_GetX(objSprite));

			while(isGamePaused == true)
			{
				if(isConfirm == true)
				{
					if(alpha > 50)
					{
						alpha -= 255/8;
					}
				}
				else
				{
					if(alpha < 255)
					{
						alpha += 255/8;
					}
				}
				distancetopoint = ((destinationx - ObjRender_GetX(objSprite)) ^ 2 + (destinationy - ObjRender_GetY(objSprite)) ^ 2) ^ 0.5;
				directiontopoint = atan2(destinationy - ObjRender_GetY(objSprite), destinationx - ObjRender_GetX(objSprite));

				if (distancetopoint >= 1)
				{
					ObjRender_SetPosition(objSprite, ObjRender_GetX(objSprite) + cos(directiontopoint) * distancetopoint * 0.35, ObjRender_GetY(objSprite) + sin(directiontopoint) * distancetopoint * 0.35, 0);
				}
				else
				{
					ObjRender_SetPosition(objSprite, destinationx, destinationy, 0);
				}
				ObjRender_SetAlpha(objSprite, alpha);
				yield;
			}
			destinationx = frameArray[0] + 14;
			destinationy = 200;
			while(alpha > 0)
			{
				distancetopoint = ((destinationx - ObjRender_GetX(objSprite)) ^ 2 + (destinationy - ObjRender_GetY(objSprite)) ^ 2) ^ 0.5;
				directiontopoint = atan2(destinationy - ObjRender_GetY(objSprite), destinationx - ObjRender_GetX(objSprite));

				if (distancetopoint >= 1)
				{
					ObjRender_SetPosition(objSprite, ObjRender_GetX(objSprite) + cos(directiontopoint) * distancetopoint * 0.35, ObjRender_GetY(objSprite) + sin(directiontopoint) * distancetopoint * 0.35, 0);
				}
				else
				{
					ObjRender_SetPosition(objSprite, destinationx, destinationy, 0);
				}
				alpha -= 255/8;
				ObjRender_SetAlpha(objSprite, alpha);
				yield;
			}
			Obj_Delete(objSprite);
		}

		task PauseMenuItem(id, sprID, y)
		{
			let frame = 0;
			let inactive = true;
			let isFlash = false;
			let xShake = 0;
			let alpha = 255;
			let colorFrame = 0;
			let red = 0;
			let grey = 255;
			let greyMod = 0;

			let destinationx = frameArray[0] + 40;
			let destinationy = y;

			let objSprite = ObjPrim_Create(OBJ_SPRITE_2D);
			ObjPrim_SetTexture(objSprite, img_th11_pause);
			if(sprID == 0)
			{
				ObjSprite2D_SetSourceRect(objSprite, 48, 32, 196, 64);
				ObjSprite2D_SetDestRect(objSprite, 0, 0, 148, 32);
				//destinationy = 272;
				
				//ObjRender_SetPosition(objSprite, 92, y, 0);
			}
			if(sprID == 1)
			{
				ObjSprite2D_SetSourceRect(objSprite, 48, 64, 166, 96);
				ObjSprite2D_SetDestRect(objSprite, 0, 0, 118, 32);
				//destinationy = 297;
				
				//ObjRender_SetPosition(objSprite, 92, y, 0);
			}
			if(sprID == 2)
			{
				ObjSprite2D_SetSourceRect(objSprite, 48, 128, 226, 160);
				ObjSprite2D_SetDestRect(objSprite, 0, 0, 178, 32);
				//destinationy = 322;
				
				//ObjRender_SetPosition(objSprite, 92, y, 0);
			}
			if(sprID == 3)
			{
				ObjSprite2D_SetSourceRect(objSprite, 0, 318, 78, 350);
				ObjSprite2D_SetDestRect(objSprite, 0, 0, 78, 32);
				//destinationy = 347;
				
				//ObjRender_SetPosition(objSprite, 92, y, 0);
			}
			if(sprID == 4)
			{
				ObjSprite2D_SetSourceRect(objSprite, 48, 96, 176, 128);
				ObjSprite2D_SetDestRect(objSprite, 0, 0, 128, 32);
				//destinationy = 372;

			}
			if(sprID == 5) //Replay Again
			{
				ObjSprite2D_SetSourceRect(objSprite, 0, 224, 148, 256);
				ObjSprite2D_SetDestRect(objSprite, 0, 0, 148, 32);
			}
			if(sprID == 6) //Return to replay select
			{
				ObjSprite2D_SetSourceRect(objSprite, 0, 416, 148, 448);
				ObjSprite2D_SetDestRect(objSprite, 0, 0, 148, 32);
			}
			ObjRender_SetPosition(objSprite, 92, y, 0);
			Obj_SetRenderPriorityI(objSprite, 100);

			task Shake
			{
				loop(10)
				{
					xShake = rand(-3, 3);
					yield;
				}
				xShake = 0;
			}

			let distancetopoint = ((destinationx-ObjRender_GetX(objSprite))^2+(destinationy-ObjRender_GetY(objSprite))^2)^0.5;
			let directiontopoint = atan2(destinationy-ObjRender_GetY(objSprite),destinationx-ObjRender_GetX(objSprite));

			while(isGamePaused == true)
			{
				if(id == pauseItem && pauseActive == true)
				{
					if(GetVirtualKeyState(VK_SHOT) == KEY_PUSH && isConfirm == false)
					{
						isFlash = true;
						greyMod = 200;
					}
					if(inactive == true)
					{
						Shake;
						colorFrame = 0;
						red = 255;
						inactive = false;
					}
					grey = 255;
					red = 185 + cos(colorFrame*4)*40;
				}
				else
				{
					colorFrame = 0;
					grey = 100;
					red = 100;
					inactive = true;
				}
				if(isFlash == true)
				{
					if(frame < 16)
					{
						greyMod = -greyMod;
						frame++;
					}
					else
					{
						isFlash = false;
						frame = 0;
						greyMod = 0;
					}
				}
				if(isConfirm == true)
				{
					if(alpha > 50)
					{
						alpha -= 255/8;
					}
				}
				else
				{
					if(alpha < 255)
					{
						alpha += 255/8;
					}
				}
				distancetopoint = ((destinationx - ObjRender_GetX(objSprite)) ^ 2 + (destinationy - ObjRender_GetY(objSprite)) ^ 2) ^ 0.5;
				directiontopoint = atan2(destinationy - ObjRender_GetY(objSprite), destinationx - ObjRender_GetX(objSprite));

				if (distancetopoint >= 1)
				{
					ObjRender_SetPosition(objSprite, ObjRender_GetX(objSprite) + cos(directiontopoint) * distancetopoint * 0.35, ObjRender_GetY(objSprite) + sin(directiontopoint) * distancetopoint * 0.35, 0);
				}
				else
				{
					ObjRender_SetPosition(objSprite, destinationx + xShake, destinationy, 0);
				}
				ObjRender_SetColor(objSprite, grey - greyMod, red - greyMod, red - greyMod);
				ObjRender_SetAlpha(objSprite, alpha);
				colorFrame++;
				yield;
			}
			destinationx = frameArray[0] + 60;
			while(alpha > 0)
			{
				distancetopoint = ((destinationx - ObjRender_GetX(objSprite)) ^ 2 + (destinationy - ObjRender_GetY(objSprite)) ^ 2) ^ 0.5;
				directiontopoint = atan2(destinationy - ObjRender_GetY(objSprite), destinationx - ObjRender_GetX(objSprite));

				if (distancetopoint >= 1)
				{
					ObjRender_SetPosition(objSprite, ObjRender_GetX(objSprite) + cos(directiontopoint) * distancetopoint * 0.35, ObjRender_GetY(objSprite) + sin(directiontopoint) * distancetopoint * 0.35, 0);
				}
				else
				{
					ObjRender_SetPosition(objSprite, destinationx, destinationy, 0);
				}
				alpha -= 255/8;
				ObjRender_SetAlpha(objSprite, alpha);
				yield;
			}
			Obj_Delete(objSprite);
		}

		task ConfirmMenuItem(id)
		{
			let frame = 0;
			let inactive = true;
			let isFlash = false;
			let xShake = 0;
			let alpha = 0;
			let colorFrame = 0;
			let red = 0;
			let grey = 255;
			let greyMod = 0;

			let destinationx = frameArray[0] + 231;
			let destinationy = 272;

			let objSprite = ObjPrim_Create(OBJ_SPRITE_2D);
			ObjPrim_SetTexture(objSprite, img_th11_pause);
			if(id == 0)
			{
				ObjSprite2D_SetSourceRect(objSprite, 176, 64, 240, 96);
				ObjSprite2D_SetDestRect(objSprite, 0, 0, 64, 32);
				destinationy = 305;
				ObjRender_SetPosition(objSprite, 263, 305, 0);
			}
			if(id == 1)
			{
				ObjSprite2D_SetSourceRect(objSprite, 176, 96, 240, 128);
				ObjSprite2D_SetDestRect(objSprite, 0, 0, 64, 32);
				destinationy = 335;
				ObjRender_SetPosition(objSprite, 263, 335, 0);
			}

			Obj_SetRenderPriorityI(objSprite, 100);

			task Shake
			{
				loop(10)
				{
					xShake = rand(-3, 3);
					yield;
				}
				xShake = 0;
			}

			let distancetopoint = ((destinationx-ObjRender_GetX(objSprite))^2+(destinationy-ObjRender_GetY(objSprite))^2)^0.5;
			let directiontopoint = atan2(destinationy-ObjRender_GetY(objSprite),destinationx-ObjRender_GetX(objSprite));

			while(isGamePaused == true)
			{
				if(id == confirmItem && pauseActive == true)
				{
					if(GetVirtualKeyState(VK_SHOT) == KEY_PUSH && isConfirm == true)
					{
						isFlash = true;
						greyMod = 200;
					}
					if(inactive == true)
					{
						Shake;
						colorFrame = 0;
						red = 255;
						inactive = false;
					}
					grey = 255;
					red = 185 + cos(colorFrame*4)*40;
				}
				else
				{
					colorFrame = 0;
					grey = 100;
					red = 100;
					inactive = true;
				}
				if(isFlash == true)
				{
					if(frame < 18)
					{
						greyMod = -greyMod;
						frame++;
					}
					else
					{
						isFlash = false;
						frame = 0;
						greyMod = 0;
					}
				}
				if(isConfirm == false)
				{
					if(alpha > 0)
					{
						alpha -= 255/8;
					}
					destinationx = frameArray[0] + 251;
				}
				else
				{
					if(alpha < 255)
					{
						alpha += 255/8;
					}
					destinationx = frameArray[0] + 231;
				}
				distancetopoint = ((destinationx - ObjRender_GetX(objSprite)) ^ 2 + (destinationy - ObjRender_GetY(objSprite)) ^ 2) ^ 0.5;
				directiontopoint = atan2(destinationy - ObjRender_GetY(objSprite), destinationx - ObjRender_GetX(objSprite));

				if (distancetopoint >= 1)
				{
					ObjRender_SetPosition(objSprite, ObjRender_GetX(objSprite) + cos(directiontopoint) * distancetopoint * 0.35, ObjRender_GetY(objSprite) + sin(directiontopoint) * distancetopoint * 0.35, 0);
				}
				else
				{
					ObjRender_SetPosition(objSprite, destinationx + xShake, destinationy, 0);
				}
				ObjRender_SetColor(objSprite, grey - greyMod, red - greyMod, red - greyMod);
				ObjRender_SetAlpha(objSprite, alpha);
				colorFrame++;
				yield;
			}
			destinationx = frameArray[0] + 231;
			while(alpha > 0)
			{
				distancetopoint = ((destinationx - ObjRender_GetX(objSprite)) ^ 2 + (destinationy - ObjRender_GetY(objSprite)) ^ 2) ^ 0.5;
				directiontopoint = atan2(destinationy - ObjRender_GetY(objSprite), destinationx - ObjRender_GetX(objSprite));

				if (distancetopoint >= 1)
				{
					ObjRender_SetPosition(objSprite, ObjRender_GetX(objSprite) + cos(directiontopoint) * distancetopoint * 0.35, ObjRender_GetY(objSprite) + sin(directiontopoint) * distancetopoint * 0.35, 0);
				}
				else
				{
					ObjRender_SetPosition(objSprite, destinationx, destinationy, 0);
				}
				alpha -= 255/8;
				ObjRender_SetAlpha(objSprite, alpha);
				yield;
			}
			Obj_Delete(objSprite);
		}

		task ConfirmMenuReally()
		{
			let frame = 0;
			let alpha = 0;

			let objSprite = ObjPrim_Create(OBJ_SPRITE_2D);
			ObjPrim_SetTexture(objSprite, img_th11_pause);
			ObjSprite2D_SetSourceRect(objSprite, 48, 156, 204, 188);
			ObjSprite2D_SetDestRect(objSprite, 0, 0, 156, 32);
			Obj_SetRenderPriorityI(objSprite, 100);
			ObjRender_SetPosition(objSprite, 240, 264, 0);

			let destinationx = frameArray[0] + 208;
			let destinationy = 244;

			let distancetopoint = ((destinationx-ObjRender_GetX(objSprite))^2+(destinationy-ObjRender_GetY(objSprite))^2)^0.5;
			let directiontopoint = atan2(destinationy-ObjRender_GetY(objSprite),destinationx-ObjRender_GetX(objSprite));

			while(isGamePaused == true)
			{
				if(isConfirm == true)
				{
					if(alpha < 255)
					{
						alpha += 255/8;
					}
					destinationy = 264;
				}
				else
				{
					if(alpha > 0)
					{
						alpha -= 255/8;
					}
					destinationy = 244;
				}
				distancetopoint = ((destinationx - ObjRender_GetX(objSprite)) ^ 2 + (destinationy - ObjRender_GetY(objSprite)) ^ 2) ^ 0.5;
				directiontopoint = atan2(destinationy - ObjRender_GetY(objSprite), destinationx - ObjRender_GetX(objSprite));

				if (distancetopoint >= 1)
				{
					ObjRender_SetPosition(objSprite, ObjRender_GetX(objSprite) + cos(directiontopoint) * distancetopoint * 0.35, ObjRender_GetY(objSprite) + sin(directiontopoint) * distancetopoint * 0.35, 0);
				}
				else
				{
					ObjRender_SetPosition(objSprite, destinationx, destinationy, 0);
				}
				ObjRender_SetAlpha(objSprite, alpha);
				yield;
			}
			destinationy = 244;
			while(alpha > 0)
			{
				distancetopoint = ((destinationx - ObjRender_GetX(objSprite)) ^ 2 + (destinationy - ObjRender_GetY(objSprite)) ^ 2) ^ 0.5;
				directiontopoint = atan2(destinationy - ObjRender_GetY(objSprite), destinationx - ObjRender_GetX(objSprite));

				if (distancetopoint >= 1)
				{
					ObjRender_SetPosition(objSprite, ObjRender_GetX(objSprite) + cos(directiontopoint) * distancetopoint * 0.35, ObjRender_GetY(objSprite) + sin(directiontopoint) * distancetopoint * 0.35, 0);
				}
				else
				{
					ObjRender_SetPosition(objSprite, destinationx, destinationy, 0);
				}
				alpha -= 255/8;
				ObjRender_SetAlpha(objSprite, alpha);
				yield;
			}
			Obj_Delete(objSprite);
		}

		let frame = CreatePauseFrame();
		//PauseMenuLeaf();
		
		//PauseMenuTitle();
		alternative(pauseType)
		case(TYPE_INGAME)
		{
			maxMenu = 4;
			PauseMenuLeaf(TYPE_INGAME);
			PauseMenuTitle(TYPE_INGAME);
			PauseMenuItem(0, 0, 272);
			PauseMenuItem(1, 1, 297);
			PauseMenuItem(2, 2, 322);
			PauseMenuItem(3, 3, 347);
			PauseMenuItem(4, 4, 372);
		}
		case(TYPE_GAMEOVER)
		{
			maxMenu = 3;
			PauseMenuLeaf(TYPE_GAMEOVER);
			PauseMenuTitle(TYPE_GAMEOVER);
			PauseMenuItem(0, 0, 272);
			PauseMenuItem(1, 1, 297);
			PauseMenuItem(2, 2, 322);
			PauseMenuItem(3, 3, 347);
		}
		case(TYPE_REPLAYOVER)
		{
			maxMenu = 1;
			PauseMenuLeaf(TYPE_INGAME);
			PauseMenuTitle(TYPE_INGAME);
			PauseMenuItem(0, 6, 290);
			PauseMenuItem(1, 5, 345);
		}
		ConfirmMenuItem(0);
		ConfirmMenuItem(1);
		ConfirmMenuReally();
		PauseBlur();
		Obj_Delete(frame);
	}

	function MenuItems()
	{
		if(GetVirtualKeyState(VK_SHOT) == KEY_PUSH)
		{
			alternative(pauseType)
			case(TYPE_INGAME)
			{
				alternative(pauseItem)
				case(0) //PAUSE_GAMERETURN
				{
					SelectResult(PAUSE_GAMERETURN);
				}
				case(1) //PAUSE_TITLERETURN
				{
					if(isConfirm == true)
					{
						if(confirmItem == 0)
						{
							SelectResult(PAUSE_TITLERETURN);
						}
						else if(confirmItem == 1)
						{
							PlaySE(se_cancel00);
							waitP(15);
							isConfirm = false;
						}
					}
					else
					{
						PlaySE(se_ok00);
						waitP(15);
						isConfirm = true;
						confirmItem = 1;
					}
				}
				case(2) //PAUSE_SAVEREPLAY
				{
					if(isConfirm == true)
					{
						if(confirmItem == 0)
						{
							SelectResult(PAUSE_SAVEREPLAY);
						}
						else if(confirmItem == 1)
						{
							PlaySE(se_cancel00);
							waitP(15);
							isConfirm = false;
						}
					}
					else
					{
						PlaySE(se_ok00);
						waitP(15);
						isConfirm = true;
						confirmItem = 1;
					}
					
				}
				case(3) //PAUSE_MANUAL
				{
					SelectResult(PAUSE_MANUAL);
				}
				case(4) //PAUSE_GIVEUP
				{
					if(isConfirm == true)
					{
						if(confirmItem == 0)
						{
							SelectResult(PAUSE_GIVEUP);
						}
						else if(confirmItem == 1)
						{
							PlaySE(se_cancel00);
							waitP(15);
							isConfirm = false;
						}
					}
					else
					{
						PlaySE(se_ok00);
						waitP(15);
						isConfirm = true;
						confirmItem = 1;
					}
				}
				case(5) //PAUSE_RETRY
				{
					SelectResult(PAUSE_RETRY);
				}
			}
			case(TYPE_GAMEOVER)
			{
				alternative(pauseItem)
				case(0) //PAUSE_RETRY
				{
					SelectResult(PAUSE_RETRY);
				}
				case(1) //PAUSE_TITLERETURN
				{
					SelectResult(PAUSE_TITLERETURN);
				}
				case(2) //PAUSE_SAVEREPLAY
				{
					SelectResult(PAUSE_SAVEREPLAY);
				}
				case(3) //PAUSE_EQUIPCHANGE
				{
					SelectResult(PAUSE_EQUIPCHANGE);
				}
				case(4) //PAUSE_MANUAL
				{
					if(isConfirm == true)
					{
						if(confirmItem == 0)
						{
							SelectResult(PAUSE_MANUAL);
						}
						else if(confirmItem == 1)
						{
							PlaySE(se_cancel00);
							waitP(15);
							isConfirm = false;
						}
					}
					else
					{
						PlaySE(se_ok00);
						waitP(15);
						isConfirm = true;
						confirmItem = 1;
					}
				}
			}
			case(TYPE_REPLAYOVER)
			{
				alternative(pauseItem)
				case(0) //PAUSE_TITLERETURN
				{
					SelectResult(PAUSE_TITLERETURN);
				}
				case(1) //PAUSE_REPLAYAGAIN
				{
					
				}
			}
		}
	}

	function SelectResult(id)
	{
		alternative(id)
		case(0) //PAUSE_GAMERETURN
		{
			PlaySE(se_ok00);
			isGamePaused = false;
			waitP(15);
			SetCommonData("isGamePaused", false);
			PauseStageScene(false);
			pauseActive = false;
			ObjSound_Play(currentBGM);
		}
		case(1) //PAUSE_TITLERETURN
		{
			PlaySE(se_ok00);
			waitP(15);
			ClearInvalidRenderPriority();
			isGamePaused = false;
			isConfirm = false;
			SetCommonData("isGamePaused", false);
			EndStageToTitle();
		}
		case(2) //PAUSE_SAVEREPLAY
		{
			PlaySE(se_ok00);
			waitP(15);
			SaveCommonDataAreaA2("REPLAY", GetCurrentScriptDirectory ~ "../replay/th00_00.rpy");
			ClearAreaCommonData("REPLAY");
			ClearInvalidRenderPriority();
			isGamePaused = false;
			isConfirm = false;
			SetCommonData("isGamePaused", false);
			EndStageToTitle();
		}
		case(3) //PAUSE_MANUAL
		{
			PlaySE(se_ok00);
			waitP(15);
		}
		case(4) //PAUSE_GIVEUP
		{
			PlaySE(se_ok00);
			waitP(15);
			ClearInvalidRenderPriority();
			isGamePaused = false;
			isConfirm = false;
			SetCommonData("isGamePaused", false);
			RestartStage();
		}
		case(5) //PAUSE_RETRY
		{
			PlaySE(se_ok00);
			waitP(15);
			ClearInvalidRenderPriority();
			isGamePaused = false;
			isConfirm = false;
			SetCommonData("isGamePaused", false);
			RestartStage();
		}
	}

	function StartPause(type)
	{
		pauseType = type;
		pauseItem = 0;
		isGamePaused = true;
		SetCommonData("isGamePaused", true);
		PlaySE(se_pause);
		yield;
		DoPause();
		PauseStageScene(true);
		waitP(15);
		pauseActive = true;
	}

	function waitP(v)
	{
		loop(v){yield;};
	}

	loop
	{
		if(GetCommonData("isGameStarted", false) == true)
		{
			if(isGamePaused == false)
			{
				if(GetVirtualKeyState(VK_PAUSE) == KEY_PUSH)
				{
					ObjSound_Stop(currentBGM);
					StartPause(TYPE_INGAME);
				}
				else if(GetCommonData("FP_EVENT_PLAYER_SHOOTDOWN", false) == true && GetCommonData("FP_PLAYER_LIFE", 0) <= -1)
				{
					waitP(38);
					StartPause(TYPE_GAMEOVER)
				}
				else if(GetCommonData("FP_END_REPLAY", false) == true)
				{
					StartPause(TYPE_REPLAYOVER);
					SetCommonData("FP_END_REPLAY", false);
				}
			}
			else if(isGamePaused == true)
			{
				MenuItems();
				if(GetVirtualKeyState(VK_PAUSE) == KEY_PUSH && pauseActive == true && pauseType == TYPE_INGAME)
				{
					isGamePaused = false;
					waitP(15);
					SetCommonData("isGamePaused", false);
					PauseStageScene(false);
					pauseActive = false;
					ObjSound_Play(currentBGM);
				}
				if(GetVirtualKeyState(VK_BOMB) == KEY_PUSH && pauseActive == true)
				{
					ClosePackage();
				}
				if(isConfirm == true)
				{
					if(GetVirtualKeyState(VK_DOWN) == KEY_PUSH && pauseActive == true)
					{
						confirmItem++;
						if(confirmItem > 1)
						{
							confirmItem = 0;
						}
						PlaySE(se_select00);
					}
					if(GetVirtualKeyState(VK_UP) == KEY_PUSH && pauseActive == true)
					{
						confirmItem--;
						if(confirmItem < 0)
						{
							confirmItem = 1;
						}
						PlaySE(se_select00);
					}

				}
				else
				{
					if(GetVirtualKeyState(VK_DOWN) == KEY_PUSH && pauseActive == true)
					{
						pauseItem++;
						if(pauseItem > maxMenu)
						{
							pauseItem = 0;
						}
						PlaySE(se_select00);
					}
					if(GetVirtualKeyState(VK_UP) == KEY_PUSH && pauseActive == true)
					{
						pauseItem--;
						if(pauseItem < 0)
						{
							pauseItem = maxMenu;
						}
						PlaySE(se_select00);
					}
				}
			}
		}
		yield;
	}
}

function CreateMenuOption_Numeric(name, mPage, mItem, mAnim, x, y, texPath, spX, spY, spWidth, spHeight, isSelectable)
{
	//let x1 = width * row;
	//let y1 = height * col;
	let texArray = [spX, spY, spWidth, spHeight];
	
	let menuObj = thDraw_CreateNumericSpriteList(texPath, 15, spX, spY, spWidth, spHeight, 1);
	thDraw_SetNumericSpriteListValue(menuObj, 100);
	thDraw_SetNumericSpriteListJustification(menuObj, 2);
	ObjRender_SetPosition(menuObj, x, y, 0);
	
	alternative(mAnim)
	case(ANIM_TITLE)
	{
		MenuAnim_TitleNumeric_th11(menuObj, mPage, mItem, texArray, isSelectable);
	}
	
	return menuObj;
}

function MenuAction_GoToPage(index, dir)
{
	if(dir == 0)
	{
		PlaySE(se_ok00);
		wait(menuSelectFlashTime);
		menuPage = index;
		menuState = menuSelect[index];
	}
	else if(dir == 1)
	{
		PlaySE(se_cancel00);
		menuPage = index;
		menuState = menuSelect[index];
	}
}

function MenuAction_SelectPlayerScript(script)
{
	
}

function MenuAction_SelectDifficulty()
{
	
}

function MenuAction_PlayStage(stage)
{
	PlaySE(se_ok00);
	wait(10);
	
	SetCommonData("Stage", stage);
	SetCommonData("FP_BOSS_START", false);

	InitializeStageScene();
	SetStageMainScript(stagePath);
	SetStagePlayerScript(player_current);
	
	SetCommonData("isLoading", true);
	FadeToBlack(5);
	FadeMenuBGM();
	wait(30);
	
	RemoveMenuTextures();
	wait(30);
	
	StartStageScene();
	RemoveBlack();
	FadeFromBlack(8);
	SetCommonData("isGameStarted", true);
	wait(20);
	
	SetCommonData("isLoading", false);
}

function MenuAction_PlaySpellcard()
{
	
}

task MenuNumeric(mPage, mItem)
{
	yield;
}

// -=-=-=-=-=-=-=-=-=-=- TH11 Style Menu -=-=-=-=-=-=-=-=-=-=-

function InitMenuObjects_th11()
{
	menuItem = 9;
	menuItemDiff = 4;
	menuItemDebug = 1;
	menuItemDiffEx = 2;
	menuItemPlSelOver = 5;
	menuItemPractice = [0, 0, 0, 0, 0, 0, 0, 0];
	menuItemReplay = [0, 0, 0, 0, 0];
	menuItemPause = [0, 0, 0, 0, 0];
	
	MenuBack_th11();
	
	CreateMenuOption_th11("GAME_START",     INDEX_TITLE, 0, ANIM_TITLE, 476, 232, img_th11_title01,   128, 32, 0, 0, true);
	CreateMenuOption_th11("EXTRA_START",    INDEX_TITLE, 1, ANIM_TITLE, 476, 256, img_th11_title01,   128, 32, 0, 1, true);
	CreateMenuOption_th11("PRACTICE",       INDEX_TITLE, 2, ANIM_TITLE, 476, 280, img_th11_title01,   128, 32, 0, 2, true);
	CreateMenuOption_th11("SPELL_PRACTICE", INDEX_TITLE, 3, ANIM_TITLE, 476, 304, img_th11_title01ex, 128, 32, 0, 0, true);
	CreateMenuOption_th11("REPLAY",         INDEX_TITLE, 4, ANIM_TITLE, 476, 328, img_th11_title01,   128, 32, 0, 3, true);
	CreateMenuOption_th11("PLAYER_DATA",    INDEX_TITLE, 5, ANIM_TITLE, 476, 352, img_th11_title01,   128, 32, 0, 4, true);
	CreateMenuOption_th11("MUSIC_ROOM",     INDEX_TITLE, 6, ANIM_TITLE, 476, 376, img_th11_title01,   128, 32, 0, 5, true);
	CreateMenuOption_th11("OPTION",         INDEX_TITLE, 7, ANIM_TITLE, 476, 400, img_th11_title01,   128, 32, 0, 6, true);
	CreateMenuOption_th11("QUIT",           INDEX_TITLE, 8, ANIM_TITLE, 476, 424, img_th11_title01,   128, 32, 0, 7, true);
	
	CreateMenuOption_th11("EASY",       INDEX_DIFFICULTY, 0, 1, 0, 0, img_th11_title_rank00, 256, 96, 0, 0, true);
	CreateMenuOption_th11("NORMAL",     INDEX_DIFFICULTY, 1, 1, 0, 0, img_th11_title_rank00, 256, 96, 0, 1, true);
	CreateMenuOption_th11("HARD",       INDEX_DIFFICULTY, 2, 1, 0, 0, img_th11_title_rank00, 256, 96, 0, 2, true);
	CreateMenuOption_th11("LUNATIC",    INDEX_DIFFICULTY, 3, 1, 0, 0, img_th11_title_rank00, 256, 96, 0, 3, true);
	CreateMenuOption_th11("RANK_TITLE", INDEX_DIFFICULTY, -1, -1, -256, 5, img_th11_title_select01, 256, 48, 0, 0, false);
	
	CreateMenuOption_th11("OP_BGM_V",   INDEX_OPTIONS, 0, ANIM_TITLE, 444, 304, img_th11_title01, 128, 32, 0, 8, false);
	CreateMenuOption_th11("OP_SE_V",    INDEX_OPTIONS, 1, ANIM_TITLE, 444, 328, img_th11_title01, 128, 32, 0, 9, false);
	CreateMenuOption_th11("OP_KEY",     INDEX_OPTIONS, 2, ANIM_TITLE, 444, 352, img_th11_title01, 128, 32, 0, 10, true);
	CreateMenuOption_th11("OP_DEFAULT", INDEX_OPTIONS, 3, ANIM_TITLE, 444, 376, img_th11_title01, 128, 32, 0, 11, true);
	CreateMenuOption_th11("OP_QUIT",    INDEX_OPTIONS, 4, ANIM_TITLE, 444, 400, img_th11_title01, 128, 32, 0, 7, true);
	
	bgmVolObj = CreateMenuOption_Numeric("OP_BGM_V_N", INDEX_OPTIONS, 0, ANIM_TITLE, 593, 303, img_th11_title01, 0, 480, 18, 32, false);
	CreateMenuOptionB_th11("OP_BGM_V_P",               INDEX_OPTIONS, 0, ANIM_TITLE, 608, 303, img_th11_title01, [360, 480, 24, 32], [384, 480, 24, 32], false);
	
	seVolObj  = CreateMenuOption_Numeric("OP_SE_V_N",  INDEX_OPTIONS, 1, ANIM_TITLE, 593, 327, img_th11_title01, 0, 480, 18, 32, false);
	CreateMenuOptionB_th11("OP_SE_V_P",                INDEX_OPTIONS, 1, ANIM_TITLE, 608, 327, img_th11_title01, [360, 480, 24, 32], [384, 480, 24, 32], false);
}

function CreateMenuOption_th11(name, mPage, mItem, mAnim, x, y, texPath, width, height, row, col, isSelectable)
{
	let x1 = width * row;
	let y1 = height * col;
	let texArray = [x1, y1, width, height];
	
	let menuObj = Create2DSpriteObject_M(texPath, x1, y1, width, height);
	ObjRender_SetPosition(menuObj, x, y, 0);
	
	alternative(mAnim)
	case(-1)
	{
		MenuAnim_Select_th11(menuObj, mPage, mItem, texArray);
	}
	case(ANIM_TITLE)
	{
		MenuAnim_Title_th11(menuObj, mPage, mItem, texArray, isSelectable);
	}
	case(1)
	{
		MenuAnim_Difficulty_th11(menuObj, mPage, mItem, texArray, isSelectable);
	}
	case(2)
	{
		MenuAnim_Kanji_th11(menuObj, mPage, texArray, mItem);
	}
	case(3)
	{
		MenuAnim_SA_th11(menuObj, mPage, texArray);
	}
	
	return menuObj;
}

function CreateMenuOptionB_th11(name, mPage, mItem, mAnim, x, y, texPath, rectArrayA, rectArrayB, isSelectable)
{
	let texArray = [rectArrayA, rectArrayB];
	
	let menuObj = Create2DSpriteObject_M(texPath, rectArrayA[0], rectArrayA[1], rectArrayA[2], rectArrayA[3]);
	ObjRender_SetPosition(menuObj, x, y, 0);
	
	alternative(mAnim)
	case(-1)
	{
		MenuAnim_Select_th11(menuObj, mPage, mItem, texArray);
	}
	case(ANIM_TITLE)
	{
		MenuAnim_TitleB_th11(menuObj, mPage, mItem, texArray, isSelectable);
	}
	case(1)
	{
		MenuAnim_Difficulty_th11(menuObj, mPage, mItem, texArray, isSelectable);
	}
	case(2)
	{
		MenuAnim_Kanji_th11(menuObj, mPage, texArray, mItem);
	}
	case(3)
	{
		MenuAnim_SA_th11(menuObj, mPage, texArray);
	}
	
	return menuObj;
}

task MenuHandler_th11()
{
	let debugTimer = 0;
	let waitTime = menuSelectFlashTime;
	
	Reset3DCamera_All();
	
	while(GetCommonData("isGameStarted", false) == false)
	{
		alternative(menuPage)
		case(INDEX_TITLE)//Title scene - 0
		{
			DoMenu(menuItem, 0);
			if(isShotPressed)
			{
				if(menuSelect[INDEX_TITLE] == 0) //Game Start
				{
					MenuAction_GoToPage(INDEX_DIFFICULTY, 0);
				}
				if(menuSelect[INDEX_TITLE] == 7) //Options
				{
					MenuAction_GoToPage(INDEX_OPTIONS, 0);
				}
				if(menuSelect[INDEX_TITLE] == maxMenu)
				{
					ClosePackage();
				}
			}
			else if(isBombPressed)
			{
				menuState = maxMenu;
				menuSelect[INDEX_TITLE] = menuState;
				PlaySE(se_cancel00);
			}
			else if(GetVirtualKeyState(VK_SLOWMOVE) == KEY_HOLD)
			{
				if(debugTimer > 120 && GetCommonData("isDebugEnabled", 0) == 0)
				{
					menuPage = 99;
					menuState = 0;
				}
				debugTimer++;
			}
			else if(GetVirtualKeyState(VK_USER1) == KEY_PUSH)
			{
				StartStageFromMain(1);
			}
			else
			{
				debugTimer = 0;
			}
		}
		case(INDEX_DIFFICULTY) //Difficulty Select - 1
		{
			DoMenuB(menuItemDiff, 1);
			if(isShotPressed)
			{
				SetCommonData("Difficulty", menuSelect[INDEX_DIFFICULTY]);
				MenuAction_PlayStage(1);
			}
			if(isBombPressed)
			{
				MenuAction_GoToPage(INDEX_TITLE, 1);
			}
		}
		case(INDEX_PLAYERSELECT) //Player Select - 2
		{
			DoMenu(menuItemPlSel, 2);
			if(isShotPressed)
			{
				PlaySE(se_ok00);
				wait(waitTime);
				PlayStage();
			}
			if(isBombPressed)
			{
				MenuAction_GoToPage(INDEX_DIFFICULTY, 0);
			}
		}
		case(INDEX_OPTIONS)
		{
			DoMenu(menuItemOptions, 7);
			if(isLeftPressed)
			{
				alternative(menuSelect[INDEX_OPTIONS])
				case(0)
				{
					let l_v = GetCommonData("BGMVol", 0);
					l_v -= 5;
					if(l_v < 0){l_v = 0}
					SetCommonData("BGMVol", l_v);
				}
				case(1)
				{
					let l_v = GetCommonData("SEVol", 0);
					l_v -= 5;
					if(l_v < 0){l_v = 0}
					SetCommonData("SEVol", l_v);
				}
			}
			if(isRightPressed)
			{
				alternative(menuSelect[INDEX_OPTIONS])
				case(0)
				{
					let l_v = GetCommonData("BGMVol", 0);
					l_v += 5;
					if(l_v > 100){l_v = 100}
					SetCommonData("BGMVol", l_v);
				}
				case(1)
				{
					let l_v = GetCommonData("SEVol", 0);
					l_v += 5;
					if(l_v > 100){l_v = 100}
					SetCommonData("SEVol", l_v);
				}
			}
			if(isShotPressed)
			{
				alternative(menuSelect[INDEX_OPTIONS])
				case(2)
				{
					PlaySE(se_ok00);
					wait(waitTime);
				}
				case(3)
				{
					PlaySE(se_ok00);
					wait(waitTime);
				}
				case(4)
				{
					PlaySE(se_ok00);
					wait(waitTime);
					menuPage = INDEX_TITLE;
					menuState = menuSelect[INDEX_TITLE];
				}

			}
			if(isBombPressed)
			{
				menuState = maxMenu;
				menuSelect[INDEX_OPTIONS] = menuState;
				PlaySE(se_cancel00);
			}
		}
		case(INDEX_DEBUG) //Debug Menu
		{
			if(GetVirtualKeyState(VK_SHOT) == KEY_PUSH)
			{
				SetCommonData("isDebugEnabled", 1);
				wait(waitTime);
				menuPage = INDEX_TITLE;
				menuState = menuSelect[INDEX_TITLE];
				PlayStage();
				PlaySE(se_ok00);
			}
			if(GetVirtualKeyState(VK_BOMB) == KEY_PUSH)
			{
				menuPage = INDEX_TITLE;
				menuState = menuSelect[INDEX_TITLE];
				PlaySE(se_cancel00);
			}
		}
		yield;
	}
}

task MenuAnim_Select_th11(menuObj, mPage, mItem, texArray)
{
	let initX = ObjRender_GetX(menuObj);
	let initY = ObjRender_GetY(menuObj);

	let pageHold = -1;
	let IPFrame = 0;
	let menuStartX = 0;
	let menuStartY = 0;
	let menuDestX = 0;
	let menuDestY = 0;

	let alpha = 255;

	while(GetCommonData("isGameStarted", false) == false)
	{
		if(pageHold != menuPage && menuPage != mPage)
		{
			menuStartX = ObjRender_GetX(menuObj);
			menuStartY = ObjRender_GetY(menuObj);
			
			menuDestX = -256;
			menuDestY = 5;
			IPFrame = 0;
		}
		else if(pageHold != menuPage && menuPage == mPage)
		{
			menuStartX = ObjRender_GetX(menuObj);
			menuStartY = ObjRender_GetY(menuObj);
			
			menuDestX = 10;
			menuDestY = 5;
			IPFrame = 0;
		}
		
		if(IPFrame < 18)
		{
			IPFrame++;
		}
		initX = InterpolateValue(menuStartX, menuDestX, IPFrame, IP_DECELERATE, 18);
		initY = InterpolateValue(menuStartY, menuDestY, IPFrame, IP_DECELERATE, 18);
		pageHold = menuPage;
		ObjRender_SetPosition(menuObj, round(initX), round(initY), 0);
		yield;
	}
	Obj_Delete(menuObj);
}

task MenuAnim_Title_th11(menuObj, mPage, mItem, texArray, isSelectable)
{
	let initX = ObjRender_GetX(menuObj);
	let initY = ObjRender_GetY(menuObj);
	
	let sX = initX;
	let sY = initY;
	
	let pageHold = -1;
	let IPFrame = 0;
	let menuStartX = 0;
	let menuStartY = 0;
	let menuDestX = 0;
	let menuDestY = 0;

	let lastItem = 0;

	let xShake = 0;
	let shakeFlag = false;

	let moveFrame = 0;
	let isFlash = false;

	let alpha = 255;
	let alphaMod = 500;

	let counter = 0;
	task MenuAnim_Shake()
	{
		let shakeFrames = 2;
		ascent(i in 0..shakeFrames)
		{
			xShake = InterpolateValue(-4, 0, i, IP_DECELERATE, shakeFrames);
			yield;
		}
		ascent(i in 0..shakeFrames)
		{
			xShake = InterpolateValue(-2, 0, i, IP_DECELERATE, shakeFrames);
			yield;
		}
		ascent(i in 0..shakeFrames)
		{
			xShake = InterpolateValue(-7, 0, i, IP_DECELERATE, shakeFrames);
			yield;
		}
		ascent(i in 0..shakeFrames)
		{
			xShake = InterpolateValue(-4, 0, i, IP_DECELERATE, shakeFrames);
			yield;
		}
		ascent(i in 0..shakeFrames)
		{
			xShake = InterpolateValue(-4, 0, i, IP_DECELERATE, shakeFrames);
			yield;
		}
	}

	while(GetCommonData("isGameStarted", false) == false)
	{
		if(pageHold != menuPage && menuPage != mPage)
		{
			menuStartX = ObjRender_GetX(menuObj);
			menuStartY = ObjRender_GetY(menuObj);
			
			menuDestX = sX + 50;
			menuDestY = sY;
			IPFrame = 0;
		}
		else if(pageHold != menuPage && menuPage == mPage)
		{
			menuStartX = ObjRender_GetX(menuObj);
			menuStartY = ObjRender_GetY(menuObj);
			
			menuDestX = sX;
			menuDestY = sY;
			IPFrame = 0;
		}
		
		if(menuPage == mPage)
		{
			if(!isFlash)
			{
				if(alpha < 255)
				{
					alpha += 15;
				}
			}
			if(menuSelect[mPage] == mItem)
			{
				if(!shakeFlag)
				{
					shakeFlag = true;
					MenuAnim_Shake();
				}
				if(GetVirtualKeyState(VK_SHOT) == KEY_PUSH && isSelectable == true)
				{
					isFlash = true;
				}
				ObjSprite2D_SetSourceRect(menuObj, texArray[0], texArray[1], texArray[0] + texArray[2], texArray[1] + texArray[3]);
			}
			else
			{
				shakeFlag = false;
				ObjSprite2D_SetSourceRect(menuObj, texArray[0] + texArray[2], texArray[1], texArray[0] + (texArray[2]*2), texArray[1] + texArray[3]);
			}
		}
		else
		{
			if(!isFlash)
			{
				if(alpha > 0)
				{
					alpha -= 15;
				}
			}

			shakeFlag = false;
		}
		
		if(isFlash)
		{
			if(counter < 15)
			{
				alphaMod = -alphaMod;
				counter++;
			}
			else
			{
				isFlash = false;
				counter = 0;
			}
			ObjRender_SetAlpha(menuObj, alpha - alphaMod);
		}
		else
		{
			ObjRender_SetAlpha(menuObj, alpha);
		}
		
		if(IPFrame < 18)
		{
			IPFrame++;
		}
		initX = InterpolateValue(menuStartX, menuDestX, IPFrame, IP_DECELERATE, 18);
		initY = InterpolateValue(menuStartY, menuDestY, IPFrame, IP_DECELERATE, 18);
		pageHold = menuPage;
		ObjRender_SetPosition(menuObj, round(initX + xShake), round(initY), 0);
		yield;
	}
	Obj_Delete(menuObj);
}

task MenuAnim_TitleB_th11(menuObj, mPage, mItem, texArray, isSelectable)
{
	let initX = ObjRender_GetX(menuObj);
	let initY = ObjRender_GetY(menuObj);
	
	let sX = initX;
	let sY = initY;
	
	let pageHold = -1;
	let IPFrame = 0;
	let menuStartX = 0;
	let menuStartY = 0;
	let menuDestX = 0;
	let menuDestY = 0;

	let lastItem = 0;

	let xShake = 0;
	let shakeFlag = false;

	let moveFrame = 0;
	let isFlash = false;

	let alpha = 255;
	let alphaMod = 500;

	let counter = 0;
	task MenuAnim_Shake()
	{
		let shakeFrames = 2;
		ascent(i in 0..shakeFrames)
		{
			xShake = InterpolateValue(-4, 0, i, IP_DECELERATE, shakeFrames);
			yield;
		}
		ascent(i in 0..shakeFrames)
		{
			xShake = InterpolateValue(-2, 0, i, IP_DECELERATE, shakeFrames);
			yield;
		}
		ascent(i in 0..shakeFrames)
		{
			xShake = InterpolateValue(-7, 0, i, IP_DECELERATE, shakeFrames);
			yield;
		}
		ascent(i in 0..shakeFrames)
		{
			xShake = InterpolateValue(-4, 0, i, IP_DECELERATE, shakeFrames);
			yield;
		}
		ascent(i in 0..shakeFrames)
		{
			xShake = InterpolateValue(-4, 0, i, IP_DECELERATE, shakeFrames);
			yield;
		}
	}

	while(GetCommonData("isGameStarted", false) == false)
	{
		if(pageHold != menuPage && menuPage != mPage)
		{
			menuStartX = ObjRender_GetX(menuObj);
			menuStartY = ObjRender_GetY(menuObj);
			
			menuDestX = sX + 50;
			menuDestY = sY;
			IPFrame = 0;
		}
		else if(pageHold != menuPage && menuPage == mPage)
		{
			menuStartX = ObjRender_GetX(menuObj);
			menuStartY = ObjRender_GetY(menuObj);
			
			menuDestX = sX;
			menuDestY = sY;
			IPFrame = 0;
		}
		
		if(menuPage == mPage)
		{
			if(!isFlash)
			{
				if(alpha < 255)
				{
					alpha += 15;
				}
			}
			if(menuSelect[mPage] == mItem)
			{
				if(!shakeFlag)
				{
					shakeFlag = true;
					MenuAnim_Shake();
				}
				if(GetVirtualKeyState(VK_SHOT) == KEY_PUSH && isSelectable == true)
				{
					isFlash = true;
				}
				ObjSprite2D_SetSourceRect(menuObj, texArray[0][0], texArray[0][1], texArray[0][0] + texArray[0][2], texArray[0][1] + texArray[0][3]);
			}
			else
			{
				shakeFlag = false;
				ObjSprite2D_SetSourceRect(menuObj, texArray[1][0], texArray[1][1], texArray[1][0] + texArray[1][2], texArray[1][1] + texArray[1][3]);
			}

		}
		else
		{
			if(!isFlash)
			{
				if(alpha > 0)
				{
					alpha -= 15;
				}
			}

			shakeFlag = false;
		}
		
		if(isFlash)
		{
			if(counter < 15)
			{
				alphaMod = -alphaMod;
				counter++;
			}
			else
			{
				isFlash = false;
				counter = 0;
			}
			ObjRender_SetAlpha(menuObj, alpha - alphaMod);
		}
		else
		{
			ObjRender_SetAlpha(menuObj, alpha);
		}
		
		if(IPFrame < 18)
		{
			IPFrame++;
		}
		initX = InterpolateValue(menuStartX, menuDestX, IPFrame, IP_DECELERATE, 18);
		initY = InterpolateValue(menuStartY, menuDestY, IPFrame, IP_DECELERATE, 18);
		pageHold = menuPage;
		ObjRender_SetPosition(menuObj, round(initX + xShake), round(initY), 0);
		yield;
	}
	Obj_Delete(menuObj);
}

task MenuAnim_Difficulty_th11(menuObj, mPage, mItem, texArray, isSelectable)
{
	let initX = ObjRender_GetX(menuObj);
	let initY = ObjRender_GetY(menuObj);

	let isFlash = false;

	let alpha = 0;
	let subAlpha = 0;
	let alphaMod = 500;
	
	let posArray = [[0, 0], [0, 0], [0, 0], [0, 0]];
	let itemHold = -1;
	let pageHold = -1;
	let IPFrame = 0;
	let menuStartX = 0;
	let menuStartY = 0;
	let menuDestX = 0;
	let menuDestY = 0;
	let counter = 0;
	
	let xSpacing = 0;
	let ySpacing = 128;
	
	alternative(mItem)
	case(0){posArray = [[xSpacing*0, ySpacing*0], [xSpacing*-1, ySpacing*-1], [xSpacing*-2, ySpacing*-2], [xSpacing*-3, ySpacing*-3]];}
	case(1){posArray = [[xSpacing*1, ySpacing*1], [ xSpacing*0,  ySpacing*0], [xSpacing*-1, ySpacing*-1], [xSpacing*-2, ySpacing*-2]];}
	case(2){posArray = [[xSpacing*2, ySpacing*2], [ xSpacing*1,  ySpacing*1], [ xSpacing*0,  ySpacing*0], [xSpacing*-1, ySpacing*-1]];}
	case(3){posArray = [[xSpacing*3, ySpacing*3], [ xSpacing*2,  ySpacing*2], [ xSpacing*1,  ySpacing*1], [ xSpacing*0,  ySpacing*0]];}
	
	let subObj = Create2DSpriteObject_M(img_th11_title_rank00, 256, 0 + (96 * mItem), 256, 96);

	while(GetCommonData("isGameStarted", false) == false)
	{	
		if(itemHold != menuSelect[mPage])
		{
			menuStartX = ObjRender_GetX(menuObj);
			menuStartY = ObjRender_GetY(menuObj);
			
			menuDestX = posArray[menuSelect[mPage]][0] + (320 - (texArray[2] / 2));
			menuDestY = posArray[menuSelect[mPage]][1] + (240 - (texArray[3] / 2));
			IPFrame = 0;
		}
		
		if(pageHold != menuPage && menuPage != mPage)
		{
			menuStartX = ObjRender_GetX(menuObj);
			menuStartY = ObjRender_GetY(menuObj);
			
			menuDestX = 0 + (320 - (texArray[2] / 2));
			menuDestY = 0 + (240 - (texArray[3] / 2));
			IPFrame = 0;
		}
		else if(pageHold != menuPage && menuPage == mPage)
		{
			menuStartX = ObjRender_GetX(menuObj);
			menuStartY = ObjRender_GetY(menuObj);
			
			menuDestX = posArray[menuSelect[mPage]][0] + (320 - (texArray[2] / 2));
			menuDestY = posArray[menuSelect[mPage]][1] + (240 - (texArray[3] / 2));
			IPFrame = 0;
		}
		
		if(menuPage == mPage)
		{
			if(menuSelect[mPage] == mItem)
			{
				if(GetVirtualKeyState(VK_SHOT) == KEY_PUSH)
				{
					isFlash = true;
				}
				if(alpha < 255)
				{
					alpha += 8.5;
				}
				if(subAlpha > 0)
				{
					subAlpha -= 8.5;
				}
			}
			else
			{
				if(alpha > 0)
				{
					alpha -= 8.5;
				}
				if(subAlpha < 255)
				{
					subAlpha += 8.5;
				}
			}
		}
		else
		{
			if(alpha > 0)
			{
				alpha -= 15;
			}
			if(subAlpha > 0)
			{
				subAlpha -= 15;
			}
		}
		
		if(isFlash)
		{
			if(counter < 15)
			{
				alphaMod = -alphaMod;
				counter++;
			}
			else
			{
				isFlash = false;
				counter = 0;
			}
			ObjRender_SetAlpha(menuObj, alpha - alphaMod);
		}
		else
		{
			ObjRender_SetAlpha(menuObj, alpha);
			ObjRender_SetAlpha(subObj, subAlpha);
		}
		
		if(alpha < 0){alpha = 0;}
		if(alpha > 255){alpha = 255;}
		
		if(subAlpha < 0){subAlpha = 0;}
		if(subAlpha > 255){subAlpha = 255;}
		
		if(IPFrame < 30)
		{
			IPFrame++;
		}
		initX = InterpolateValue(menuStartX, menuDestX, IPFrame, IP_DECELERATE, 30);
		initY = InterpolateValue(menuStartY, menuDestY, IPFrame, IP_DECELERATE, 30);
		
		ObjRender_SetPosition(menuObj, round(initX), round(initY), 0);
		ObjRender_SetPosition(subObj, round(initX), round(initY), 0);
		itemHold = menuSelect[mPage];
		pageHold = menuPage;
		yield;
	}
	Obj_Delete(menuObj);
	Obj_Delete(subObj);
}

task MenuAnim_Kanji_th11(menuObj, mPage, texArray, id)
{

}

task MenuAnim_TitleNumeric_th11(menuObj, mPage, mItem, texArray, isSelectable)
{
	let initX = ObjRender_GetX(menuObj);
	let initY = ObjRender_GetY(menuObj);
	
	let sX = initX;
	let sY = initY;
	
	let pageHold = -1;
	let IPFrame = 0;
	let menuStartX = 0;
	let menuStartY = 0;
	let menuDestX = 0;
	let menuDestY = 0;

	let lastItem = 0;

	let xShake = 0;
	let shakeFlag = false;

	let moveFrame = 0;
	let isFlash = false;

	let alpha = 255;
	let alphaMod = 500;

	let counter = 0;
	task MenuAnim_Shake()
	{
		let shakeFrames = 2;
		ascent(i in 0..shakeFrames)
		{
			xShake = InterpolateValue(-4, 0, i, IP_DECELERATE, shakeFrames);
			yield;
		}
		ascent(i in 0..shakeFrames)
		{
			xShake = InterpolateValue(-2, 0, i, IP_DECELERATE, shakeFrames);
			yield;
		}
		ascent(i in 0..shakeFrames)
		{
			xShake = InterpolateValue(-7, 0, i, IP_DECELERATE, shakeFrames);
			yield;
		}
		ascent(i in 0..shakeFrames)
		{
			xShake = InterpolateValue(-4, 0, i, IP_DECELERATE, shakeFrames);
			yield;
		}
		ascent(i in 0..shakeFrames)
		{
			xShake = InterpolateValue(-4, 0, i, IP_DECELERATE, shakeFrames);
			yield;
		}
	}

	while(GetCommonData("isGameStarted", false) == false)
	{
		if(pageHold != menuPage && menuPage != mPage)
		{
			menuStartX = ObjRender_GetX(menuObj);
			menuStartY = ObjRender_GetY(menuObj);
			
			menuDestX = sX + 50;
			menuDestY = sY;
			IPFrame = 0;
		}
		else if(pageHold != menuPage && menuPage == mPage)
		{
			menuStartX = ObjRender_GetX(menuObj);
			menuStartY = ObjRender_GetY(menuObj);
			
			menuDestX = sX;
			menuDestY = sY;
			IPFrame = 0;
		}
		
		if(menuPage == mPage)
		{
			if(!isFlash)
			{
				if(alpha < 255)
				{
					alpha += 15;
				}
			}
			if(menuSelect[mPage] == mItem)
			{
				if(!shakeFlag)
				{
					shakeFlag = true;
					MenuAnim_Shake();
				}
				if(GetVirtualKeyState(VK_SHOT) == KEY_PUSH && isSelectable == true)
				{
					isFlash = true;
				}
				//ObjSprite2D_SetSourceRect(menuObj, texArray[0], texArray[1], texArray[0] + texArray[2], texArray[1] + texArray[3]);
				thDraw_SetNumericSpriteListOffset(menuObj, 0, 0);
			}
			else
			{
				shakeFlag = false;
				//ObjSprite2D_SetSourceRect(menuObj, texArray[0] + texArray[2], texArray[1], texArray[0] + (texArray[2]*2), texArray[1] + texArray[3]);
				thDraw_SetNumericSpriteListOffset(menuObj, 180, 0);
			}
		}
		else
		{
			if(!isFlash)
			{
				if(alpha > 0)
				{
					alpha -= 15;
				}
			}

			shakeFlag = false;
		}
		
		if(isFlash)
		{
			if(counter < 15)
			{
				alphaMod = -alphaMod;
				counter++;
			}
			else
			{
				isFlash = false;
				counter = 0;
			}
			ObjRender_SetAlpha(menuObj, alpha - alphaMod);
		}
		else
		{
			ObjRender_SetAlpha(menuObj, alpha);
		}
		
		if(IPFrame < 18)
		{
			IPFrame++;
		}
		initX = InterpolateValue(menuStartX, menuDestX, IPFrame, IP_DECELERATE, 18);
		initY = InterpolateValue(menuStartY, menuDestY, IPFrame, IP_DECELERATE, 18);
		pageHold = menuPage;
		ObjRender_SetPosition(menuObj, round(initX + xShake), round(initY), 0);
		yield;
	}
	Obj_Delete(menuObj);
}

task MenuAnim_SA_th11(menuObj, mPage, texArray)
{
	
}

task MenuBack_th11()
{
	let mainBG00 = Create2DSpriteObject(img_th11_title00a, 0, 0, 640, 480);

	let selectBG00 = Create2DSpriteObject(img_th11_title_select00, 0, 0, 512, 480);
	let selectBG01 = Create2DSpriteObject(img_th11_title_select00b, 0, 0, 128, 480);

	let selectAlpha = 0;

	Obj_SetRenderPriorityI(mainBG00, 9);

	Obj_SetRenderPriorityI(selectBG00, 10);
	Obj_SetRenderPriorityI(selectBG01, 10);
	ObjRender_SetPosition(selectBG01, 512, 0, 0);

	ObjRender_SetAlpha(mainBG00, 256);
	ObjRender_SetAlpha(selectBG00, 0);
	ObjRender_SetAlpha(selectBG01, 0);
	while(GetCommonData("isGameStarted", false) == false)
	{
		alternative(menuPage)
		case(INDEX_TITLE, INDEX_OPTIONS)
		{
			if(selectAlpha > 0)
			{
				selectAlpha -= 5;
			}
		}
		others
		{
			if(selectAlpha < 256)
			{
				selectAlpha += 5;
			}
		}
		ObjRender_SetAlpha(selectBG00, selectAlpha);
		ObjRender_SetAlpha(selectBG01, selectAlpha);
		yield;
	}
	Obj_Delete(mainBG00);
	//Obj_Delete(mainBG01);
	Obj_Delete(selectBG00);
	Obj_Delete(selectBG01);
}








