/* -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
	thlib Animation Library (animate_lib.dnh)
	
	Author: Frenticpony
	Version -
	
	to do: animation library: ease of use- replace and rework old code down to one animate task, use arrays to store frame data and rects
	
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= */

//let animEnemyA = thAnim_Init(texture); //returns the new animID
//thAnim_AddAnimationFramesA(animID, type, frameRate, x, y, width, heigth, direction, count);
//thAnim_AddAnimationFramesB(animID, type, frameRate, x, y, width, height, [[row, col], [row, col], [row, col], [row, col]]);
//thAnim_AddAnimationFramesC(animID, type, frameRate, [[x1, y1, x2, y2], [x1, y1, x2, y2], [x1, y1, x2, y2], [x1, y1, x2, y2]]);
//thAnim_SetAnimationSpeed(animID, type, frameRate);
//thAnim_SetAnimationLoop(animID, type, frameRate, frameStart, frameEnd);
//thAnim_SetNextAnimationType(animID, typeA, typeB, loopCount);
//thAnim_SetAnimationTexture(animID, type, texture);
//thAnim_SetInvincibilityTexture(animID, texture);

//let anim = thAnimObj_Create(animID); //returns a new sprite2D object
//thAnimObj_CreateToEnemy(eneID, animID); //assigns necessary Obj_Values to an enemy object
//thAnimObj_AssignToMoveObject(objID, moveObjID);
//thAnimObj_SetAnimationID(objID, animID);
//thAnimObj_ChangeAnimationToTypeA(objID, type);
//thAnimObj_ChangeAnimationToTypeB(objID, type);

let thGlobal_animArray = [];
let thGlobal_animArrayTextures = [];

let ANIM_IDLE = 0;
let ANIM_LEFT = 1;
let ANIM_RIGHT = 2;
let ANIM_ATTACK = 3;
let ANIM_USER = 4;

// -=-=-=-=-=-=-=-=-=-=- thAnim Library -=-=-=-=-=-=-=-=-=-=-

function thAnim_Init(texture)
{
	thGlobal_animArray = thGlobal_animArray ~ [[[[ANIM_IDLE, 5, -1, -1]], [[ANIM_LEFT, -1, -1, -1]], [[ANIM_RIGHT, -1, -1, -1]], [[ANIM_ATTACK, -1, -1, -1]]]];
	thGlobal_animArrayTextures = thGlobal_animArrayTextures ~ [[texture, texture]];
	return length(thGlobal_animArray) - 1;
}

function thAnim_AddAnimationFramesA(animID, animType, sprX, sprY, sprWidth, sprHeight, sprDirection, sprCount)
{
	let la_animID = thGlobal_animArray[animID];
	let la_animType = thGlobal_animArray[animID][animType];
	//la_animType[0][2] = 1;
	//la_animType[0][3] = sprCount - 1;

	alternative(sprDirection)
	case(0) //RIGHT
	{
		ascent(i in 0..sprCount)
		{
			la_animType = la_animType ~ [[sprX + (sprWidth*i), sprY, sprX + (sprWidth*(i+1)), sprY + sprHeight]];
		}
	}
	thGlobal_animArray[animID][animType] = la_animType;
}

function thAnim_SetAnimationSpeed(animID, animType, frameRate)
{
	thGlobal_animArray[animID][animType][0][1] = frameRate;
}

function thAnim_SetAnimationLoop(animID, animType, loopStart, loopEnd)
{
	thGlobal_animArray[animID][animType][0][2] = loopStart;
	thGlobal_animArray[animID][animType][0][3] = loopEnd;
}

function thAnimObj_Create(animID)
{
	let __animObj = ObjPrim_Create(OBJ_SPRITE_2D);
	Obj_SetValue(__animObj, "A_ID", animID);  //animation ID
	Obj_SetValue(__animObj, "A_MO", -1);  //assigned Move Object
	Obj_SetValue(__animObj, "A_AT", 0);   //current Animation Type
	Obj_SetRenderPriorityI(__animObj, 41);
	__thAnim_Loop(__animObj, -1, thGlobal_animArray[animID]);
	return __animObj;
}

function thAnimObj_CreateOnMoveObject(animID, moveObj)
{
	let __animObj = ObjPrim_Create(OBJ_SPRITE_2D);
	Obj_SetValue(__animObj, "A_ID", animID);  //animation ID
	Obj_SetValue(__animObj, "A_MO", moveObj);  //assigned Move Object
	Obj_SetValue(__animObj, "A_AT", 0);   //current Animation Type
	Obj_SetRenderPriorityI(__animObj, 41);
	__thAnim_Loop(__animObj, -1, thGlobal_animArray[animID]);
	return __animObj;
}

function thAnimObj_AssignToMoveObject(__animObj, __moveObj)
{
	Obj_SetValue(__animObj, "A_MO", __moveObj);
}

task __thAnim_Loop(__animObj, __moveObj, animArray)
{
	//let __TextureData = animArray[0][0];
	let __AnimType = ANIM_IDLE;
	let __AnimFrame = 0;
	let __AnimFrameB = 0;
	let __AnimFrameCounter = 0;
	let __AnimFrameCounterB = 0;
	let __AnimRects = animArray[__AnimType][__AnimFrame + 1];
	let __MoveObj = -1;
	
	let __enemyDirection = 0;
	let __animDirection = 0;
	
	let __FramesIdle = [];
	let __SpeedIdle = 0;
	let __LengthIdle = 0;
	
	let __FramesRight = [];
	let __SpeedRight = 0;
	let __LengthRight = 0;
	let __LoopRight = [-1, -1];
	
	let __FramesLeft = [];
	let __SpeedLeft = 0;
	let __LengthLeft = 0;
	let __LoopLeft = [-1, -1];
	
	let __FramesAttack = [];
	let __SpeedAttack = 0;
	let __LengthAttack = 0;
	let __LoopAttack = [-1, -1];
	
	let __flipLeft = false;
	let __flipRight = false;
	let __NoMoveAnim = false;
	
	if(animArray[ANIM_IDLE][0][1] != -1)
	{
		__FramesIdle = animArray[ANIM_IDLE];
		__SpeedIdle = __FramesIdle[0][1];
		__LengthIdle = length(__FramesIdle) - 1;
	}
	
	if(animArray[ANIM_ATTACK][0][1] != -1)
	{
		__FramesAttack = animArray[ANIM_ATTACK];
		__SpeedAttack = __FramesAttack[0][1];
		__LengthAttack = length(__FramesAttack) - 1;
		__LoopAttack = [__FramesAttack[0][2], __FramesAttack[0][3]];
	}
	WriteLog(animArray[ANIM_ATTACK]);
	
	if(animArray[ANIM_LEFT][0][1] != -1)
	{
		__FramesLeft = animArray[ANIM_LEFT];
		__SpeedLeft = __FramesLeft[0][1];
		__LengthLeft = length(__FramesLeft) - 1;
		__LoopLeft = [__FramesLeft[0][2], __FramesLeft[0][3]];
		if(animArray[ANIM_RIGHT][0][1] == -1)
		{
			__FramesRight = __FramesLeft;
			__SpeedRight = __FramesLeft[0][1];
			__LengthRight = length(__FramesLeft) - 1;
			__LoopRight = [__FramesLeft[0][2], __FramesLeft[0][3]];
			__flipRight = true;
		}
	}
	
	if(animArray[ANIM_RIGHT][0][1] != -1)
	{
		__FramesRight = animArray[ANIM_RIGHT];
		__SpeedRight = __FramesRight[0][1];
		__LengthRight = length(__FramesRight) - 1;
		__LoopRight = [__FramesRight[0][2], __FramesRight[0][3]];
		if(animArray[ANIM_LEFT][0][1] == -1)
		{
			__FramesLeft = animArray[ANIM_RIGHT];
			__SpeedLeft = __FramesRight[0][1];
			__LengthLeft = length(__FramesRight) - 1;
			__LoopLeft = [__FramesRight[0][2], __FramesRight[0][3]];
			__flipLeft = true;
		}
	}
	
	if(animArray[ANIM_LEFT][0][1] == -1 && animArray[ANIM_RIGHT][0][1] == -1){__NoMoveAnim = true;}
	
	ObjPrim_SetTexture(__animObj, thGlobal_animArrayTextures[Obj_GetValue(__animObj, "A_ID")][0]);
	ObjRender_SetFilterType(__animObj, FILTER_NONE);
	
	while(!Obj_IsDeleted(__animObj))
	{
		__MoveObj = Obj_GetValueD(__animObj, "A_MO", -1);
		
		let __x_vel = ObjMove_GetSpeed(__MoveObj) * cos(ObjMove_GetAngle(__MoveObj));

		//all of this nonsense because value*cos(90) won't return exactly 0
		__x_vel = __x_vel * 10000000;
		__x_vel = truncate(__x_vel);
		__x_vel = __x_vel / 10000000;
		//end nonsense

		if(__x_vel < 0)
		{
			__enemyDirection = -1;
			Obj_SetValue(__animObj, "A_ATK", false);
			__AnimFrameB = 1;
		}
		else if(__x_vel > 0)
		{
			__enemyDirection = 1;
			Obj_SetValue(__animObj, "A_ATK", false);
			__AnimFrameB = 1;
		}
		else
		{
			__enemyDirection = 0;
		}
		
		if(__animDirection == __enemyDirection && __enemyDirection != 0)
		{
			if(__animDirection == -1) //LEFT
			{
				if(__AnimFrameCounter % __SpeedLeft == 0)
				{
					__AnimFrame++;
					if(__LoopLeft != [-1, -1])
					{
						if(__AnimFrame > __LoopLeft[1])
						{
							__AnimFrame = __LoopLeft[0];
						}
					}
					else
					{
						if(__AnimFrame >= __LengthLeft)
						{
							__AnimFrame = __LengthLeft;
						}
					}
				}
			}
			else if(__animDirection == 1) //RIGHT
			{
				
				if(__AnimFrameCounter % __SpeedRight == 0)
				{
					__AnimFrame++;
					if(__LoopRight != [-1, -1])
					{
						if(__AnimFrame > __LoopRight[1])
						{
							__AnimFrame = __LoopRight[0];
						}
					}
					else
					{
						if(__AnimFrame >= __LengthRight)
						{
							__AnimFrame = __LengthRight;
						}
					}
				}
			}
			__AnimFrameCounter++;
		}
		else if(__AnimFrame > 0)
		{
			if(__animDirection == -1) //LEFT
			{
				if(__LoopLeft != [-1, -1])
				{
					if(__AnimFrame > __LoopLeft[0] - 1){__AnimFrame = __LoopLeft[0] - 1;}
				}
				else
				{
					if(__AnimFrame > __LengthLeft){__AnimFrame = __LengthLeft;}
				}
				
				if(__AnimFrameCounter % __SpeedLeft == 0)
				{
					__AnimFrame--;
				}
			}
			else if(__animDirection == 1) //RIGHT
			{
				if(__LoopRight != [-1, -1])
				{
					if(__AnimFrame > __LoopRight[0] - 1){__AnimFrame = __LoopRight[0] - 1;}
				}
				else
				{
					if(__AnimFrame > __LengthRight){__AnimFrame = __LengthRight;}
				}
				if(__AnimFrameCounter % __SpeedRight == 0)
				{
					__AnimFrame--;
				}
			}
			__AnimFrameCounter++;
		}
	
		if(__AnimFrame == 0 || __NoMoveAnim) //IDLE
		{
			__animDirection = __enemyDirection;
			
			if(Obj_GetValueD(__animObj, "A_ATK", false) == true)
			{
				__AnimRects = __FramesAttack[__AnimFrameB];
				
				if(__AnimFrameCounterB % __SpeedAttack == 0)
				{
					__AnimFrameB++;
					if(__LoopAttack != [-1, -1])
					{
						if(__AnimFrameB > __LoopAttack[1])
						{
							__AnimFrameB = __LoopAttack[0];
						}
					}
					else
					{
						if(__AnimFrameB >= __LengthAttack)
						{
							__AnimFrameB = __LengthAttack;
						}
					}
				}
				ObjRender_SetScaleX(__animObj, 1);
			}
			else
			{
				__AnimRects = __FramesIdle[__AnimFrameB];
				
				if(__AnimFrameCounterB % __SpeedIdle == 0)
				{
					__AnimFrameB++;
					if(__AnimFrameB > __LengthIdle)
					{
						__AnimFrameB = 1;
					}
				}
			}
			
			__AnimFrame = 0;
			__AnimFrameCounter = 0;
			__AnimFrameCounterB++;
		}
		else
		{
			if(__animDirection == -1)
			{
				__AnimRects = __FramesLeft[__AnimFrame];
				if(__flipLeft){ObjRender_SetScaleX(__animObj, -1);}
				else{ObjRender_SetScaleX(__animObj, 1);}
			}
			else if(__animDirection == 1)
			{
				__AnimRects = __FramesRight[__AnimFrame];
				if(__flipRight){ObjRender_SetScaleX(__animObj, -1);}
				else{ObjRender_SetScaleX(__animObj, 1);}
			}
			
			__AnimFrameB = 1;
			__AnimFrameCounterB = 0;
		}
		
		ObjSprite2D_SetSourceRect(__animObj, __AnimRects[0], __AnimRects[1], __AnimRects[2], __AnimRects[3]);
		ObjSprite2D_SetDestCenter(__animObj);
		if(__MoveObj != -1)
		{
			ObjRender_SetPosition(__animObj, ObjMove_GetX(__MoveObj), ObjMove_GetY(__MoveObj), 0);
		}
		
		if(Obj_IsDeleted(__MoveObj) && __MoveObj != -1)
		{
			Obj_Delete(__animObj);
		}
		yield;
	}
}


// -=-=-=-=-=-=-=-=-=-=- old -=-=-=-=-=-=-=-=-=-=-

let useAtkAnim = 0;

let nitori_useCamo = false;

let byakuren_useLotus = false;
let byakuren_lotusEyeA = 0;
let byakuren_lotusEyeAngleA = 0;

let byakuren_lotusEyeB = 0;
let byakuren_lotusEyeAngleB = 0;

let byakuren_lotusEyeC = 0;
let byakuren_lotusEyeAngleC = 0;

let byakuren_lotusEyeD = 0;
let byakuren_lotusEyeAngleD = 0;

let yuyuko_UseFan = false;

let sukuna_UseTeaCup = false;
let sukuna_isBreakTeacup = false;

task ObjBoss_UseAttackAnimationA(n_obj)
{
	let l_animObj = Obj_GetValueD(n_obj, "A_OBJ", -1);
	Obj_SetValue(l_animObj, "A_ATK", true);
}

task AnimateTemplate(FPEnemy)
{
	let rowColArray =
	[
		[0, 0], //0
		[1, 0], //1
		[2, 0], //2
		[3, 0], //3
		
		[0, 1], //4
		[1, 1], //5
		[2, 1], //6
		[3, 1], //7
		
		[0, 2], //8
		[1, 2], //9
		[2, 2], //10
		[3, 2]  //11
	];
	
	let rowCol = rowColArray[0];
	
	let f = 0;
	let f2 = 0;
	let f3 = 0;
	let f4 = 0;
	let frame = 0;
	let movecos = 0;
	let moved = 0;
	
	let x_min = 0;
	let y_min = 0;
	let x_max = 64;
	let y_max = 64;
	
	let offsetX = 64;
	let offsetY = 64;
	
	let spriteRow = 0;
	let spriteCol = 0;
	
	let fpsA = 8;
	let fpsB = 4;
	
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(obj, img_enm_sanae);
	Obj_SetRenderPriority(obj, 0.41);
	ObjSprite2D_SetSourceRect(obj, x_min, y_min, x_max, y_max);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetScaleXYZ(obj, 1, 1, 1);
	
	while(!Obj_IsDeleted(FPEnemy))
	{
		if(ObjMove_GetSpeed(FPEnemy) == 0)
		{
			if(moved == 1) //Reverse move anim to idle
			{
				if(f3 >= 0 && f3 < 1*fpsB)     {rowCol = rowColArray[7];}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){rowCol = rowColArray[6];}
				if(f3 >= 2*fpsB && f3 < 3*fpsB){rowCol = rowColArray[5];}
				if(f3 >= 3*fpsB && f3 < 4*fpsB){rowCol = rowColArray[4];}
				if(f3 == 4*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 2) //Reverse move anim to idle
			{
				if(f3 >= 0*fpsB && f3 < 1*fpsB){rowCol = rowColArray[7];}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){rowCol = rowColArray[6];}
				if(f3 >= 2*fpsB && f3 < 3*fpsB){rowCol = rowColArray[5];}
				if(f3 >= 3*fpsB && f3 < 4*fpsB){rowCol = rowColArray[4];}
				if(f3 == 4*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 0) //Idle animation loops
			{
				if(useAtkAnim == 1) //Idle attack anim
				{
					ObjRender_SetScaleXYZ(obj, 1, 1, 1);
					if(f >= 0*fpsA && f < 1*fpsA){rowCol = rowColArray[8];}
					if(f >= 1*fpsA && f < 2*fpsA){rowCol = rowColArray[9];}
					if(f >= 2*fpsA && f < 3*fpsA){rowCol = rowColArray[10];}
					if(f >= 3*fpsA && f < 4*fpsA){rowCol = rowColArray[11];}
					if(f >= 4*fpsA){f = 0;}
					f++;
				}
				else //Idle
				{
					ObjRender_SetScaleXYZ(obj, 1, 1, 1);
					if(f >= 0 && f < 1*fpsA)     {rowCol = rowColArray[0];}
					if(f >= 1*fpsA && f < 2*fpsA){rowCol = rowColArray[1];}
					if(f >= 2*fpsA && f < 3*fpsA){rowCol = rowColArray[2];}
					if(f >= 3*fpsA && f < 4*fpsA){rowCol = rowColArray[3];}
					if(f >= 4*fpsA){f = 0;}
					f++;
				}
				f2 = 0;
				f3 = 0;
				f4++;
				movecos = cos(f4*2)*7;
			}
		}
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) > 0) //Moving right
		{
			ObjRender_SetScaleXYZ(obj, 1, 1, 1);
			if(f2 >= 0 && f2 < 1*fpsB)     {rowCol = rowColArray[4];}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){rowCol = rowColArray[5];}
			if(f2 >= 2*fpsB && f2 < 3*fpsB){rowCol = rowColArray[6];}
			if(f2 >= 3*fpsB && f2 < 4*fpsB){rowCol = rowColArray[7];}
			f = 0;
			f2++;
			f3 = 0;
			moved = 1;
			f4 = 0;
			movecos = cos(f4*2)*7;
		}
		
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) < 0) //Moving left
		{
			ObjRender_SetScaleXYZ(obj, -1, 1, 1);
			if(f2 >= 0 && f2 < 1*fpsB)     {rowCol = rowColArray[4];}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){rowCol = rowColArray[5];}
			if(f2 >= 2*fpsB && f2 < 3*fpsB){rowCol = rowColArray[6];}
			if(f2 >= 3*fpsB && f2 < 4*fpsB){rowCol = rowColArray[7];}
			f = 0;
			f2++;
			f3 = 0;
			moved = 2;
			f4 = 0;
			movecos = cos(f4*2)*7;
		}
		ObjRender_SetPosition(obj,round(ObjMove_GetX(FPEnemy)),round(ObjMove_GetY(FPEnemy) + movecos),1);
		ObjSprite2D_SetSourceRect(obj, x_min + offsetX*rowCol[0], y_min + offsetY*rowCol[1], x_max + offsetX*rowCol[0], y_max + offsetY*rowCol[1]);
		yield;
	}
	Obj_Delete(obj);
}


task AnimateShizuha(FPEnemy)
{
	let rowColArray =
	[
		[0, 0], //0
		[1, 0], //1
		[2, 0], //2
		[3, 0], //3
		
		[0, 1], //4
		[1, 1], //5
		[2, 1], //6
		[3, 1]  //7
	];
	
	let rowCol = rowColArray[0];
	
	let f = 0;
	let f2 = 0;
	let f3 = 0;
	let f4 = 0;
	let frame = 0;
	let movecos = 0;
	let moved = 0;
	
	let x_min = 0;
	let y_min = 0;
	let x_max = 64;
	let y_max = 64;
	
	let offsetX = 64;
	let offsetY = 64;
	
	let spriteRow = 0;
	let spriteCol = 0;
	
	let fpsA = 8;
	let fpsB = 3;
	
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(obj, img_enm_aki);
	Obj_SetRenderPriority(obj, 0.41);
	ObjSprite2D_SetSourceRect(obj, x_min, y_min, x_max, y_max);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetScaleXYZ(obj, 1, 1, 1);
	
	while(!Obj_IsDeleted(FPEnemy))
	{
		if(ObjMove_GetSpeed(FPEnemy) == 0)
		{
			if(moved == 1) //Reverse move anim to idle
			{
				if(f3 >= 0 && f3 < 1*fpsB)     {rowCol = rowColArray[7];}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){rowCol = rowColArray[6];}
				if(f3 >= 2*fpsB && f3 < 3*fpsB){rowCol = rowColArray[5];}
				if(f3 >= 3*fpsB && f3 < 4*fpsB){rowCol = rowColArray[4];}
				if(f3 == 4*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 2) //Reverse move anim to idle
			{
				if(f3 >= 0*fpsB && f3 < 1*fpsB){rowCol = rowColArray[7];}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){rowCol = rowColArray[6];}
				if(f3 >= 2*fpsB && f3 < 3*fpsB){rowCol = rowColArray[5];}
				if(f3 >= 3*fpsB && f3 < 4*fpsB){rowCol = rowColArray[4];}
				if(f3 == 4*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 0) //Idle animation loops
			{
				//ObjRender_SetScaleXYZ(obj, 1, 1, 1);
				if(f >= 0 && f < 1*fpsA)     {rowCol = rowColArray[0];}
				if(f >= 1*fpsA && f < 2*fpsA){rowCol = rowColArray[1];}
				if(f >= 2*fpsA && f < 3*fpsA){rowCol = rowColArray[2];}
				if(f >= 3*fpsA && f < 4*fpsA){rowCol = rowColArray[3];}
				if(f >= 4*fpsA && f < 5*fpsA){rowCol = rowColArray[2];}
				if(f >= 5*fpsA && f < 6*fpsA){rowCol = rowColArray[1];}
				if(f >= 6*fpsA){f = 0;}
				f++;
				f2 = 0;
				f3 = 0;
				f4++;
				movecos = cos(f4*2)*7;
			}
		}
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) > 0) //Moving right
		{
			ObjRender_SetScaleXYZ(obj, 1, 1, 1);
			if(f2 >= 0 && f2 < 1*fpsB)     {rowCol = rowColArray[4];}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){rowCol = rowColArray[5];}
			if(f2 >= 2*fpsB && f2 < 3*fpsB){rowCol = rowColArray[6];}
			if(f2 >= 3*fpsB && f2 < 4*fpsB){rowCol = rowColArray[7];}
			f = 0;
			f2++;
			f3 = 0;
			moved = 1;
			f4 = 0;
			movecos = cos(f4*2)*7;
		}
		
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) < 0) //Moving left
		{
			ObjRender_SetScaleXYZ(obj, -1, 1, 1);
			if(f2 >= 0 && f2 < 1*fpsB)     {rowCol = rowColArray[4];}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){rowCol = rowColArray[5];}
			if(f2 >= 2*fpsB && f2 < 3*fpsB){rowCol = rowColArray[6];}
			if(f2 >= 3*fpsB && f2 < 4*fpsB){rowCol = rowColArray[7];}
			f = 0;
			f2++;
			f3 = 0;
			moved = 2;
			f4 = 0;
			movecos = cos(f4*2)*7;
		}
		
		if(ObjRender_GetScaleZ(FPEnemy) == 1)
		{
			f2 = 0;
			ObjRender_SetScaleZ(FPEnemy, 0);
		}
		ObjRender_SetPosition(obj,round(ObjMove_GetX(FPEnemy)),round(ObjMove_GetY(FPEnemy) + movecos),1);
		ObjSprite2D_SetSourceRect(obj, x_min + offsetX*rowCol[0], y_min + offsetY*rowCol[1], x_max + offsetX*rowCol[0], y_max + offsetY*rowCol[1]);
		yield;
	}
	Obj_Delete(obj);
}

task AnimateMinoriko(FPEnemy)
{
	let rowColArray =
	[
		[0, 2], //0
		[1, 2], //1
		[2, 2], //2
		[3, 2], //3
		
		[0, 3], //4
		[1, 3], //5
		[2, 3], //6
		[3, 3]  //7
	];
	
	let rowCol = rowColArray[0];
	
	let f = 0;
	let f2 = 0;
	let f3 = 0;
	let f4 = 0;
	let frame = 0;
	let movecos = 0;
	let moved = 0;
	
	let x_min = 0;
	let y_min = 0;
	let x_max = 64;
	let y_max = 64;
	
	let offsetX = 64;
	let offsetY = 64;
	
	let spriteRow = 0;
	let spriteCol = 0;
	
	let fpsA = 8;
	let fpsB = 4;
	
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(obj, img_enm_aki);
	Obj_SetRenderPriority(obj, 0.41);
	ObjSprite2D_SetSourceRect(obj, x_min, y_min, x_max, y_max);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetScaleXYZ(obj, 1, 1, 1);
	
	while(!Obj_IsDeleted(FPEnemy))
	{
		if(ObjMove_GetSpeed(FPEnemy) == 0)
		{
			if(moved == 1) //Reverse move anim to idle
			{
				if(f3 >= 0 && f3 < 1*fpsB)     {rowCol = rowColArray[6];}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){rowCol = rowColArray[5];}
				if(f3 >= 2*fpsB && f3 < 3*fpsB){rowCol = rowColArray[4];}
				//if(f3 >= 3*fpsB && f3 < 4*fpsB){rowCol = rowColArray[4];}
				if(f3 == 3*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 2) //Reverse move anim to idle
			{
				if(f3 >= 0*fpsB && f3 < 1*fpsB){rowCol = rowColArray[6];}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){rowCol = rowColArray[5];}
				if(f3 >= 2*fpsB && f3 < 3*fpsB){rowCol = rowColArray[4];}
				//if(f3 >= 3*fpsB && f3 < 4*fpsB){rowCol = rowColArray[4];}
				if(f3 == 3*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 0) //Idle animation loops
			{
				if(useAtkAnim == 1) //Idle attack anim
				{
					ObjRender_SetScaleXYZ(obj, 1, 1, 1);
					if(f >= 0*fpsA && f < 1*fpsA){rowCol = rowColArray[2];}
					//if(f >= 1*fpsA && f < 2*fpsA){rowCol = rowColArray[5];}
					//if(f >= 2*fpsA && f < 3*fpsA){rowCol = rowColArray[6];}
					//if(f >= 3*fpsA && f < 4*fpsA){rowCol = rowColArray[7];}
					if(f >= 1*fpsA){f = 0;}
					movecos = cos(f4*2)*3;
					f++;
				}
				else //Idle
				{
					//ObjRender_SetScaleXYZ(obj, 1, 1, 1);
					if(f >= 0 && f < 1*fpsA)     {rowCol = rowColArray[0];}
					//if(f >= 1*fpsA && f < 2*fpsA){rowCol = rowColArray[1];}
					//if(f >= 2*fpsA && f < 3*fpsA){rowCol = rowColArray[2];}
					//if(f >= 3*fpsA && f < 4*fpsA){rowCol = rowColArray[3];}
					//if(f >= 4*fpsA && f < 5*fpsA){rowCol = rowColArray[2];}
					//if(f >= 5*fpsA && f < 6*fpsA){rowCol = rowColArray[1];}
					if(f >= 1*fpsA){f = 0;}
					movecos = cos(f4*2)*7;
					f++;
				}
				f2 = 0;
				f3 = 0;
				f4++;
				
			}
		}
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) > 0) //Moving right
		{
			ObjRender_SetScaleXYZ(obj, 1, 1, 1);
			if(f2 >= 0 && f2 < 1*fpsB)     {rowCol = rowColArray[4];}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){rowCol = rowColArray[5];}
			if(f2 >= 2*fpsB && f2 < 3*fpsB){rowCol = rowColArray[6];}
			//if(f2 >= 3*fpsB && f2 < 4*fpsB){rowCol = rowColArray[7];}
			f = 0;
			f2++;
			f3 = 0;
			moved = 1;
			f4 = 0;
			movecos = cos(f4*2)*7;
		}
		
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) < 0) //Moving left
		{
			ObjRender_SetScaleXYZ(obj, -1, 1, 1);
			if(f2 >= 0 && f2 < 1*fpsB)     {rowCol = rowColArray[4];}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){rowCol = rowColArray[5];}
			if(f2 >= 2*fpsB && f2 < 3*fpsB){rowCol = rowColArray[6];}
			//if(f2 >= 3*fpsB && f2 < 4*fpsB){rowCol = rowColArray[7];}
			f = 0;
			f2++;
			f3 = 0;
			moved = 2;
			f4 = 0;
			movecos = cos(f4*2)*7;
		}
		
		if(ObjRender_GetScaleZ(FPEnemy) == 1)
		{
			f2 = 0;
			ObjRender_SetScaleZ(FPEnemy, 0);
		}
		ObjRender_SetPosition(obj,round(ObjMove_GetX(FPEnemy)),round(ObjMove_GetY(FPEnemy) + movecos),1);
		ObjSprite2D_SetSourceRect(obj, x_min + offsetX*rowCol[0], y_min + offsetY*rowCol[1], x_max + offsetX*rowCol[0], y_max + offsetY*rowCol[1]);
		yield;
	}
	Obj_Delete(obj);
}

task AnimateHina(FPEnemy)
{
	let rowColArray =
	[
		[0, 0], //0
		[1, 0], //1
		[2, 0], //2
		[3, 0], //3
		
		[0, 1], //4
		[1, 1], //5
		[2, 1], //6
		[3, 1], //7
		
		[0, 2], //8
		[1, 2], //9
		[2, 2], //10
		[3, 2]  //11
	];
	
	let rowCol = rowColArray[0];
	
	let f = 0;
	let f2 = 0;
	let f3 = 0;
	let f4 = 0;
	let frame = 0;
	let movecos = 0;
	let moved = 0;
	
	let x_min = 0;
	let y_min = 0;
	let x_max = 64;
	let y_max = 64;
	
	let offsetX = 64;
	let offsetY = 64;
	
	let spriteRow = 0;
	let spriteCol = 0;
	
	let fpsA = 8;
	let fpsB = 3;
	
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(obj, img_enm_hina);
	Obj_SetRenderPriority(obj, 0.41);
	ObjSprite2D_SetSourceRect(obj, x_min, y_min, x_max, y_max);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetScaleXYZ(obj, 1, 1, 1);
	
	while(!Obj_IsDeleted(FPEnemy))
	{
		if(ObjMove_GetSpeed(FPEnemy) == 0)
		{
			if(moved == 1) //Reverse move anim to idle
			{
				if(f3 >= 0 && f3 < 1*fpsB)     {rowCol = rowColArray[7];}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){rowCol = rowColArray[6];}
				if(f3 >= 2*fpsB && f3 < 3*fpsB){rowCol = rowColArray[5];}
				if(f3 >= 3*fpsB && f3 < 4*fpsB){rowCol = rowColArray[4];}
				if(f3 == 4*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 2) //Reverse move anim to idle
			{
				if(f3 >= 0*fpsB && f3 < 1*fpsB){rowCol = rowColArray[7];}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){rowCol = rowColArray[6];}
				if(f3 >= 2*fpsB && f3 < 3*fpsB){rowCol = rowColArray[5];}
				if(f3 >= 3*fpsB && f3 < 4*fpsB){rowCol = rowColArray[4];}
				if(f3 == 4*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 0) //Idle animation loops
			{
				if(useAtkAnim == 1) //Idle attack anim
				{
					ObjRender_SetScaleXYZ(obj, 1, 1, 1);
					if(f >= 0*fpsA && f < 1*fpsA){rowCol = rowColArray[4];}
					if(f >= 1*fpsA && f < 2*fpsA){rowCol = rowColArray[5];}
					if(f >= 2*fpsA && f < 3*fpsA){rowCol = rowColArray[6];}
					if(f >= 3*fpsA && f < 4*fpsA){rowCol = rowColArray[7];}
					if(f >= 4*fpsA && f < 5*fpsA){rowCol = rowColArray[8];}
					if(f >= 5*fpsA && f < 6*fpsA){rowCol = rowColArray[9];}
					if(f >= 6*fpsA && f < 7*fpsA){rowCol = rowColArray[10];}
					if(f >= 7*fpsA && f < 8*fpsA){rowCol = rowColArray[11];}
					if(f >= 8*fpsA){f = 0;}
					f++;
				}
				else //Idle
				{
					//ObjRender_SetScaleXYZ(obj, 1, 1, 1);
					if(f >= 0 && f < 1*fpsA)     {rowCol = rowColArray[0];}
					if(f >= 1*fpsA && f < 2*fpsA){rowCol = rowColArray[1];}
					if(f >= 2*fpsA && f < 3*fpsA){rowCol = rowColArray[2];}
					if(f >= 3*fpsA && f < 4*fpsA){rowCol = rowColArray[3];}
					if(f >= 4*fpsA){f = 0;}
					f++;
				}
				f2 = 0;
				f3 = 0;
				f4++;
				movecos = cos(f4*2)*7;
			}
		}
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) > 0) //Moving right
		{
			ObjRender_SetScaleXYZ(obj, 1, 1, 1);
			if(f2 >= 0 && f2 < 1*fpsB)     {rowCol = rowColArray[4];}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){rowCol = rowColArray[5];}
			if(f2 >= 2*fpsB && f2 < 3*fpsB){rowCol = rowColArray[6];}
			if(f2 >= 3*fpsB && f2 < 4*fpsB){rowCol = rowColArray[7];}
			f = 0;
			f2++;
			f3 = 0;
			moved = 1;
			f4 = 0;
			movecos = cos(f4*2)*7;
		}
		
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) < 0) //Moving left
		{
			ObjRender_SetScaleXYZ(obj, -1, 1, 1);
			if(f2 >= 0 && f2 < 1*fpsB)     {rowCol = rowColArray[4];}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){rowCol = rowColArray[5];}
			if(f2 >= 2*fpsB && f2 < 3*fpsB){rowCol = rowColArray[6];}
			if(f2 >= 3*fpsB && f2 < 4*fpsB){rowCol = rowColArray[7];}
			f = 0;
			f2++;
			f3 = 0;
			moved = 2;
			f4 = 0;
			movecos = cos(f4*2)*7;
		}
		
		if(ObjRender_GetScaleZ(FPEnemy) == 1)
		{
			f2 = 0;
			ObjRender_SetScaleZ(FPEnemy, 0);
		}
		ObjRender_SetPosition(obj,round(ObjMove_GetX(FPEnemy)),round(ObjMove_GetY(FPEnemy) + movecos),1);
		ObjSprite2D_SetSourceRect(obj, x_min + offsetX*rowCol[0], y_min + offsetY*rowCol[1], x_max + offsetX*rowCol[0], y_max + offsetY*rowCol[1]);
		yield;
	}
	Obj_Delete(obj);
}

task AnimateNitori(FPEnemy)
{
	let rowColArray =
	[
		[0, 0], //0
		[1, 0], //1
		[2, 0], //2
		[3, 0], //3
		
		[0, 1], //4
		[1, 1], //5
		[2, 1], //6
		[3, 1]  //7
	];
	
	let rowCol = rowColArray[0];
	
	let f = 0;
	let f2 = 0;
	let f3 = 0;
	let f4 = 0;
	let frame = 0;
	let movecos = 0;
	let moved = 0;
	
	let x_min = 0;
	let y_min = 0;
	let x_max = 64;
	let y_max = 80;
	
	let offsetX = 64;
	let offsetY = 80;
	
	let spriteRow = 0;
	let spriteCol = 0;
	
	let fpsA = 8;
	let fpsB = 3;
	
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(obj, img_enm_nitori00);
	Obj_SetRenderPriority(obj, 0.41);
	ObjSprite2D_SetSourceRect(obj, x_min, y_min, x_max, y_max);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetScaleXYZ(obj, 1, 1, 1);
	
	while(!Obj_IsDeleted(FPEnemy))
	{
		if(nitori_useCamo)
		{
			ObjRender_SetAlpha(obj, 150);
			ObjPrim_SetTexture(obj, img_enm_nitori01);
		}
		else
		{
			ObjRender_SetAlpha(obj, 255);
			ObjPrim_SetTexture(obj, img_enm_nitori00);
		}
		if(ObjMove_GetSpeed(FPEnemy) == 0)
		{
			if(moved == 1) //Reverse move anim to idle
			{
				if(f3 >= 0 && f3 < 1*fpsB)     {rowCol = rowColArray[7];}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){rowCol = rowColArray[6];}
				if(f3 >= 2*fpsB && f3 < 3*fpsB){rowCol = rowColArray[5];}
				if(f3 >= 3*fpsB && f3 < 4*fpsB){rowCol = rowColArray[4];}
				if(f3 == 4*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 2) //Reverse move anim to idle
			{
				if(f3 >= 0*fpsB && f3 < 1*fpsB){rowCol = rowColArray[7];}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){rowCol = rowColArray[6];}
				if(f3 >= 2*fpsB && f3 < 3*fpsB){rowCol = rowColArray[5];}
				if(f3 >= 3*fpsB && f3 < 4*fpsB){rowCol = rowColArray[4];}
				if(f3 == 4*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 0) //Idle animation loops
			{
				if(f >= 0 && f < 1*fpsA)     {rowCol = rowColArray[0];}
				if(f >= 1*fpsA && f < 2*fpsA){rowCol = rowColArray[1];}
				if(f >= 2*fpsA && f < 3*fpsA){rowCol = rowColArray[2];}
				if(f >= 3*fpsA && f < 4*fpsA){rowCol = rowColArray[3];}
				if(f >= 4*fpsA){f = 0;}
				f++;
				f2 = 0;
				f3 = 0;
				f4++;
				movecos = cos(f4*2)*7;
			}
		}
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) > 0) //Moving right
		{
			ObjRender_SetScaleXYZ(obj, 1, 1, 1);
			if(f2 >= 0 && f2 < 1*fpsB)     {rowCol = rowColArray[4];}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){rowCol = rowColArray[5];}
			if(f2 >= 2*fpsB && f2 < 3*fpsB){rowCol = rowColArray[6];}
			if(f2 >= 3*fpsB && f2 < 4*fpsB){rowCol = rowColArray[7];}
			f = 0;
			f2++;
			f3 = 0;
			moved = 1;
			f4 = 0;
			movecos = cos(f4*2)*7;
		}
		
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) < 0) //Moving left
		{
			ObjRender_SetScaleXYZ(obj, -1, 1, 1);
			if(f2 >= 0 && f2 < 1*fpsB)     {rowCol = rowColArray[4];}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){rowCol = rowColArray[5];}
			if(f2 >= 2*fpsB && f2 < 3*fpsB){rowCol = rowColArray[6];}
			if(f2 >= 3*fpsB && f2 < 4*fpsB){rowCol = rowColArray[7];}
			f = 0;
			f2++;
			f3 = 0;
			moved = 2;
			f4 = 0;
			movecos = cos(f4*2)*7;
		}
		
		if(ObjRender_GetScaleZ(FPEnemy) == 1)
		{
			f2 = 0;
			ObjRender_SetScaleZ(FPEnemy, 0);
		}
		ObjRender_SetPosition(obj,round(ObjMove_GetX(FPEnemy)),round(ObjMove_GetY(FPEnemy) + movecos),1);
		ObjSprite2D_SetSourceRect(obj, x_min + offsetX*rowCol[0], y_min + offsetY*rowCol[1], x_max + offsetX*rowCol[0], y_max + offsetY*rowCol[1]);
		yield;
	}
	Obj_Delete(obj);
}

task AnimateAya(FPEnemy)
{
	let f = 0;
	let f2 = 0;
	let f3 = 0;
	let f4 = 0;
	let frame = 0;
	let movecos = 0;
	let moved = 0;
	
	let x_min = 0;
	let y_min = 0;
	let x_max = 64;
	let y_max = 64;
	
	let offsetX = 64;
	let offsetY = 64;
	
	let spriteRow = 0;
	let spriteCol = 0;
	
	let fpsA = 8;
	let fpsB = 4;
	
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(obj, img_enm_aya);
	Obj_SetRenderPriority(obj, 0.41);
	ObjSprite2D_SetSourceRect(obj, x_min, y_min, x_max, y_max);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetScaleXYZ(obj, 1, 1, 1);
	
	while(!Obj_IsDeleted(FPEnemy))
	{
		if(ObjMove_GetSpeed(FPEnemy) == 0)
		{
			if(moved == 1)
			{
				if(f3 >= 0 && f3 < 1*fpsB){spriteCol = 3; spriteRow = 1;}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){spriteCol = 2; spriteRow = 1;}
				if(f3 >= 2*fpsB && f3 < 3*fpsB){spriteCol = 1; spriteRow = 1;}
				if(f3 >= 3*fpsB && f3 < 4*fpsB){spriteCol = 0; spriteRow = 1;}
				if(f3 == 4*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 2)
			{
				if(f3 >= 0*fpsB && f3 < 1*fpsB){spriteCol = 3; spriteRow = 1;}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){spriteCol = 2; spriteRow = 1;}
				if(f3 >= 2*fpsB && f3 < 3*fpsB){spriteCol = 1; spriteRow = 1;}
				if(f3 >= 3*fpsB && f3 < 4*fpsB){spriteCol = 0; spriteRow = 1;}
				if(f3 == 4*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 0)
			{
				if(useAtkAnim == 1)
				{
					ObjRender_SetScaleXYZ(obj, 1, 1, 1);
					if(f >= 0*fpsA && f < 1*fpsA){spriteCol = 0; spriteRow = 2;}
					if(f >= 1*fpsA && f < 2*fpsA){spriteCol = 1; spriteRow = 2;}
					if(f >= 2*fpsA && f < 3*fpsA){spriteCol = 2; spriteRow = 2;}
					if(f >= 3*fpsA && f < 4*fpsA){spriteCol = 3; spriteRow = 2;}
					if(f >= 4*fpsA){f = 0;}
					f++;
				}
				else
				{
					//ObjRender_SetScaleXYZ(obj, 1, 1, 1);
					if(f >= 0 && f < 1*fpsA){spriteCol = 0; spriteRow = 0;}
					if(f >= 1*fpsA && f < 2*fpsA){spriteCol = 1; spriteRow = 0;}
					if(f >= 2*fpsA && f < 3*fpsA){spriteCol = 2; spriteRow = 0;}
					if(f >= 3*fpsA && f < 4*fpsA){spriteCol = 3; spriteRow = 0;}
					if(f >= 4*fpsA){f = 0;}
					f++;
				}
				f2 = 0;
				f3 = 0;
				f4++;
				movecos = cos(f4*2)*7;
			}
		}
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) > 0)
		{
			ObjRender_SetScaleXYZ(obj, -1, 1, 1);
			if(f2 >= 0 && f2 < 1*fpsB){spriteCol = 0; spriteRow = 1;}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){spriteCol = 1; spriteRow = 1;}
			if(f2 >= 2*fpsB && f2 < 3*fpsB){spriteCol = 2; spriteRow = 1;}
			if(f2 >= 3*fpsB && f2 < 4*fpsB){spriteCol = 3; spriteRow = 1;}
			f = 0;
			f2++;
			f3 = 0;
			moved = 1;
			f4 = 0;
			movecos = cos(f4*2)*7;
		}
		
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) < 0)
		{
			ObjRender_SetScaleXYZ(obj, 1, 1, 1);
			if(f2 >= 0 && f2 < 1*fpsB){spriteCol = 0; spriteRow = 1;}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){spriteCol = 1; spriteRow = 1;}
			if(f2 >= 2*fpsB && f2 < 3*fpsB){spriteCol = 2; spriteRow = 1;}
			if(f2 >= 3*fpsB && f2 < 4*fpsB){spriteCol = 3; spriteRow = 1;}
			f = 0;
			f2++;
			f3 = 0;
			moved = 2;
			f4 = 0;
			movecos = cos(f4*2)*7;
		}
		ObjRender_SetPosition(obj,round(ObjMove_GetX(FPEnemy)),round(ObjMove_GetY(FPEnemy) + movecos),1);
		ObjSprite2D_SetSourceRect(obj, x_min + offsetX*spriteCol, y_min + offsetY*spriteRow, x_max + offsetX*spriteCol, y_max + offsetY*spriteRow);
		yield;
	}
	Obj_Delete(obj);
}

task AnimateSanae(FPEnemy)
{
	let rowColArray =
	[
		[0, 0], //0
		[1, 0], //1
		[2, 0], //2
		[3, 0], //3
		
		[0, 1], //4
		[1, 1], //5
		[2, 1], //6
		[3, 1], //7
		
		[0, 2], //8
		[1, 2], //9
		[2, 2], //10
		[3, 2]  //11
	];
	
	let frames_idle = [[], []];
	let frames_move = [];
	let frames_atk = [];
	
	let rectOverride = false;
	
	let rowCol = rowColArray[0];
	
	let f = 0;
	let f2 = 0;
	let f3 = 0;
	let f4 = 0;
	let f5 = 0;
	let frame = 0;
	let movecos = 0;
	let moved = 0;
	
	let x_min = 0;
	let y_min = 0;
	let x_max = 64;
	let y_max = 64;
	
	let offsetX = 64;
	let offsetY = 64;
	
	let spriteRow = 0;
	let spriteCol = 0;
	
	let fpsA = 8;
	let fpsB = 4;
	
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(obj, img_enm_sanae);
	Obj_SetRenderPriority(obj, 0.41);
	ObjSprite2D_SetSourceRect(obj, x_min, y_min, x_max, y_max);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetScaleXYZ(obj, 1, 1, 1);
	
	while(!Obj_IsDeleted(FPEnemy))
	{
		rectOverride = false;
		if(ObjMove_GetSpeed(FPEnemy) == 0)
		{
			if(moved == 1) //Reverse move anim to idle
			{
				if(f3 >= 0 && f3 < 1*fpsB)     {rowCol = rowColArray[7];}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){rowCol = rowColArray[6];}
				if(f3 >= 2*fpsB && f3 < 3*fpsB){rowCol = rowColArray[5];}
				if(f3 >= 3*fpsB && f3 < 4*fpsB){rowCol = rowColArray[4];}
				if(f3 == 4*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 2) //Reverse move anim to idle
			{
				if(f3 >= 0*fpsB && f3 < 1*fpsB){rowCol = rowColArray[7];}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){rowCol = rowColArray[6];}
				if(f3 >= 2*fpsB && f3 < 3*fpsB){rowCol = rowColArray[5];}
				if(f3 >= 3*fpsB && f3 < 4*fpsB){rowCol = rowColArray[4];}
				if(f3 == 4*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 0) //Idle animation loops
			{
				if(useAtkAnim == 1) //Idle attack anim
				{
					rectOverride = true;
					ObjRender_SetScaleXYZ(obj, 1, 1, 1);
					if(f5 >= 0*fpsA && f5 < 1*fpsA){ObjSprite2D_SetSourceRect(obj, 0, 128, 64, 224);}
					if(f5 >= 1*fpsA && f5 < 2*fpsA){ObjSprite2D_SetSourceRect(obj, 64, 128, 128, 224);}
					if(f5 >= 2*fpsA && f5 < 3*fpsA){ObjSprite2D_SetSourceRect(obj, 128, 128, 192, 224);}
					//if(f >= 3*fpsA && f < 4*fpsA){}
					//if(f >= 4*fpsA){f = 0;}
					f4 = 0;
					f5++;
				}
				else //Idle
				{
					ObjRender_SetScaleXYZ(obj, 1, 1, 1);
					if(f >= 0 && f < 1*fpsA)     {rowCol = rowColArray[0];}
					if(f >= 1*fpsA && f < 2*fpsA){rowCol = rowColArray[1];}
					if(f >= 2*fpsA && f < 3*fpsA){rowCol = rowColArray[2];}
					if(f >= 3*fpsA && f < 4*fpsA){rowCol = rowColArray[3];}
					if(f >= 4*fpsA){f = 0;}
					f++;
					f4++;
				}
				f2 = 0;
				f3 = 0;
				
				movecos = cos(f4*2)*7;
			}
		}
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) > 0) //Moving right
		{
			ObjRender_SetScaleXYZ(obj, 1, 1, 1);
			if(f2 >= 0 && f2 < 1*fpsB)     {rowCol = rowColArray[4];}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){rowCol = rowColArray[5];}
			if(f2 >= 2*fpsB && f2 < 3*fpsB){rowCol = rowColArray[6];}
			if(f2 >= 3*fpsB && f2 < 4*fpsB){rowCol = rowColArray[7];}
			f = 0;
			f2++;
			f3 = 0;
			moved = 1;
			f4 = 0;
			f5 = 0;
			movecos = cos(f4*2)*7;
		}
		
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) < 0) //Moving left
		{
			ObjRender_SetScaleXYZ(obj, -1, 1, 1);
			if(f2 >= 0 && f2 < 1*fpsB)     {rowCol = rowColArray[4];}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){rowCol = rowColArray[5];}
			if(f2 >= 2*fpsB && f2 < 3*fpsB){rowCol = rowColArray[6];}
			if(f2 >= 3*fpsB && f2 < 4*fpsB){rowCol = rowColArray[7];}
			f = 0;
			f2++;
			f3 = 0;
			moved = 2;
			f4 = 0;
			f5 = 0;
			movecos = cos(f4*2)*7;
		}
		ObjRender_SetPosition(obj,round(ObjMove_GetX(FPEnemy)),round(ObjMove_GetY(FPEnemy) + movecos),1);
		if(!rectOverride)
		{
			ObjSprite2D_SetSourceRect(obj, x_min + offsetX*rowCol[0], y_min + offsetY*rowCol[1], x_max + offsetX*rowCol[0], y_max + offsetY*rowCol[1]);
		}
		ObjSprite2D_SetDestCenter(obj);
		yield;
	}
	Obj_Delete(obj);
}

task AnimateKanako(FPEnemy)
{
	let rowColArray =
	[
		[0, 0], //0
		[1, 0], //1
		[2, 0], //2
		[3, 0], //3
		
		[0, 1], //4
		[1, 1], //5
		[2, 1], //6
		[3, 1], //7
		
		[0, 2], //8
		[1, 2], //9
		[2, 2], //10
		[3, 2], //11
		
		[0, 3], //12
		[1, 3], //13
		[2, 3], //14
		[3, 3]  //15
	];
	
	let rowCol = rowColArray[0];
	
	let f = 0;
	let f2 = 0;
	let f3 = 0;
	let f4 = 0;
	let frame = 0;
	let movecos = 0;
	let moved = 0;
	
	let x_min = 0;
	let y_min = 0;
	let x_max = 64;
	let y_max = 64;
	
	let offsetX = 64;
	let offsetY = 64;
	
	let spriteRow = 0;
	let spriteCol = 0;
	
	let fpsA = 8;
	let fpsB = 3;
	let fpsC = 5;
	
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(obj, img_enm_kanako00);
	Obj_SetRenderPriority(obj, 0.41);
	ObjSprite2D_SetSourceRect(obj, x_min, y_min, x_max, y_max);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetScaleXYZ(obj, 1, 1, 1);
	
	while(!Obj_IsDeleted(FPEnemy))
	{
		if(ObjMove_GetSpeed(FPEnemy) == 0)
		{
			if(moved == 1) //Reverse move anim to idle
			{
				if(f3 >= 0 && f3 < 1*fpsB)     {rowCol = rowColArray[6];}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){rowCol = rowColArray[5];}
				if(f3 >= 2*fpsB && f3 < 3*fpsB){rowCol = rowColArray[4];}
				//if(f3 >= 3*fpsB && f3 < 4*fpsB){rowCol = rowColArray[4];}
				if(f3 == 3*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 2) //Reverse move anim to idle
			{
				if(f3 >= 0*fpsB && f3 < 1*fpsB){rowCol = rowColArray[6];}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){rowCol = rowColArray[5];}
				if(f3 >= 2*fpsB && f3 < 3*fpsB){rowCol = rowColArray[4];}
				//if(f3 >= 3*fpsB && f3 < 4*fpsB){rowCol = rowColArray[4];}
				if(f3 == 3*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 0) //Idle animation loops
			{
				if(useAtkAnim == 1) //Idle attack anim
				{
					//ObjRender_SetScaleXYZ(obj, 1, 1, 1);
					if(f >= 0*fpsC && f < 1*fpsC){rowCol = rowColArray[8];}
					if(f >= 1*fpsC && f < 2*fpsC){rowCol = rowColArray[9];}
					if(f >= 2*fpsC && f < 3*fpsC){rowCol = rowColArray[10];}
					if(f >= 3*fpsC && f < 4*fpsC){rowCol = rowColArray[11];}
					
					if(f >= 4*fpsC && f < 5*fpsC){rowCol = rowColArray[12];}
					if(f >= 5*fpsC && f < 6*fpsC){rowCol = rowColArray[13];}
					if(f >= 6*fpsC && f < 7*fpsC){rowCol = rowColArray[14];}
					if(f >= 7*fpsC && f < 8*fpsC){rowCol = rowColArray[15];}
					if(f >= 8*fpsC){f = 4*fpsC;}
					f++;
				}
				else if(useAtkAnim == 2) //alternate Idle attack anim
				{
					ObjRender_SetScaleXYZ(obj, 1, 1, 1);
					if(f >= 0*fpsA && f < 1*fpsA){rowCol = rowColArray[8];}
					if(f >= 1*fpsA && f < 2*fpsA){rowCol = rowColArray[9];}
					if(f >= 2*fpsA && f < 3*fpsA){rowCol = rowColArray[10];}
					if(f >= 3*fpsA && f < 4*fpsA){rowCol = rowColArray[11];}
					if(f >= 4*fpsA){f = 3;}
					f++;
				}
				else //Idle
				{
					//ObjRender_SetScaleXYZ(obj, 1, 1, 1);
					if(f >= 0 && f < 1*fpsA)     {rowCol = rowColArray[0];}
					if(f >= 1*fpsA && f < 2*fpsA){rowCol = rowColArray[1];}
					if(f >= 2*fpsA && f < 3*fpsA){rowCol = rowColArray[2];}
					if(f >= 3*fpsA && f < 4*fpsA){rowCol = rowColArray[3];}
					if(f >= 4*fpsA){f = 0;}
					f++;
				}
				f2 = 0;
				f3 = 0;
				f4++;
				movecos = cos(f4*2)*7;
			}
		}
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) > 0) //Moving right
		{
			ObjRender_SetScaleXYZ(obj, 1, 1, 1);
			if(f2 >= 0 && f2 < 1*fpsB)     {rowCol = rowColArray[4];}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){rowCol = rowColArray[5];}
			if(f2 >= 2*fpsB && f2 < 3*fpsB){rowCol = rowColArray[6];}
			//if(f2 >= 3*fpsB && f2 < 4*fpsB){rowCol = rowColArray[7];}
			f = 0;
			f2++;
			f3 = 0;
			moved = 1;
			f4 = 0;
			movecos = cos(f4*2)*7;
		}
		
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) < 0) //Moving left
		{
			ObjRender_SetScaleXYZ(obj, -1, 1, 1);
			if(f2 >= 0 && f2 < 1*fpsB)     {rowCol = rowColArray[4];}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){rowCol = rowColArray[5];}
			if(f2 >= 2*fpsB && f2 < 3*fpsB){rowCol = rowColArray[6];}
			//if(f2 >= 3*fpsB && f2 < 4*fpsB){rowCol = rowColArray[7];}
			f = 0;
			f2++;
			f3 = 0;
			moved = 2;
			f4 = 0;
			movecos = cos(f4*2)*7;
		}
		
		if(ObjRender_GetScaleZ(FPEnemy) == 1)
		{
			f2 = 0;
			ObjRender_SetScaleZ(FPEnemy, 0);
		}
		ObjRender_SetPosition(obj,round(ObjMove_GetX(FPEnemy)),round(ObjMove_GetY(FPEnemy) + movecos),1);
		ObjSprite2D_SetSourceRect(obj, x_min + offsetX*rowCol[0], y_min + offsetY*rowCol[1], x_max + offsetX*rowCol[0], y_max + offsetY*rowCol[1]);
		yield;
	}
	Obj_Delete(obj);
}

task AnimateSuwako(FPEnemy)
{
	let rowColArray =
	[
		[0, 0], //0
		[1, 0], //1
		[2, 0], //2
		[3, 0], //3
		
		[0, 1], //4
		[1, 1], //5
		[2, 1], //6
		[3, 1], //7
		
		[0, 2], //8
		[1, 2], //9
		[2, 2], //10
		[3, 2], //11
		
		[0, 3], //12
		[1, 3], //13
		[2, 3], //14
		[3, 3]  //15
	];
	
	let rowCol = rowColArray[0];
	
	let f = 0;
	let f2 = 0;
	let f3 = 0;
	let f4 = 0;
	let frame = 0;
	let movecos = 0;
	let moved = 0;
	
	let x_min = 0;
	let y_min = 0;
	let x_max = 64;
	let y_max = 64;
	
	let offsetX = 64;
	let offsetY = 64;
	
	let spriteRow = 0;
	let spriteCol = 0;
	
	let fpsA = 8;
	let fpsB = 3;
	let fpsC = 5;
	
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(obj, img_enm_suwako00);
	Obj_SetRenderPriority(obj, 0.41);
	ObjSprite2D_SetSourceRect(obj, x_min, y_min, x_max, y_max);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetScaleXYZ(obj, 1, 1, 1);
	
	while(!Obj_IsDeleted(FPEnemy))
	{
		if(ObjMove_GetSpeed(FPEnemy) == 0)
		{
			if(moved == 1) //Reverse move anim to idle
			{
				if(f3 >= 0 && f3 < 1*fpsB)     {rowCol = rowColArray[7];}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){rowCol = rowColArray[6];}
				if(f3 >= 2*fpsB && f3 < 3*fpsB){rowCol = rowColArray[5];}
				if(f3 >= 3*fpsB && f3 < 4*fpsB){rowCol = rowColArray[4];}
				if(f3 == 3*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 2) //Reverse move anim to idle
			{
				if(f3 >= 0*fpsB && f3 < 1*fpsB){rowCol = rowColArray[7];}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){rowCol = rowColArray[6];}
				if(f3 >= 2*fpsB && f3 < 3*fpsB){rowCol = rowColArray[5];}
				if(f3 >= 3*fpsB && f3 < 4*fpsB){rowCol = rowColArray[4];}
				if(f3 == 3*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 0) //Idle animation loops
			{
				if(useAtkAnim == 1) //Idle attack anim
				{
					//ObjRender_SetScaleXYZ(obj, 1, 1, 1);
					if(f >= 0*fpsC && f < 1*fpsC){rowCol = rowColArray[8];}
					if(f >= 1*fpsC && f < 2*fpsC){rowCol = rowColArray[9];}
					if(f >= 2*fpsC && f < 3*fpsC){rowCol = rowColArray[10];}
					if(f >= 3*fpsC && f < 4*fpsC){rowCol = rowColArray[11];}
					
					if(f >= 4*fpsC && f < 5*fpsC){rowCol = rowColArray[12];}
					if(f >= 5*fpsC && f < 6*fpsC){rowCol = rowColArray[13];}
					if(f >= 6*fpsC && f < 7*fpsC){rowCol = rowColArray[14];}
					if(f >= 7*fpsC && f < 8*fpsC){rowCol = rowColArray[15];}
					if(f >= 8*fpsC){f = 4*fpsC;}
					f++;
				}
				else if(useAtkAnim == 2) //alternate Idle attack anim
				{
					ObjRender_SetScaleXYZ(obj, 1, 1, 1);
					if(f >= 0*fpsA && f < 1*fpsA){rowCol = rowColArray[8];}
					if(f >= 1*fpsA && f < 2*fpsA){rowCol = rowColArray[9];}
					if(f >= 2*fpsA && f < 3*fpsA){rowCol = rowColArray[10];}
					if(f >= 3*fpsA && f < 4*fpsA){rowCol = rowColArray[11];}
					if(f >= 4*fpsA){f = 3;}
					f++;
				}
				else //Idle
				{
					//ObjRender_SetScaleXYZ(obj, 1, 1, 1);
					if(f >= 0 && f < 1*fpsA)     {rowCol = rowColArray[0];}
					if(f >= 1*fpsA && f < 2*fpsA){rowCol = rowColArray[1];}
					if(f >= 2*fpsA && f < 3*fpsA){rowCol = rowColArray[2];}
					if(f >= 3*fpsA && f < 4*fpsA){rowCol = rowColArray[3];}
					if(f >= 4*fpsA){f = 0;}
					f++;
				}
				f2 = 0;
				f3 = 0;
				f4++;
				movecos = cos(f4*2)*7;
			}
		}
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) > 0) //Moving right
		{
			ObjRender_SetScaleXYZ(obj, 1, 1, 1);
			if(f2 >= 0 && f2 < 1*fpsB)     {rowCol = rowColArray[4];}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){rowCol = rowColArray[5];}
			if(f2 >= 2*fpsB && f2 < 3*fpsB){rowCol = rowColArray[6];}
			if(f2 >= 3*fpsB && f2 < 4*fpsB){rowCol = rowColArray[7];}
			f = 0;
			f2++;
			f3 = 0;
			moved = 1;
			f4 = 0;
			movecos = cos(f4*2)*7;
		}
		
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) < 0) //Moving left
		{
			ObjRender_SetScaleXYZ(obj, -1, 1, 1);
			if(f2 >= 0 && f2 < 1*fpsB)     {rowCol = rowColArray[4];}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){rowCol = rowColArray[5];}
			if(f2 >= 2*fpsB && f2 < 3*fpsB){rowCol = rowColArray[6];}
			if(f2 >= 3*fpsB && f2 < 4*fpsB){rowCol = rowColArray[7];}
			f = 0;
			f2++;
			f3 = 0;
			moved = 2;
			f4 = 0;
			movecos = cos(f4*2)*7;
		}
		
		if(ObjRender_GetScaleZ(FPEnemy) == 1)
		{
			f2 = 0;
			ObjRender_SetScaleZ(FPEnemy, 0);
		}
		ObjRender_SetPosition(obj,round(ObjMove_GetX(FPEnemy)),round(ObjMove_GetY(FPEnemy) + movecos),1);
		ObjSprite2D_SetSourceRect(obj, x_min + offsetX*rowCol[0], y_min + offsetY*rowCol[1], x_max + offsetX*rowCol[0], y_max + offsetY*rowCol[1]);
		yield;
	}
	Obj_Delete(obj);
}


task AnimateKisume_old(FPEnemy)
{
	let rowColArray =
	[
		[0, 0], //0
		[1, 0], //1
		[2, 0], //2
		[3, 0], //3
		
		[0, 1], //4
		[1, 1], //5
		[2, 1], //6
		[3, 1]  //7
	];
	
	let rowCol = rowColArray[0];
	
	let f = 0;
	let f2 = 0;
	let f3 = 0;
	let f4 = 0;
	let frame = 0;
	let movecos = 0;
	let moved = 0;
	
	let x_min = 0;
	let y_min = 0;
	let x_max = 64;
	let y_max = 64;
	
	let offsetX = 64;
	let offsetY = 64;
	
	let spriteRow = 0;
	let spriteCol = 0;
	
	let fpsA = 8;
	let fpsB = 3;
	
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(obj, img_th11_enm_kisumeyamame);
	Obj_SetRenderPriority(obj, 0.41);
	ObjSprite2D_SetSourceRect(obj, x_min, y_min, x_max, y_max);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetScaleXYZ(obj, 1, 1, 1);
	
	while(!Obj_IsDeleted(FPEnemy))
	{
		ObjRender_SetScaleXYZ(obj, 1, 1, 1);
		if(f >= 0*fpsA && f < 1*fpsA){rowCol = rowColArray[0];}
		if(f >= 1*fpsA && f < 2*fpsA){rowCol = rowColArray[1];}
		if(f >= 2*fpsA && f < 3*fpsA){rowCol = rowColArray[2];}
		if(f >= 3*fpsA && f < 4*fpsA){rowCol = rowColArray[3];}
		
		if(f >= 4*fpsA && f < 5*fpsA){rowCol = rowColArray[4];}
		if(f >= 5*fpsA && f < 6*fpsA){rowCol = rowColArray[5];}
		if(f >= 6*fpsA && f < 7*fpsA){rowCol = rowColArray[6];}
		if(f >= 7*fpsA && f < 8*fpsA){rowCol = rowColArray[7];}
		
		if(f == 8*fpsA){f = 0;}
		else{f++;}

		
		if(ObjRender_GetScaleZ(FPEnemy) == 1)
		{
			f2 = 0;
			ObjRender_SetScaleZ(FPEnemy, 0);
		}
		ObjRender_SetPosition(obj,round(ObjMove_GetX(FPEnemy)),round(ObjMove_GetY(FPEnemy) + movecos),1);
		ObjSprite2D_SetSourceRect(obj, x_min + offsetX*rowCol[0], y_min + offsetY*rowCol[1], x_max + offsetX*rowCol[0], y_max + offsetY*rowCol[1]);
		yield;
	}
	Obj_Delete(obj);
}

task AnimateYamame_old(FPEnemy)
{
	let rowColArray =
	[
		[0, 2], //0
		[1, 2], //1
		[2, 2], //2
		[3, 2], //3
		
		[0, 3], //4
		[1, 3], //5
		[2, 3], //6
		[3, 3]  //7
	];
	
	let rowCol = rowColArray[0];
	
	let f = 0;
	let f2 = 0;
	let f3 = 0;
	let f4 = 0;
	let frame = 0;
	let movecos = 0;
	let moved = 0;
	
	let x_min = 0;
	let y_min = 0;
	let x_max = 64;
	let y_max = 64;
	
	let offsetX = 64;
	let offsetY = 64;
	
	let spriteRow = 0;
	let spriteCol = 0;
	
	let fpsA = 8;
	let fpsB = 3;
	
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(obj, img_th11_enm_kisumeyamame);
	Obj_SetRenderPriority(obj, 0.41);
	ObjSprite2D_SetSourceRect(obj, x_min, y_min, x_max, y_max);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetScaleXYZ(obj, 1, 1, 1);
	
	while(!Obj_IsDeleted(FPEnemy))
	{
		if(ObjMove_GetSpeed(FPEnemy) == 0)
		{
			if(moved == 1) //Reverse move anim to idle
			{
				if(f3 >= 0 && f3 < 1*fpsB)     {rowCol = rowColArray[3];}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){rowCol = rowColArray[2];}
				if(f3 >= 2*fpsB && f3 < 3*fpsB){rowCol = rowColArray[1];}
				if(f3 >= 3*fpsB && f3 < 4*fpsB){rowCol = rowColArray[0];}
				if(f3 == 4*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 2) //Reverse move anim to idle
			{
				if(f3 >= 0*fpsB && f3 < 1*fpsB){rowCol = rowColArray[3];}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){rowCol = rowColArray[2];}
				if(f3 >= 2*fpsB && f3 < 3*fpsB){rowCol = rowColArray[1];}
				if(f3 >= 3*fpsB && f3 < 4*fpsB){rowCol = rowColArray[0];}
				if(f3 == 4*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 0) //Idle animation loops
			{
				if(useAtkAnim == 1) //Idle attack anim
				{
					ObjRender_SetScaleXYZ(obj, 1, 1, 1);
					if(f >= 0*fpsA && f < 1*fpsA){rowCol = rowColArray[4];}
					if(f >= 1*fpsA && f < 2*fpsA){rowCol = rowColArray[5];}
					if(f >= 2*fpsA && f < 3*fpsA){rowCol = rowColArray[6];}
					if(f >= 3*fpsA && f < 4*fpsA){rowCol = rowColArray[7];}
					//if(f >= 4*fpsA){f = 0;}
					f++;
				}
				else //Idle
				{
					//ObjRender_SetScaleXYZ(obj, 1, 1, 1);
					if(f >= 0 && f < 1*fpsA)     {rowCol = rowColArray[0];}
					//if(f >= 1*fpsA && f < 2*fpsA){rowCol = rowColArray[1];}
					//if(f >= 2*fpsA && f < 3*fpsA){rowCol = rowColArray[2];}
					//if(f >= 3*fpsA && f < 4*fpsA){rowCol = rowColArray[3];}
					if(f >= 1*fpsA){f = 0;}
					f++;
				}
				f2 = 0;
				f3 = 0;
				f4++;
				movecos = cos(f4*2)*7;
			}
		}
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) > 0) //Moving right
		{
			ObjRender_SetScaleXYZ(obj, 1, 1, 1);
			if(f2 >= 0 && f2 < 1*fpsB)     {rowCol = rowColArray[0];}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){rowCol = rowColArray[1];}
			if(f2 >= 2*fpsB && f2 < 3*fpsB){rowCol = rowColArray[2];}
			if(f2 >= 3*fpsB && f2 < 4*fpsB){rowCol = rowColArray[3];}
			f = 0;
			f2++;
			f3 = 0;
			moved = 1;
			f4 = 0;
			movecos = cos(f4*2)*7;
		}
		
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) < 0) //Moving left
		{
			ObjRender_SetScaleXYZ(obj, -1, 1, 1);
			if(f2 >= 0 && f2 < 1*fpsB)     {rowCol = rowColArray[0];}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){rowCol = rowColArray[1];}
			if(f2 >= 2*fpsB && f2 < 3*fpsB){rowCol = rowColArray[2];}
			if(f2 >= 3*fpsB && f2 < 4*fpsB){rowCol = rowColArray[3];}
			f = 0;
			f2++;
			f3 = 0;
			moved = 2;
			f4 = 0;
			movecos = cos(f4*2)*7;
		}
		
		if(ObjRender_GetScaleZ(FPEnemy) == 1)
		{
			f2 = 0;
			ObjRender_SetScaleZ(FPEnemy, 0);
		}
		ObjRender_SetPosition(obj,round(ObjMove_GetX(FPEnemy)),round(ObjMove_GetY(FPEnemy) + movecos),1);
		ObjSprite2D_SetSourceRect(obj, x_min + offsetX*rowCol[0], y_min + offsetY*rowCol[1], x_max + offsetX*rowCol[0], y_max + offsetY*rowCol[1]);
		yield;
	}
	Obj_Delete(obj);
}

task AnimateParsee(FPEnemy)
{
	let rowColArray =
	[
		[0, 0], //0
		[1, 0], //1
		[2, 0], //2
		[3, 0], //3
		
		[0, 1], //4
		[1, 1], //5
		[2, 1], //6
		[3, 1]  //7
	];
	
	let rowCol = rowColArray[0];
	
	let f = 0;
	let f2 = 0;
	let f3 = 0;
	let f4 = 0;
	let frame = 0;
	let movecos = 0;
	let moved = 0;
	
	let x_min = 0;
	let y_min = 0;
	let x_max = 64;
	let y_max = 64;
	
	let offsetX = 64;
	let offsetY = 64;
	
	let spriteRow = 0;
	let spriteCol = 0;
	
	let fpsA = 8;
	let fpsB = 3;
	
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(obj, img_th11_enm_parsee);
	Obj_SetRenderPriority(obj, 0.41);
	ObjSprite2D_SetSourceRect(obj, x_min, y_min, x_max, y_max);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetScaleXYZ(obj, 1, 1, 1);
	
	while(!Obj_IsDeleted(FPEnemy))
	{
		if(ObjMove_GetSpeed(FPEnemy) == 0)
		{
			if(moved == 1) //Reverse move anim to idle
			{
				if(f3 >= 0 && f3 < 1*fpsB)     {rowCol = rowColArray[7];}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){rowCol = rowColArray[6];}
				if(f3 >= 2*fpsB && f3 < 3*fpsB){rowCol = rowColArray[5];}
				if(f3 >= 3*fpsB && f3 < 4*fpsB){rowCol = rowColArray[4];}
				if(f3 == 4*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 2) //Reverse move anim to idle
			{
				if(f3 >= 0*fpsB && f3 < 1*fpsB){rowCol = rowColArray[7];}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){rowCol = rowColArray[6];}
				if(f3 >= 2*fpsB && f3 < 3*fpsB){rowCol = rowColArray[5];}
				if(f3 >= 3*fpsB && f3 < 4*fpsB){rowCol = rowColArray[4];}
				if(f3 == 4*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 0) //Idle animation loops
			{
				if(useAtkAnim == 1) //Idle attack anim
				{
					ObjRender_SetScaleXYZ(obj, 1, 1, 1);
					if(f >= 0*fpsA && f < 1*fpsA){rowCol = rowColArray[4];}
					if(f >= 1*fpsA && f < 2*fpsA){rowCol = rowColArray[5];}
					if(f >= 2*fpsA && f < 3*fpsA){rowCol = rowColArray[6];}
					if(f >= 3*fpsA && f < 4*fpsA){rowCol = rowColArray[7];}
					if(f >= 4*fpsA){f = 0;}
					f++;
				}
				else //Idle
				{
					//ObjRender_SetScaleXYZ(obj, 1, 1, 1);
					if(f >= 0 && f < 1*fpsA)     {rowCol = rowColArray[0];}
					//if(f >= 1*fpsA && f < 2*fpsA){rowCol = rowColArray[1];}
					//if(f >= 2*fpsA && f < 3*fpsA){rowCol = rowColArray[2];}
					//if(f >= 3*fpsA && f < 4*fpsA){rowCol = rowColArray[3];}
					if(f >= 1*fpsA){f = 0;}
					f++;
				}
				f2 = 0;
				f3 = 0;
				f4++;
				movecos = cos(f4*2)*7;
			}
		}
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) > 0) //Moving right
		{
			ObjRender_SetScaleXYZ(obj, 1, 1, 1);
			if(f2 >= 0 && f2 < 1*fpsB)     {rowCol = rowColArray[4];}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){rowCol = rowColArray[5];}
			if(f2 >= 2*fpsB && f2 < 3*fpsB){rowCol = rowColArray[6];}
			if(f2 >= 3*fpsB && f2 < 4*fpsB){rowCol = rowColArray[7];}
			f = 0;
			f2++;
			f3 = 0;
			moved = 1;
			f4 = 0;
			movecos = cos(f4*2)*7;
		}
		
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) < 0) //Moving left
		{
			ObjRender_SetScaleXYZ(obj, -1, 1, 1);
			if(f2 >= 0 && f2 < 1*fpsB)     {rowCol = rowColArray[4];}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){rowCol = rowColArray[5];}
			if(f2 >= 2*fpsB && f2 < 3*fpsB){rowCol = rowColArray[6];}
			if(f2 >= 3*fpsB && f2 < 4*fpsB){rowCol = rowColArray[7];}
			f = 0;
			f2++;
			f3 = 0;
			moved = 2;
			f4 = 0;
			movecos = cos(f4*2)*7;
		}
		
		if(ObjRender_GetScaleZ(FPEnemy) == 1)
		{
			f2 = 0;
			ObjRender_SetScaleZ(FPEnemy, 0);
		}
		ObjRender_SetPosition(obj,round(ObjMove_GetX(FPEnemy)),round(ObjMove_GetY(FPEnemy) + movecos),1);
		ObjSprite2D_SetSourceRect(obj, x_min + offsetX*rowCol[0], y_min + offsetY*rowCol[1], x_max + offsetX*rowCol[0], y_max + offsetY*rowCol[1]);
		yield;
	}
	Obj_Delete(obj);
}

task AnimateYuugi(FPEnemy)
{
	let rowColArray =
	[
		[0, 0], //0
		[1, 0], //1
		[2, 0], //2
		[3, 0], //3
		
		[0, 1], //4
		[1, 1], //5
		[2, 1], //6
		[3, 1]  //7
	];
	
	let rowCol = rowColArray[0];
	
	let f = 0;
	let f2 = 0;
	let f3 = 0;
	let f4 = 0;
	let frame = 0;
	let movecos = 0;
	let moved = 0;
	
	let x_min = 0;
	let y_min = 0;
	let x_max = 64;
	let y_max = 80;
	
	let offsetX = 64;
	let offsetY = 80;
	
	let spriteRow = 0;
	let spriteCol = 0;
	
	let fpsA = 8;
	let fpsB = 3;
	
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(obj, img_th11_enm_yuugi);
	Obj_SetRenderPriority(obj, 0.41);
	ObjSprite2D_SetSourceRect(obj, x_min, y_min, x_max, y_max);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetScaleXYZ(obj, 1, 1, 1);
	
	while(!Obj_IsDeleted(FPEnemy))
	{
		if(ObjMove_GetSpeed(FPEnemy) == 0)
		{
			if(moved == 1) //Reverse move anim to idle
			{
				if(f3 >= 0 && f3 < 1*fpsB)     {rowCol = rowColArray[6];}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){rowCol = rowColArray[5];}
				if(f3 >= 2*fpsB && f3 < 3*fpsB){rowCol = rowColArray[4];}
				//if(f3 >= 3*fpsB && f3 < 4*fpsB){rowCol = rowColArray[4];}
				if(f3 == 3*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 2) //Reverse move anim to idle
			{
				if(f3 >= 0*fpsB && f3 < 1*fpsB){rowCol = rowColArray[6];}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){rowCol = rowColArray[5];}
				if(f3 >= 2*fpsB && f3 < 3*fpsB){rowCol = rowColArray[4];}
				//if(f3 >= 3*fpsB && f3 < 4*fpsB){rowCol = rowColArray[4];}
				if(f3 == 3*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 0) //Idle animation loops
			{
				if(useAtkAnim == 1) //Idle attack anim
				{
					ObjRender_SetScaleXYZ(obj, 1, 1, 1);
					if(f >= 0*fpsA && f < 1*fpsA){rowCol = rowColArray[1];}
					if(f >= 1*fpsA && f < 2*fpsA){rowCol = rowColArray[2];}
					if(f >= 2*fpsA && f < 3*fpsA){rowCol = rowColArray[3];}
					//if(f >= 3*fpsA && f < 4*fpsA){rowCol = rowColArray[7];}
					//if(f >= 4*fpsA){f = 0;}
					f++;
				}
				else //Idle
				{
					//ObjRender_SetScaleXYZ(obj, 1, 1, 1);
					if(f >= 0 && f < 1*fpsA)     {rowCol = rowColArray[0];}
					//if(f >= 1*fpsA && f < 2*fpsA){rowCol = rowColArray[1];}
					//if(f >= 2*fpsA && f < 3*fpsA){rowCol = rowColArray[2];}
					//if(f >= 3*fpsA && f < 4*fpsA){rowCol = rowColArray[3];}
					if(f >= 1*fpsA){f = 0;}
					f++;
				}
				f2 = 0;
				f3 = 0;
				f4++;
				movecos = cos(f4*2)*7;
			}
		}
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) > 0) //Moving right
		{
			ObjRender_SetScaleXYZ(obj, -1, 1, 1);
			if(f2 >= 0 && f2 < 1*fpsB)     {rowCol = rowColArray[4];}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){rowCol = rowColArray[5];}
			if(f2 >= 2*fpsB && f2 < 3*fpsB){rowCol = rowColArray[6];}
			//if(f2 >= 3*fpsB && f2 < 4*fpsB){rowCol = rowColArray[7];}
			f = 0;
			f2++;
			f3 = 0;
			moved = 1;
			f4 = 0;
			movecos = cos(f4*2)*7;
		}
		
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) < 0) //Moving left
		{
			ObjRender_SetScaleXYZ(obj, 1, 1, 1);
			if(f2 >= 0 && f2 < 1*fpsB)     {rowCol = rowColArray[4];}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){rowCol = rowColArray[5];}
			if(f2 >= 2*fpsB && f2 < 3*fpsB){rowCol = rowColArray[6];}
			//if(f2 >= 3*fpsB && f2 < 4*fpsB){rowCol = rowColArray[7];}
			f = 0;
			f2++;
			f3 = 0;
			moved = 2;
			f4 = 0;
			movecos = cos(f4*2)*7;
		}
		
		if(ObjRender_GetScaleZ(FPEnemy) == 1)
		{
			f2 = 0;
			ObjRender_SetScaleZ(FPEnemy, 0);
		}
		ObjRender_SetPosition(obj,round(ObjMove_GetX(FPEnemy)),round(ObjMove_GetY(FPEnemy) + movecos),1);
		ObjSprite2D_SetSourceRect(obj, x_min + offsetX*rowCol[0], y_min + offsetY*rowCol[1], x_max + offsetX*rowCol[0], y_max + offsetY*rowCol[1]);
		yield;
	}
	Obj_Delete(obj);
}

task AnimateSatori(FPEnemy)
{
	let rowColArray =
	[
		[0, 0], //0
		[1, 0], //1
		[2, 0], //2
		[3, 0], //3
		
		[0, 1], //4
		[1, 1], //5
		[2, 1], //6
		[3, 1], //7

		[0, 2], //8
		[1, 2], //9
		[2, 2], //10
		[3, 2]  //11
	];
	
	let rowCol = rowColArray[0];
	
	let f = 0;
	let f2 = 0;
	let f3 = 0;
	let f4 = 0;
	let frame = 0;
	let movecos = 0;
	let moved = 0;
	
	let x_min = 0;
	let y_min = 0;
	let x_max = 48;
	let y_max = 64;
	
	let offsetX = 48;
	let offsetY = 64;
	
	let spriteRow = 0;
	let spriteCol = 0;
	
	let fpsA = 8;
	let fpsB = 3;
	
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(obj, img_enm_satori);
	Obj_SetRenderPriority(obj, 0.41);
	ObjSprite2D_SetSourceRect(obj, x_min, y_min, x_max, y_max);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetScaleXYZ(obj, 1, 1, 1);
	
	while(!Obj_IsDeleted(FPEnemy))
	{
		if(ObjMove_GetSpeed(FPEnemy) == 0)
		{
			if(moved == 1) //Reverse move anim to idle
			{
				if(f3 >= 0 && f3 < 1*fpsB)     {rowCol = rowColArray[11];}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){rowCol = rowColArray[10];}
				if(f3 >= 2*fpsB && f3 < 3*fpsB){rowCol = rowColArray[9];}
				if(f3 >= 3*fpsB && f3 < 4*fpsB){rowCol = rowColArray[8];}
				if(f3 == 4*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 2) //Reverse move anim to idle
			{
				if(f3 >= 0*fpsB && f3 < 1*fpsB){rowCol = rowColArray[11];}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){rowCol = rowColArray[10];}
				if(f3 >= 2*fpsB && f3 < 3*fpsB){rowCol = rowColArray[9];}
				if(f3 >= 3*fpsB && f3 < 4*fpsB){rowCol = rowColArray[8];}
				if(f3 == 4*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 0) //Idle animation loops
			{
				//if(useAtkAnim == 1) //Idle attack anim
				//{
				//	ObjRender_SetScaleXYZ(obj, 1, 1, 1);
				//	if(f >= 0*fpsA && f < 1*fpsA){rowCol = rowColArray[4];}
				//	if(f >= 1*fpsA && f < 2*fpsA){rowCol = rowColArray[5];}
				//	if(f >= 2*fpsA && f < 3*fpsA){rowCol = rowColArray[6];}
				//	if(f >= 3*fpsA && f < 4*fpsA){rowCol = rowColArray[7];}
				//	if(f >= 4*fpsA){f = 0;}
				//	f++;
				//}
				//else //Idle
				//{
					//ObjRender_SetScaleXYZ(obj, 1, 1, 1);
					if(f >= 0 && f < 1*fpsA)     {rowCol = rowColArray[0];}
					if(f >= 1*fpsA && f < 2*fpsA){rowCol = rowColArray[1];}
					if(f >= 2*fpsA && f < 3*fpsA){rowCol = rowColArray[2];}
					if(f >= 3*fpsA && f < 4*fpsA){rowCol = rowColArray[3];}
					if(f >= 4*fpsA && f < 5*fpsA){rowCol = rowColArray[4];}
					if(f >= 5*fpsA && f < 6*fpsA){rowCol = rowColArray[5];}
					if(f >= 6*fpsA && f < 7*fpsA){rowCol = rowColArray[6];}
					if(f >= 7*fpsA && f < 8*fpsA){rowCol = rowColArray[7];}
					if(f >= 8*fpsA){f = 0;}
					f++;
				//}
				f2 = 0;
				f3 = 0;
				f4++;
				movecos = cos(f4*2)*7;
			}
		}
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) > 0) //Moving right
		{
			ObjRender_SetScaleXYZ(obj, 1, 1, 1);
			if(f2 >= 0 && f2 < 1*fpsB)     {rowCol = rowColArray[8];}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){rowCol = rowColArray[9];}
			if(f2 >= 2*fpsB && f2 < 3*fpsB){rowCol = rowColArray[10];}
			if(f2 >= 3*fpsB && f2 < 4*fpsB){rowCol = rowColArray[11];}
			f = 0;
			f2++;
			f3 = 0;
			moved = 1;
			f4 = 0;
			movecos = cos(f4*2)*7;
		}
		
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) < 0) //Moving left
		{
			ObjRender_SetScaleXYZ(obj, -1, 1, 1);
			if(f2 >= 0 && f2 < 1*fpsB)     {rowCol = rowColArray[8];}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){rowCol = rowColArray[9];}
			if(f2 >= 2*fpsB && f2 < 3*fpsB){rowCol = rowColArray[10];}
			if(f2 >= 3*fpsB && f2 < 4*fpsB){rowCol = rowColArray[11];}
			f = 0;
			f2++;
			f3 = 0;
			moved = 2;
			f4 = 0;
			movecos = cos(f4*2)*7;
		}
		
		if(ObjRender_GetScaleZ(FPEnemy) == 1)
		{
			f2 = 0;
			ObjRender_SetScaleZ(FPEnemy, 0);
		}
		ObjRender_SetPosition(obj,round(ObjMove_GetX(FPEnemy)),round(ObjMove_GetY(FPEnemy) + movecos),1);
		ObjSprite2D_SetSourceRect(obj, x_min + offsetX*rowCol[0], y_min + offsetY*rowCol[1], x_max + offsetX*rowCol[0], y_max + offsetY*rowCol[1]);
		yield;
	}
	Obj_Delete(obj);
}

//add effect thing
task AnimateOrin(FPEnemy)
{
	let rowColArray =
	[
		[0, 0], //0
		[1, 0], //1
		[2, 0], //2
		[3, 0], //3
		
		[0, 1], //4
		[1, 1], //5
		[2, 1], //6
		[3, 1], //7

		[0, 2], //8
		[1, 2], //9
		[2, 2], //10
		[3, 2]  //11
	];
	
	let rowCol = rowColArray[0];
	
	let f = 0;
	let f2 = 0;
	let f3 = 0;
	let f4 = 0;
	let frame = 0;
	let movecos = 0;
	let moved = 0;
	
	let x_min = 0;
	let y_min = 0;
	let x_max = 64;
	let y_max = 64;
	
	let offsetX = 64;
	let offsetY = 64;
	
	let spriteRow = 0;
	let spriteCol = 0;
	
	let fpsA = 8;
	let fpsB = 3;
	
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(obj, img_enm_orin);
	Obj_SetRenderPriority(obj, 0.41);
	ObjSprite2D_SetSourceRect(obj, x_min, y_min, x_max, y_max);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetScaleXYZ(obj, 1, 1, 1);
	
	while(!Obj_IsDeleted(FPEnemy))
	{
		if(ObjMove_GetSpeed(FPEnemy) == 0)
		{
			if(moved == 1) //Reverse move anim to idle
			{
				if(f3 >= 0 && f3 < 1*fpsB)     {rowCol = rowColArray[5];}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){rowCol = rowColArray[4];}
				//if(f3 >= 2*fpsB && f3 < 3*fpsB){rowCol = rowColArray[1];}
				//if(f3 >= 3*fpsB && f3 < 4*fpsB){rowCol = rowColArray[0];}
				if(f3 == 2*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 2) //Reverse move anim to idle
			{
				if(f3 >= 0*fpsB && f3 < 1*fpsB){rowCol = rowColArray[5];}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){rowCol = rowColArray[4];}
				//if(f3 >= 2*fpsB && f3 < 3*fpsB){rowCol = rowColArray[1];}
				//if(f3 >= 3*fpsB && f3 < 4*fpsB){rowCol = rowColArray[0];}
				if(f3 == 2*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 0) //Idle animation loops
			{
				if(useAtkAnim == 1) //Idle attack anim
				{
					ObjRender_SetScaleXYZ(obj, 1, 1, 1);
					if(f >= 0*fpsA && f < 1*fpsA){rowCol = rowColArray[8];}
					if(f >= 1*fpsA && f < 2*fpsA){rowCol = rowColArray[9];}
					//if(f >= 2*fpsA && f < 3*fpsA){rowCol = rowColArray[6];}
					//if(f >= 3*fpsA && f < 4*fpsA){rowCol = rowColArray[7];}
					//if(f >= 4*fpsA){f = 0;}
					f++;
				}
				else //Idle
				{
					//ObjRender_SetScaleXYZ(obj, 1, 1, 1);
					if(f >= 0 && f < 1*fpsA)     {rowCol = rowColArray[0];}
					if(f >= 1*fpsA && f < 2*fpsA){rowCol = rowColArray[1];}
					if(f >= 2*fpsA && f < 3*fpsA){rowCol = rowColArray[2];}
					if(f >= 3*fpsA && f < 4*fpsA){rowCol = rowColArray[1];}
					if(f >= 4*fpsA){f = 0;}
					f++;
				}
				f2 = 0;
				f3 = 0;
				f4++;
				movecos = cos(f4*2)*7;
			}
		}
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) > 0) //Moving right
		{
			ObjRender_SetScaleXYZ(obj, -1, 1, 1);
			if(f2 >= 0 && f2 < 1*fpsB)     {rowCol = rowColArray[4];}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){rowCol = rowColArray[5];}
			//if(f2 >= 2*fpsB && f2 < 3*fpsB){rowCol = rowColArray[2];}
			//if(f2 >= 3*fpsB && f2 < 4*fpsB){rowCol = rowColArray[3];}
			f = 0;
			f2++;
			f3 = 0;
			moved = 1;
			f4 = 0;
			movecos = cos(f4*2)*7;
		}
		
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) < 0) //Moving left
		{
			ObjRender_SetScaleXYZ(obj, 1, 1, 1);
			if(f2 >= 0 && f2 < 1*fpsB)     {rowCol = rowColArray[4];}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){rowCol = rowColArray[5];}
			//if(f2 >= 2*fpsB && f2 < 3*fpsB){rowCol = rowColArray[2];}
			//if(f2 >= 3*fpsB && f2 < 4*fpsB){rowCol = rowColArray[3];}
			f = 0;
			f2++;
			f3 = 0;
			moved = 2;
			f4 = 0;
			movecos = cos(f4*2)*7;
		}
		
		if(ObjRender_GetScaleZ(FPEnemy) == 1)
		{
			f2 = 0;
			ObjRender_SetScaleZ(FPEnemy, 0);
		}
		ObjRender_SetPosition(obj,round(ObjMove_GetX(FPEnemy)),round(ObjMove_GetY(FPEnemy) + movecos),1);
		ObjSprite2D_SetSourceRect(obj, x_min + offsetX*rowCol[0], y_min + offsetY*rowCol[1], x_max + offsetX*rowCol[0], y_max + offsetY*rowCol[1]);
		yield;
	}
	Obj_Delete(obj);
}

//add effect thing
task AnimateUtsuho(FPEnemy)
{
	let rowColArray =
	[
		[0, 0], //0
		[1, 0], //1
		[2, 0], //2
		[3, 0], //3
		
		[0, 1], //4
		[1, 1], //5
		[2, 1], //6
		[3, 1], //7

		[0, 2], //8
		[1, 2], //9
		[2, 2], //10
		[3, 2], //11

		[0, 3], //12
		[1, 3], //13
		[2, 3], //14
		[3, 3], //15
	];
	
	let rowCol = rowColArray[0];
	
	let f = 0;
	let f2 = 0;
	let f3 = 0;
	let f4 = 0;
	let frame = 0;
	let movecos = 0;
	let moved = 0;
	
	let x_min = 0;
	let y_min = 0;
	let x_max = 96;
	let y_max = 96;
	
	let offsetX = 96;
	let offsetY = 96;
	
	let spriteRow = 0;
	let spriteCol = 0;
	
	let fpsA = 8;
	let fpsB = 3;
	
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(obj, img_enm_utsuho);
	Obj_SetRenderPriority(obj, 0.41);
	ObjSprite2D_SetSourceRect(obj, x_min, y_min, x_max, y_max);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetScaleXYZ(obj, 1, 1, 1);
	
	while(!Obj_IsDeleted(FPEnemy))
	{
		if(ObjMove_GetSpeed(FPEnemy) == 0)
		{
			if(moved == 1) //Reverse move anim to idle
			{
				if(f3 >= 0 && f3 < 1*fpsB)     {rowCol = rowColArray[6];}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){rowCol = rowColArray[5];}
				if(f3 >= 2*fpsB && f3 < 3*fpsB){rowCol = rowColArray[4];}
				//if(f3 >= 3*fpsB && f3 < 4*fpsB){rowCol = rowColArray[0];}
				if(f3 == 4*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 2) //Reverse move anim to idle
			{
				if(f3 >= 0*fpsB && f3 < 1*fpsB){rowCol = rowColArray[10];}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){rowCol = rowColArray[9];}
				if(f3 >= 2*fpsB && f3 < 3*fpsB){rowCol = rowColArray[8];}
				//if(f3 >= 3*fpsB && f3 < 4*fpsB){rowCol = rowColArray[0];}
				if(f3 == 4*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 0) //Idle animation loops
			{
				if(useAtkAnim == 1) //Idle attack anim
				{
					ObjRender_SetScaleXYZ(obj, 1, 1, 1);
					if(f >= 0*fpsA && f < 1*fpsA){rowCol = rowColArray[12];}
					if(f >= 1*fpsA && f < 2*fpsA){rowCol = rowColArray[13];}
					if(f >= 2*fpsA && f < 3*fpsA){rowCol = rowColArray[14];}
					if(f >= 3*fpsA && f < 4*fpsA){rowCol = rowColArray[15];}
					if(f >= 4*fpsA){f = 2*fpsA;}
					f++;
				}
				else //Idle
				{
					//ObjRender_SetScaleXYZ(obj, 1, 1, 1);
					if(f >= 0 && f < 1*fpsA)     {rowCol = rowColArray[0];}
					if(f >= 1*fpsA && f < 2*fpsA){rowCol = rowColArray[1];}
					if(f >= 2*fpsA && f < 3*fpsA){rowCol = rowColArray[2];}
					if(f >= 3*fpsA && f < 4*fpsA){rowCol = rowColArray[3];}
					if(f >= 4*fpsA){f = 0;}
					f++;
				}
				f2 = 0;
				f3 = 0;
				f4++;
				movecos = cos(f4*2)*7;
			}
		}
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) > 0) //Moving right
		{
			ObjRender_SetScaleXYZ(obj, 1, 1, 1);
			if(f2 >= 0 && f2 < 1*fpsB)     {rowCol = rowColArray[4];}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){rowCol = rowColArray[5];}
			if(f2 >= 2*fpsB && f2 < 3*fpsB){rowCol = rowColArray[6];}
			//if(f2 >= 3*fpsB && f2 < 4*fpsB){rowCol = rowColArray[3];}
			f = 0;
			f2++;
			f3 = 0;
			moved = 1;
			f4 = 0;
			movecos = cos(f4*2)*7;
		}
		
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) < 0) //Moving left
		{
			ObjRender_SetScaleXYZ(obj, 1, 1, 1);
			if(f2 >= 0 && f2 < 1*fpsB)     {rowCol = rowColArray[8];}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){rowCol = rowColArray[9];}
			if(f2 >= 2*fpsB && f2 < 3*fpsB){rowCol = rowColArray[10];}
			//if(f2 >= 3*fpsB && f2 < 4*fpsB){rowCol = rowColArray[3];}
			f = 0;
			f2++;
			f3 = 0;
			moved = 2;
			f4 = 0;
			movecos = cos(f4*2)*7;
		}
		
		if(ObjRender_GetScaleZ(FPEnemy) == 1)
		{
			f2 = 0;
			ObjRender_SetScaleZ(FPEnemy, 0);
		}
		ObjRender_SetPosition(obj,round(ObjMove_GetX(FPEnemy)),round(ObjMove_GetY(FPEnemy) + movecos),1);
		ObjSprite2D_SetSourceRect(obj, x_min + offsetX*rowCol[0], y_min + offsetY*rowCol[1], x_max + offsetX*rowCol[0], y_max + offsetY*rowCol[1]);
		yield;
	}
	Obj_Delete(obj);
}

task AnimateKoishi(FPEnemy)
{
	let rowColArray =
	[
		[0, 0], //0
		[1, 0], //1
		[2, 0], //2
		[3, 0], //3
		
		[0, 1], //4
		[1, 1], //5
		[2, 1], //6
		[3, 1], //7

		[0, 2], //8
		[1, 2], //9
		[2, 2], //10
		[3, 2]  //11
	];
	
	let rowCol = rowColArray[0];
	
	let f = 0;
	let f2 = 0;
	let f3 = 0;
	let f4 = 0;
	let frame = 0;
	let movecos = 0;
	let moved = 0;
	
	let x_min = 0;
	let y_min = 0;
	let x_max = 64;
	let y_max = 64;
	
	let offsetX = 64;
	let offsetY = 64;
	
	let spriteRow = 0;
	let spriteCol = 0;
	
	let fpsA = 8;
	let fpsB = 3;
	let fpsC = 5;
	
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(obj, img_enm_koishi);
	Obj_SetRenderPriority(obj, 0.41);
	ObjSprite2D_SetSourceRect(obj, x_min, y_min, x_max, y_max);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetScaleXYZ(obj, 1, 1, 1);
	
	while(!Obj_IsDeleted(FPEnemy))
	{
		if(ObjMove_GetSpeed(FPEnemy) == 0)
		{
			if(moved == 1) //Reverse move anim to idle
			{
				if(f3 >= 0 && f3 < 1*fpsB)     {rowCol = rowColArray[7];}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){rowCol = rowColArray[6];}
				if(f3 >= 2*fpsB && f3 < 3*fpsB){rowCol = rowColArray[5];}
				if(f3 >= 3*fpsB && f3 < 4*fpsB){rowCol = rowColArray[4];}
				if(f3 == 4*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 2) //Reverse move anim to idle
			{
				if(f3 >= 0*fpsB && f3 < 1*fpsB){rowCol = rowColArray[7];}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){rowCol = rowColArray[6];}
				if(f3 >= 2*fpsB && f3 < 3*fpsB){rowCol = rowColArray[5];}
				if(f3 >= 3*fpsB && f3 < 4*fpsB){rowCol = rowColArray[4];}
				if(f3 == 4*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 0) //Idle animation loops
			{
				if(useAtkAnim == 1) //Idle attack anim
				{
					ObjRender_SetScaleXYZ(obj, 1, 1, 1);
					if(f >= 0*fpsC && f < 1*fpsC){rowCol = rowColArray[8];}
					if(f >= 1*fpsC && f < 2*fpsC){rowCol = rowColArray[9];}
					if(f >= 2*fpsC && f < 3*fpsC){rowCol = rowColArray[10];}
					if(f >= 3*fpsC && f < 4*fpsC){rowCol = rowColArray[11];}
					//if(f >= 4*fpsA){f = 0;}
					f++;
				}
				else //Idle
				{
					//ObjRender_SetScaleXYZ(obj, 1, 1, 1);
					if(f >= 0 && f < 1*fpsA)     {rowCol = rowColArray[0];}
					if(f >= 1*fpsA && f < 2*fpsA){rowCol = rowColArray[1];}
					if(f >= 2*fpsA && f < 3*fpsA){rowCol = rowColArray[2];}
					if(f >= 3*fpsA && f < 4*fpsA){rowCol = rowColArray[3];}
					if(f >= 4*fpsA && f < 5*fpsA){rowCol = rowColArray[2];}
					if(f >= 5*fpsA && f < 6*fpsA){rowCol = rowColArray[1];}
					//if(f >= 6*fpsA && f < 7*fpsA){rowCol = rowColArray[6];}
					//if(f >= 7*fpsA && f < 8*fpsA){rowCol = rowColArray[7];}
					if(f >= 6*fpsA){f = 0;}
					f++;
				}
				f2 = 0;
				f3 = 0;
				f4++;
				movecos = cos(f4*2)*7;
			}
		}
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) > 0) //Moving right
		{
			ObjRender_SetScaleXYZ(obj, 1, 1, 1);
			if(f2 >= 0 && f2 < 1*fpsB)     {rowCol = rowColArray[4];}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){rowCol = rowColArray[5];}
			if(f2 >= 2*fpsB && f2 < 3*fpsB){rowCol = rowColArray[6];}
			if(f2 >= 3*fpsB && f2 < 4*fpsB){rowCol = rowColArray[7];}
			f = 0;
			f2++;
			f3 = 0;
			moved = 1;
			f4 = 0;
			movecos = cos(f4*2)*7;
		}
		
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) < 0) //Moving left
		{
			ObjRender_SetScaleXYZ(obj, -1, 1, 1);
			if(f2 >= 0 && f2 < 1*fpsB)     {rowCol = rowColArray[4];}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){rowCol = rowColArray[5];}
			if(f2 >= 2*fpsB && f2 < 3*fpsB){rowCol = rowColArray[6];}
			if(f2 >= 3*fpsB && f2 < 4*fpsB){rowCol = rowColArray[7];}
			f = 0;
			f2++;
			f3 = 0;
			moved = 2;
			f4 = 0;
			movecos = cos(f4*2)*7;
		}
		
		if(ObjRender_GetScaleZ(FPEnemy) == 1)
		{
			f2 = 0;
			ObjRender_SetScaleZ(FPEnemy, 0);
		}
		ObjRender_SetPosition(obj,round(ObjMove_GetX(FPEnemy)),round(ObjMove_GetY(FPEnemy) + movecos),1);
		ObjSprite2D_SetSourceRect(obj, x_min + offsetX*rowCol[0], y_min + offsetY*rowCol[1], x_max + offsetX*rowCol[0], y_max + offsetY*rowCol[1]);
		yield;
	}
	Obj_Delete(obj);
}


task AnimateNazrin(FPEnemy)
{
	let rowColArray =
	[
		[0, 0], //0
		[1, 0], //1
		[2, 0], //2
		[3, 0], //3
		
		[0, 1], //4
		[1, 1], //5
		[2, 1], //6
		[3, 1], //7
		
		[0, 2], //8
		[1, 2], //9
		[2, 2], //10
		[3, 2]  //11
	];
	
	let rowCol = rowColArray[0];
	
	let f = 0;
	let f2 = 0;
	let f3 = 0;
	let f4 = 0;
	let f5 = 0;
	let frame = 0;
	let movecos = 0;
	let moved = 0;
	
	let x_min = 0;
	let y_min = 0;
	let x_max = 64;
	let y_max = 80;
	
	let offsetX = 64;
	let offsetY = 80;
	
	let spriteRow = 0;
	let spriteCol = 0;
	
	let fpsA = 8;
	let fpsB = 3;
	let fpsC = 10;
	
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(obj, img_enm_nazrin00);
	Obj_SetRenderPriority(obj, 0.41);
	ObjSprite2D_SetSourceRect(obj, x_min, y_min, x_max, y_max);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetScaleXYZ(obj, 1, 1, 1);
	
	while(!Obj_IsDeleted(FPEnemy))
	{
		if(ObjMove_GetSpeed(FPEnemy) == 0)
		{
			if(moved == 1) //Reverse move anim to idle
			{
				if(f3 >= 0 && f3 < 1*fpsB)     {rowCol = rowColArray[7];}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){rowCol = rowColArray[6];}
				if(f3 >= 2*fpsB && f3 < 3*fpsB){rowCol = rowColArray[5];}
				if(f3 >= 3*fpsB && f3 < 4*fpsB){rowCol = rowColArray[4];}
				if(f3 == 4*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 2) //Reverse move anim to idle
			{
				if(f3 >= 0*fpsB && f3 < 1*fpsB){rowCol = rowColArray[7];}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){rowCol = rowColArray[6];}
				if(f3 >= 2*fpsB && f3 < 3*fpsB){rowCol = rowColArray[5];}
				if(f3 >= 3*fpsB && f3 < 4*fpsB){rowCol = rowColArray[4];}
				if(f3 == 4*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 0) //Idle animation loops
			{
				if(useAtkAnim == 1) //Idle attack anim
				{
					ObjRender_SetScaleXYZ(obj, 1, 1, 1);
					if(f5 >= 0*fpsA && f5 < 1*fpsA){rowCol = rowColArray[8];}
					if(f5 >= 1*fpsA && f5 < 2*fpsA){rowCol = rowColArray[9];}
					if(f5 >= 2*fpsA && f5 < 3*fpsA){rowCol = rowColArray[10];}
					if(f5 >= 3*fpsA && f5 < 5*fpsA){rowCol = rowColArray[11];}
					//if(f >= 5*fpsA){f = 0;}
					f5++;
				}
				else //Idle
				{
					//ObjRender_SetScaleXYZ(obj, 1, 1, 1);
					if(f >= 0 && f < 1*fpsA)     {rowCol = rowColArray[0];}
					if(f >= 1*fpsA && f < 2*fpsA){rowCol = rowColArray[1];}
					if(f >= 2*fpsA && f < 3*fpsA){rowCol = rowColArray[2];}
					if(f >= 3*fpsA && f < 4*fpsA){rowCol = rowColArray[1];}
					if(f >= 4*fpsA){f = 0;}
					f++;
					f5 = 0;
				}
				f2 = 0;
				f3 = 0;
				f4++;
				movecos = cos(f4*2)*7;
			}
		}
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) > 0) //Moving right
		{
			ObjRender_SetScaleXYZ(obj, 1, 1, 1);
			if(f2 >= 0 && f2 < 1*fpsB)     {rowCol = rowColArray[4];}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){rowCol = rowColArray[5];}
			if(f2 >= 2*fpsB && f2 < 3*fpsB){rowCol = rowColArray[6];}
			if(f2 >= 3*fpsB && f2 < 4*fpsB){rowCol = rowColArray[7];}
			f = 0;
			f2++;
			f3 = 0;
			moved = 1;
			f4 = 0;
			f5 = 0;
			movecos = cos(f4*2)*7;
		}
		
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) < 0) //Moving left
		{
			ObjRender_SetScaleXYZ(obj, -1, 1, 1);
			if(f2 >= 0 && f2 < 1*fpsB)     {rowCol = rowColArray[4];}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){rowCol = rowColArray[5];}
			if(f2 >= 2*fpsB && f2 < 3*fpsB){rowCol = rowColArray[6];}
			if(f2 >= 3*fpsB && f2 < 4*fpsB){rowCol = rowColArray[7];}
			f = 0;
			f2++;
			f3 = 0;
			moved = 2;
			f4 = 0;
			f5 = 0;
			movecos = cos(f4*2)*7;
		}
		
		if(ObjRender_GetScaleZ(FPEnemy) == 1)
		{
			f2 = 0;
			ObjRender_SetScaleZ(FPEnemy, 0);
		}
		ObjRender_SetPosition(obj,round(ObjMove_GetX(FPEnemy)),round(ObjMove_GetY(FPEnemy) + movecos),1);
		ObjSprite2D_SetSourceRect(obj, x_min + offsetX*rowCol[0], y_min + offsetY*rowCol[1], x_max + offsetX*rowCol[0], y_max + offsetY*rowCol[1]);
		yield;
	}
	Obj_Delete(obj);
}

task AnimateIchirin(FPEnemy)
{
	let rowColArray =
	[
		[0, 0], //0
		[1, 0], //1
		[2, 0], //2
		[3, 0], //3
		
		[0, 1], //4
		[1, 1], //5
		[2, 1], //6
		[3, 1], //7
		
		[0, 2], //8
		[1, 2], //9
		[2, 2], //10
		[3, 2]  //11
	];
	
	let rowCol = rowColArray[0];
	
	let f = 0;
	let f2 = 0;
	let f3 = 0;
	let f4 = 0;
	let f5 = 0;
	let frame = 0;
	let movecos = 0;
	let moved = 0;
	
	let x_min = 0;
	let y_min = 0;
	let x_max = 64;
	let y_max = 98;
	
	let offsetX = 64;
	let offsetY = 98;
	
	let spriteRow = 0;
	let spriteCol = 0;
	
	let fpsA = 10;
	let fpsB = 3;
	let fpsC = 7;
	
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(obj, img_enm_ichirin00);
	Obj_SetRenderPriority(obj, 0.41);
	ObjSprite2D_SetSourceRect(obj, x_min, y_min, x_max, y_max);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetScaleXYZ(obj, 1, 1, 1);
	
	while(!Obj_IsDeleted(FPEnemy))
	{
		if(ObjMove_GetSpeed(FPEnemy) == 0)
		{
			if(moved == 1) //Reverse move anim to idle
			{
				if(f3 >= 0 && f3 < 1*fpsB)     {rowCol = rowColArray[7];}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){rowCol = rowColArray[6];}
				if(f3 >= 2*fpsB && f3 < 3*fpsB){rowCol = rowColArray[5];}
				if(f3 >= 3*fpsB && f3 < 4*fpsB){rowCol = rowColArray[4];}
				if(f3 == 4*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 2) //Reverse move anim to idle
			{
				if(f3 >= 0*fpsB && f3 < 1*fpsB){rowCol = rowColArray[7];}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){rowCol = rowColArray[6];}
				if(f3 >= 2*fpsB && f3 < 3*fpsB){rowCol = rowColArray[5];}
				if(f3 >= 3*fpsB && f3 < 4*fpsB){rowCol = rowColArray[4];}
				if(f3 == 4*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 0) //Idle animation loops
			{
				if(useAtkAnim == 1) //Idle attack anim
				{
					ObjRender_SetScaleXYZ(obj, 1, 1, 1);
					if(f5 >= 0*fpsC && f5 < 1*fpsC){rowCol = rowColArray[8];}
					if(f5 >= 1*fpsC && f5 < 2*fpsC){rowCol = rowColArray[9];}
					if(f5 >= 2*fpsC && f5 < 3*fpsC){rowCol = rowColArray[10];}
					if(f5 >= 3*fpsC && f5 < 5*fpsC){rowCol = rowColArray[11];}
					//if(f >= 5*fpsA){f = 0;}
					f5++;
				}
				else //Idle
				{
					//ObjRender_SetScaleXYZ(obj, 1, 1, 1);
					if(f >= 0 && f < 1*fpsA)     {rowCol = rowColArray[0];}
					if(f >= 1*fpsA && f < 2*fpsA){rowCol = rowColArray[1];}
					if(f >= 2*fpsA && f < 3*fpsA){rowCol = rowColArray[2];}
					if(f >= 3*fpsA && f < 4*fpsA){rowCol = rowColArray[3];}
					if(f >= 4*fpsA){f = 0;}
					f++;
					f5 = 0;
				}
				f2 = 0;
				f3 = 0;
				f4++;
				movecos = cos(f4*2)*7;
			}
		}
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) > 0) //Moving right
		{
			ObjRender_SetScaleXYZ(obj, 1, 1, 1);
			if(f2 >= 0 && f2 < 1*fpsB)     {rowCol = rowColArray[4];}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){rowCol = rowColArray[5];}
			if(f2 >= 2*fpsB && f2 < 3*fpsB){rowCol = rowColArray[6];}
			if(f2 >= 3*fpsB && f2 < 4*fpsB){rowCol = rowColArray[7];}
			f = 0;
			f2++;
			f3 = 0;
			moved = 1;
			f4 = 0;
			f5 = 0;
			movecos = cos(f4*2)*7;
		}
		
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) < 0) //Moving left
		{
			ObjRender_SetScaleXYZ(obj, -1, 1, 1);
			if(f2 >= 0 && f2 < 1*fpsB)     {rowCol = rowColArray[4];}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){rowCol = rowColArray[5];}
			if(f2 >= 2*fpsB && f2 < 3*fpsB){rowCol = rowColArray[6];}
			if(f2 >= 3*fpsB && f2 < 4*fpsB){rowCol = rowColArray[7];}
			f = 0;
			f2++;
			f3 = 0;
			moved = 2;
			f4 = 0;
			f5 = 0;
			movecos = cos(f4*2)*7;
		}
		
		if(ObjRender_GetScaleZ(FPEnemy) == 1)
		{
			f2 = 0;
			ObjRender_SetScaleZ(FPEnemy, 0);
		}
		ObjRender_SetPosition(obj,round(ObjMove_GetX(FPEnemy)),round(ObjMove_GetY(FPEnemy) + movecos),1);
		ObjSprite2D_SetSourceRect(obj, x_min + offsetX*rowCol[0], y_min + offsetY*rowCol[1], x_max + offsetX*rowCol[0], y_max + offsetY*rowCol[1]);
		yield;
	}
	Obj_Delete(obj);
}

task AnimateMurasa(FPEnemy)
{
	let rowColArray =
	[
		[0, 0], //0
		[1, 0], //1
		[2, 0], //2
		[3, 0], //3
		
		[0, 1], //4
		[1, 1], //5
		[2, 1], //6
		[3, 1], //7
		
		[0, 2], //8
		[1, 2], //9
		[2, 2], //10
		
		[0, 3], //11
		[1, 3], //12
		[2, 3]  //13
	];
	
	let rowCol = rowColArray[0];
	
	let f = 0;
	let f2 = 0;
	let f3 = 0;
	let f4 = 0;
	let f5 = 0;
	let frame = 0;
	let movecos = 0;
	let moved = 0;
	
	let x_min = 0;
	let y_min = 0;
	let x_max = 64;
	let y_max = 98;
	
	let offsetX = 64;
	let offsetY = 98;
	
	let xFix = 0;
	
	let spriteRow = 0;
	let spriteCol = 0;
	
	let fpsA = 10;
	let fpsB = 3;
	let fpsC = 7;
	
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(obj, img_enm_murasa00);
	Obj_SetRenderPriority(obj, 0.41);
	ObjSprite2D_SetSourceRect(obj, x_min, y_min, x_max, y_max);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetScaleXYZ(obj, 1, 1, 1);
	
	while(!Obj_IsDeleted(FPEnemy))
	{
		if(ObjMove_GetSpeed(FPEnemy) == 0)
		{
			if(moved == 1) //Reverse move anim to idle
			{
				xFix = 0;
				offsetX = 64;
				x_max = 64;
				if(f3 >= 0 && f3 < 1*fpsB)     {rowCol = rowColArray[7];}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){rowCol = rowColArray[6];}
				if(f3 >= 2*fpsB && f3 < 3*fpsB){rowCol = rowColArray[5];}
				if(f3 >= 3*fpsB && f3 < 4*fpsB){rowCol = rowColArray[4];}
				if(f3 == 4*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 2) //Reverse move anim to idle
			{
				offsetX = 64;
				x_max = 64;
				if(f3 >= 0*fpsB && f3 < 1*fpsB){rowCol = rowColArray[7];}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){rowCol = rowColArray[6];}
				if(f3 >= 2*fpsB && f3 < 3*fpsB){rowCol = rowColArray[5];}
				if(f3 >= 3*fpsB && f3 < 4*fpsB){rowCol = rowColArray[4];}
				if(f3 == 4*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 0) //Idle animation loops
			{
				if(useAtkAnim == 1) //Idle attack anim
				{
					ObjRender_SetScaleXYZ(obj, 1, 1, 1);
					xFix = -8;
					offsetX = 80;
					x_max = 80;
					if(f5 >= 0*fpsC && f5 < 1*fpsC){rowCol = rowColArray[8];}
					if(f5 >= 1*fpsC && f5 < 2*fpsC){rowCol = rowColArray[9];}
					if(f5 >= 2*fpsC && f5 < 3*fpsC){rowCol = rowColArray[10];}
					if(f5 >= 3*fpsC && f5 < 5*fpsC){rowCol = rowColArray[11];}
					if(f5 >= 3*fpsC && f5 < 5*fpsC){rowCol = rowColArray[12];}
					if(f5 >= 3*fpsC && f5 < 5*fpsC){rowCol = rowColArray[13];}
					//if(f >= 5*fpsA){f = 0;}
					f5++;
				}
				else //Idle
				{
					//ObjRender_SetScaleXYZ(obj, 1, 1, 1);
					xFix = 0;
					offsetX = 64;
					x_max = 64;
					if(f >= 0 && f < 1*fpsA)     {rowCol = rowColArray[0];}
					if(f >= 1*fpsA && f < 2*fpsA){rowCol = rowColArray[1];}
					if(f >= 2*fpsA && f < 3*fpsA){rowCol = rowColArray[2];}
					if(f >= 3*fpsA && f < 4*fpsA){rowCol = rowColArray[3];}
					if(f >= 4*fpsA){f = 0;}
					f++;
					f5 = 0;
					movecos = cos(f4*2)*7;
				}
				f2 = 0;
				f3 = 0;
				f4++;
				
			}
		}
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) > 0) //Moving right
		{
			ObjRender_SetScaleXYZ(obj, -1, 1, 1);
			xFix = 0;
			offsetX = 64;
			x_max = 64;
			if(f2 >= 0 && f2 < 1*fpsB)     {rowCol = rowColArray[4];}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){rowCol = rowColArray[5];}
			if(f2 >= 2*fpsB && f2 < 3*fpsB){rowCol = rowColArray[6];}
			if(f2 >= 3*fpsB && f2 < 4*fpsB){rowCol = rowColArray[7];}
			f = 0;
			f2++;
			f3 = 0;
			moved = 1;
			f4 = 0;
			f5 = 0;
			movecos = cos(f4*2)*7;
		}
		
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) < 0) //Moving left
		{
			ObjRender_SetScaleXYZ(obj, 1, 1, 1);
			xFix = 0;
			offsetX = 64;
			x_max = 64;
			if(f2 >= 0 && f2 < 1*fpsB)     {rowCol = rowColArray[4];}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){rowCol = rowColArray[5];}
			if(f2 >= 2*fpsB && f2 < 3*fpsB){rowCol = rowColArray[6];}
			if(f2 >= 3*fpsB && f2 < 4*fpsB){rowCol = rowColArray[7];}
			f = 0;
			f2++;
			f3 = 0;
			moved = 2;
			f4 = 0;
			f5 = 0;
			movecos = cos(f4*2)*7;
		}
		
		if(ObjRender_GetScaleZ(FPEnemy) == 1)
		{
			f2 = 0;
			ObjRender_SetScaleZ(FPEnemy, 0);
		}
		ObjRender_SetPosition(obj,round(ObjMove_GetX(FPEnemy)) + xFix,round(ObjMove_GetY(FPEnemy) + movecos),1);
		ObjSprite2D_SetSourceRect(obj, x_min + offsetX*rowCol[0], y_min + offsetY*rowCol[1], x_max + offsetX*rowCol[0], y_max + offsetY*rowCol[1]);
		ObjSprite2D_SetDestCenter(obj);
		yield;
	}
	Obj_Delete(obj);
}

task AnimateShou(FPEnemy)
{
	let rowColArray =
	[
		[0, 0], //0
		[1, 0], //1
		[2, 0], //2
		[3, 0], //3
		
		[0, 1], //4
		[1, 1], //5
		[2, 1], //6
		[3, 1], //7
		
		[0, 2], //8
		[1, 2], //9
		[2, 2], //10
		[3, 2], //11
		
		[0, 3], //12
		[1, 3], //13
		[2, 3]  //14
	];
	
	let rowCol = rowColArray[0];
	
	let rectOverride = false;
	
	let f = 0;
	let f2 = 0;
	let f3 = 0;
	let f4 = 0;
	let f5 = 0;
	let frame = 0;
	let movecos = 0;
	let moved = 0;
	
	let x_min = 0;
	let y_min = 0;
	let x_max = 64;
	let y_max = 112;
	
	let offsetX = 64;
	let offsetY = 112;
	
	let xFix = 0;
	
	let spriteRow = 0;
	let spriteCol = 0;
	
	let fpsA = 10;
	let fpsB = 3;
	let fpsC = 5;
	
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(obj, img_enm_shou00);
	Obj_SetRenderPriority(obj, 0.41);
	ObjSprite2D_SetSourceRect(obj, x_min, y_min, x_max, y_max);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetScaleXYZ(obj, 1, 1, 1);
	
	while(!Obj_IsDeleted(FPEnemy))
	{
		rectOverride = false;
		if(ObjMove_GetSpeed(FPEnemy) == 0)
		{
			if(moved == 1) //Reverse move anim to idle
			{
				if(f3 >= 0 && f3 < 1*fpsB)     {rowCol = rowColArray[7];}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){rowCol = rowColArray[6];}
				if(f3 >= 2*fpsB && f3 < 3*fpsB){rowCol = rowColArray[5];}
				if(f3 >= 3*fpsB && f3 < 4*fpsB){rowCol = rowColArray[4];}
				if(f3 == 4*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 2) //Reverse move anim to idle
			{
				offsetX = 64;
				x_max = 64;
				if(f3 >= 0*fpsB && f3 < 1*fpsB){rowCol = rowColArray[7];}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){rowCol = rowColArray[6];}
				if(f3 >= 2*fpsB && f3 < 3*fpsB){rowCol = rowColArray[5];}
				if(f3 >= 3*fpsB && f3 < 4*fpsB){rowCol = rowColArray[4];}
				if(f3 == 4*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 0) //Idle animation loops
			{
				if(useAtkAnim == 1) //Idle attack anim
				{
					ObjRender_SetScaleXYZ(obj, 1, 1, 1);
					if(f5 >= 0*fpsC && f5 < 1*fpsC){rowCol = rowColArray[8];}
					if(f5 >= 1*fpsC && f5 < 2*fpsC){rowCol = rowColArray[9];}
					if(f5 >= 2*fpsC && f5 < 3*fpsC){rowCol = rowColArray[10];}
					if(f5 >= 3*fpsC && f5 < 4*fpsC){rowCol = rowColArray[11];}
					if(f5 >= 4*fpsC && f5 < 5*fpsC){rowCol = rowColArray[12];}
					
					if(f5 >= 5*fpsC && f5 < 6*fpsC)
					{
						rectOverride = true;
						ObjSprite2D_SetSourceRect(obj, 64, 336, 160, 448);
						ObjSprite2D_SetDestCenter(obj);
					}
					if(f5 >= 6*fpsC && f5 < 7*fpsC)
					{
						rectOverride = true;
						ObjSprite2D_SetSourceRect(obj, 160, 336, 256, 448);
						ObjSprite2D_SetDestCenter(obj);
					}
					
					if(f5 >= 7*fpsC){f5 = 5 * fpsC; rectOverride = true;}
					f5++;
				}
				else //Idle
				{
					//ObjRender_SetScaleXYZ(obj, 1, 1, 1);
					if(f >= 0 && f < 1*fpsA)     {rowCol = rowColArray[0];}
					if(f >= 1*fpsA && f < 2*fpsA){rowCol = rowColArray[1];}
					if(f >= 2*fpsA && f < 3*fpsA){rowCol = rowColArray[2];}
					if(f >= 3*fpsA && f < 4*fpsA){rowCol = rowColArray[1];}
					if(f >= 4*fpsA){f = 0;}
					f++;
					f5 = 0;
					movecos = cos(f4*2)*7;
				}
				f2 = 0;
				f3 = 0;
				f4++;
				
			}
		}
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) > 0) //Moving right
		{
			ObjRender_SetScaleXYZ(obj, -1, 1, 1);
			if(f2 >= 0 && f2 < 1*fpsB)     {rowCol = rowColArray[4];}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){rowCol = rowColArray[5];}
			if(f2 >= 2*fpsB && f2 < 3*fpsB){rowCol = rowColArray[6];}
			if(f2 >= 3*fpsB && f2 < 4*fpsB){rowCol = rowColArray[7];}
			f = 0;
			f2++;
			f3 = 0;
			moved = 1;
			f4 = 0;
			f5 = 0;
			movecos = cos(f4*2)*7;
		}
		
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) < 0) //Moving left
		{
			ObjRender_SetScaleXYZ(obj, 1, 1, 1);
			if(f2 >= 0 && f2 < 1*fpsB)     {rowCol = rowColArray[4];}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){rowCol = rowColArray[5];}
			if(f2 >= 2*fpsB && f2 < 3*fpsB){rowCol = rowColArray[6];}
			if(f2 >= 3*fpsB && f2 < 4*fpsB){rowCol = rowColArray[7];}
			f = 0;
			f2++;
			f3 = 0;
			moved = 2;
			f4 = 0;
			f5 = 0;
			movecos = cos(f4*2)*7;
		}
		
		if(ObjRender_GetScaleZ(FPEnemy) == 1)
		{
			f2 = 0;
			ObjRender_SetScaleZ(FPEnemy, 0);
		}
		ObjRender_SetPosition(obj,round(ObjMove_GetX(FPEnemy)) + xFix,round(ObjMove_GetY(FPEnemy) + movecos),1);
		if(!rectOverride)
		{
			ObjSprite2D_SetSourceRect(obj, x_min + offsetX*rowCol[0], y_min + offsetY*rowCol[1], x_max + offsetX*rowCol[0], y_max + offsetY*rowCol[1]);
			ObjSprite2D_SetDestCenter(obj);
		}
		yield;
	}
	Obj_Delete(obj);
}

task AnimateByakuren(FPEnemy)
{
	task DoLotus(FPEnemy)
	{
		let objB = ObjPrim_Create(OBJ_SPRITE_2D); //Part B
		ObjPrim_SetTexture(objB, img_enm_byakuren02);
		Obj_SetRenderPriorityI(objB, 39);
		ObjSprite2D_SetSourceRect(objB, 0, 0, 256, 256);
		ObjSprite2D_SetDestCenter(objB);
		ObjRender_SetScaleXYZ(objB, 1, 1, 1);
		
		let objA = ObjPrim_Create(OBJ_SPRITE_2D); //Part A
		ObjPrim_SetTexture(objA, img_enm_byakuren01);
		Obj_SetRenderPriorityI(objA, 40);
		ObjSprite2D_SetSourceRect(objA, 0, 0, 384, 256);
		ObjSprite2D_SetDestCenter(objA);
		ObjRender_SetScaleXYZ(objA, 1, 1, 1);
		
		let objIrisA = ObjPrim_Create(OBJ_SPRITE_2D);
		ObjPrim_SetTexture(objIrisA, img_enm_byakuren01);
		Obj_SetRenderPriorityI(objIrisA, 40);
		ObjSprite2D_SetSourceRect(objIrisA, 384, 160, 416, 192);
		ObjSprite2D_SetDestRect(objIrisA, -14.5, -14.5, 15.5, 15.5);
		byakuren_lotusEyeA = ObjEnemy_Create(OBJ_ENEMY);
		ObjEnemy_Regist(byakuren_lotusEyeA);
		Obj_SetRenderPriorityI(byakuren_lotusEyeA, 40);
		ObjMove_SetPosition(byakuren_lotusEyeA, ObjMove_GetX(FPEnemy) - 64, ObjMove_GetY(FPEnemy) - 80);
		ObjPrim_SetTexture(byakuren_lotusEyeA, img_enm_byakuren01);
		ObjSprite2D_SetSourceRect(byakuren_lotusEyeA, 384, 80, 464, 160);
		ObjSprite2D_SetDestCenter(byakuren_lotusEyeA);
		
		let objIrisB = ObjPrim_Create(OBJ_SPRITE_2D);
		ObjPrim_SetTexture(objIrisB, img_enm_byakuren01);
		Obj_SetRenderPriorityI(objIrisB, 40);
		ObjSprite2D_SetSourceRect(objIrisB, 384, 160, 416, 192);
		ObjSprite2D_SetDestRect(objIrisB, -14.5, -14.5, 15.5, 15.5);
		byakuren_lotusEyeB = ObjEnemy_Create(OBJ_ENEMY);
		ObjEnemy_Regist(byakuren_lotusEyeB);
		Obj_SetRenderPriorityI(byakuren_lotusEyeB, 40);
		ObjMove_SetPosition(byakuren_lotusEyeB, ObjMove_GetX(FPEnemy) + 64, ObjMove_GetY(FPEnemy) - 80);
		ObjPrim_SetTexture(byakuren_lotusEyeB, img_enm_byakuren01);
		ObjSprite2D_SetSourceRect(byakuren_lotusEyeB, 384, 80, 464, 160);
		ObjSprite2D_SetDestCenter(byakuren_lotusEyeB);
		
		let objIrisC = ObjPrim_Create(OBJ_SPRITE_2D);
		ObjPrim_SetTexture(objIrisC, img_enm_byakuren01);
		Obj_SetRenderPriorityI(objIrisC, 40);
		ObjSprite2D_SetSourceRect(objIrisC, 384, 160, 416, 192);
		ObjSprite2D_SetDestRect(objIrisC, -14.5, -14.5, 15.5, 15.5);
		byakuren_lotusEyeC = ObjEnemy_Create(OBJ_ENEMY);
		ObjEnemy_Regist(byakuren_lotusEyeC);
		Obj_SetRenderPriorityI(byakuren_lotusEyeC, 40);
		ObjMove_SetPosition(byakuren_lotusEyeC, ObjMove_GetX(FPEnemy) + 64, ObjMove_GetY(FPEnemy) - 80);
		ObjPrim_SetTexture(byakuren_lotusEyeC, img_enm_byakuren01);
		ObjSprite2D_SetSourceRect(byakuren_lotusEyeC, 384, 0, 464, 80);
		ObjSprite2D_SetDestCenter(byakuren_lotusEyeC);
		
		let objIrisD = ObjPrim_Create(OBJ_SPRITE_2D);
		ObjPrim_SetTexture(objIrisD, img_enm_byakuren01);
		Obj_SetRenderPriorityI(objIrisD, 40);
		ObjSprite2D_SetSourceRect(objIrisD, 384, 160, 416, 192);
		ObjSprite2D_SetDestRect(objIrisD, -14.5, -14.5, 15.5, 15.5);
		byakuren_lotusEyeD = ObjEnemy_Create(OBJ_ENEMY);
		ObjEnemy_Regist(byakuren_lotusEyeD);
		Obj_SetRenderPriorityI(byakuren_lotusEyeD, 40);
		ObjMove_SetPosition(byakuren_lotusEyeD, ObjMove_GetX(FPEnemy) - 64, ObjMove_GetY(FPEnemy) - 80);
		ObjPrim_SetTexture(byakuren_lotusEyeD, img_enm_byakuren01);
		ObjSprite2D_SetSourceRect(byakuren_lotusEyeD, 384, 0, 464, 80);
		ObjSprite2D_SetDestCenter(byakuren_lotusEyeD);
		
		let pFrame = 0;
		
		let pScaleA = 1;
		let pScaleB = 1;
		
		let pDifference = 0;
		//let pGoal = 0.5;
		let pActual = 2;
		
		let pMaxSpeed = 1;
		let pSpeed = 0;
		let pDistance = 0;
		let pGoal = 0.05;
		let pWeight = 16;
		
		let eyeCos = 0;
		
		while(byakuren_useLotus)
		{
			if(pFrame == 45)
			{
				pGoal = -pGoal;
				pDistance = pGoal;
				pFrame = -1;
			}
			
			pSpeed = pDistance / pWeight;
			if(pSpeed > pMaxSpeed)
			{
				pSpeed = pMaxSpeed;
			}
			pDistance -= pSpeed;
			pScaleA += pSpeed;
			pScaleB -= pSpeed*1.5;
			
			ObjRender_SetPosition(objA, ObjMove_GetX(FPEnemy), ObjMove_GetY(FPEnemy) + movecos, 0); // + movecos
			ObjRender_SetPosition(objB, ObjMove_GetX(FPEnemy), ObjMove_GetY(FPEnemy) + movecos, 0); // + movecos
			
			ObjRender_SetPosition(objIrisA, (ObjMove_GetX(FPEnemy) - 64) + (6 * cos(byakuren_lotusEyeAngleA)), ((ObjMove_GetY(FPEnemy) - 80) + movecos) + (6 * sin(byakuren_lotusEyeAngleA)), 0);
			ObjRender_SetPosition(objIrisB, (ObjMove_GetX(FPEnemy) + 64) + (6 * cos(byakuren_lotusEyeAngleB)), ((ObjMove_GetY(FPEnemy) - 80) + movecos) + (6 * sin(byakuren_lotusEyeAngleB)), 0);
			ObjRender_SetPosition(objIrisC, (ObjMove_GetX(FPEnemy) - 112) + (6 * cos(byakuren_lotusEyeAngleC)), ((ObjMove_GetY(FPEnemy) + 54) + movecos) + (6 * sin(byakuren_lotusEyeAngleC)), 0);
			ObjRender_SetPosition(objIrisD, (ObjMove_GetX(FPEnemy) + 112) + (6 * cos(byakuren_lotusEyeAngleD)), ((ObjMove_GetY(FPEnemy) + 54) + movecos) + (6 * sin(byakuren_lotusEyeAngleD)), 0);
			
			ObjMove_SetPosition(byakuren_lotusEyeA, ObjMove_GetX(FPEnemy) - 64, (ObjMove_GetY(FPEnemy) - 80) + movecos);
			ObjRender_SetAngleZ(byakuren_lotusEyeA, cos(eyeCos * 3.25) * 3.5);
			ObjMove_SetPosition(byakuren_lotusEyeB, ObjMove_GetX(FPEnemy) + 64, (ObjMove_GetY(FPEnemy) - 80) + movecos);
			ObjRender_SetAngleZ(byakuren_lotusEyeB, -cos(eyeCos * 3.25) * 3.5);
			ObjMove_SetPosition(byakuren_lotusEyeC, ObjMove_GetX(FPEnemy) - 112, (ObjMove_GetY(FPEnemy) + 54) + movecos);
			ObjRender_SetAngleZ(byakuren_lotusEyeC, cos(eyeCos * 3.25) * 3.5);
			ObjMove_SetPosition(byakuren_lotusEyeD, ObjMove_GetX(FPEnemy) + 112, (ObjMove_GetY(FPEnemy) + 54) + movecos);
			ObjRender_SetAngleZ(byakuren_lotusEyeD, -cos(eyeCos * 3.25) * 3.5);
			
			ObjRender_SetScaleXYZ(objA, pScaleA, 1, 1);
			ObjRender_SetScaleXYZ(objB, pScaleB, pScaleB, 1);
			
			byakuren_lotusEyeAngleA = GetAngleToPlayer(byakuren_lotusEyeA);
			byakuren_lotusEyeAngleB = GetAngleToPlayer(byakuren_lotusEyeB);
			byakuren_lotusEyeAngleC = GetAngleToPlayer(byakuren_lotusEyeC);
			byakuren_lotusEyeAngleD = GetAngleToPlayer(byakuren_lotusEyeD);
			pFrame++;
			eyeCos++;
			yield;
		}
		isLotus = false;
	}
	
	let rowColArray =
	[
		[0, 0], //0
		[1, 0], //1
		[2, 0], //2
		[3, 0], //3
		
		[0, 1], //4
		[1, 1], //5
		[2, 1], //6
		[3, 1], //7
		
		[0, 2], //8
		[1, 2], //9
		[2, 2], //10
		[3, 2], //11
		
		[0, 3], //12
		[1, 3], //13
		[2, 3], //14
		[3, 3]  //15
	];
	
	let rowCol = rowColArray[0];
	
	let f = 0;
	let f2 = 0;
	let f3 = 0;
	let f4 = 0;
	let f5 = 0;
	let frame = 0;
	let movecos = 0;
	let moved = 0;
	
	let x_min = 0;
	let y_min = 0;
	let x_max = 96;
	let y_max = 128;
	
	let offsetX = 96;
	let offsetY = 128;
	
	let spriteRow = 0;
	let spriteCol = 0;
	
	let fpsA = 10;
	let fpsB = 3;
	let fpsC = 7;
	
	let isLotus = false;
	
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(obj, img_enm_byakuren00);
	Obj_SetRenderPriority(obj, 0.41);
	ObjSprite2D_SetSourceRect(obj, x_min, y_min, x_max, y_max);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetScaleXYZ(obj, 1, 1, 1);
	
	while(!Obj_IsDeleted(FPEnemy))
	{
		if(byakuren_useLotus && !isLotus)
		{
			isLotus = true;
			DoLotus(FPEnemy);
		}
		
		if(ObjMove_GetSpeed(FPEnemy) == 0)
		{
			if(moved == 1) //Reverse move anim to idle
			{
				if(f3 >= 0 && f3 < 1*fpsB)     {rowCol = rowColArray[7];}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){rowCol = rowColArray[6];}
				if(f3 >= 2*fpsB && f3 < 3*fpsB){rowCol = rowColArray[5];}
				if(f3 >= 3*fpsB && f3 < 4*fpsB){rowCol = rowColArray[4];}
				if(f3 == 4*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 2) //Reverse move anim to idle
			{
				if(f3 >= 0*fpsB && f3 < 1*fpsB){rowCol = rowColArray[11];}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){rowCol = rowColArray[10];}
				if(f3 >= 2*fpsB && f3 < 3*fpsB){rowCol = rowColArray[9];}
				if(f3 >= 3*fpsB && f3 < 4*fpsB){rowCol = rowColArray[8];}
				if(f3 == 4*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 0) //Idle animation loops
			{
				if(useAtkAnim == 1) //Idle attack anim
				{
					ObjRender_SetScaleXYZ(obj, 1, 1, 1);
					if(f5 >= 0*fpsC && f5 < 1*fpsC){rowCol = rowColArray[12];}
					if(f5 >= 1*fpsC && f5 < 2*fpsC){rowCol = rowColArray[13];}
					if(f5 >= 2*fpsC && f5 < 3*fpsC){rowCol = rowColArray[14];}
					if(f5 >= 3*fpsC && f5 < 4*fpsC){rowCol = rowColArray[15];}
					if(f5 >= 4*fpsC){f5 = 2*fpsC;}
					f5++;
				}
				else //Idle
				{
					//ObjRender_SetScaleXYZ(obj, 1, 1, 1);
					if(f >= 0 && f < 1*fpsA)     {rowCol = rowColArray[0];}
					if(f >= 1*fpsA && f < 2*fpsA){rowCol = rowColArray[1];}
					if(f >= 2*fpsA && f < 3*fpsA){rowCol = rowColArray[2];}
					if(f >= 3*fpsA && f < 4*fpsA){rowCol = rowColArray[3];}
					if(f >= 4*fpsA){f = 0;}
					f++;
					f5 = 0;
				}
				f2 = 0;
				f3 = 0;
				f4++;
				movecos = cos(f4*2)*7;
			}
		}
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) > 0) //Moving right
		{
			ObjRender_SetScaleXYZ(obj, 1, 1, 1);
			if(f2 >= 0 && f2 < 1*fpsB)     {rowCol = rowColArray[4];}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){rowCol = rowColArray[5];}
			if(f2 >= 2*fpsB && f2 < 3*fpsB){rowCol = rowColArray[6];}
			if(f2 >= 3*fpsB && f2 < 4*fpsB){rowCol = rowColArray[7];}
			f = 0;
			f2++;
			f3 = 0;
			moved = 1;
			f4 = 0;
			f5 = 0;
			movecos = cos(f4*2)*7;
		}
		
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) < 0) //Moving left
		{
			ObjRender_SetScaleXYZ(obj, 1, 1, 1);
			if(f2 >= 0 && f2 < 1*fpsB)     {rowCol = rowColArray[8];}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){rowCol = rowColArray[9];}
			if(f2 >= 2*fpsB && f2 < 3*fpsB){rowCol = rowColArray[10];}
			if(f2 >= 3*fpsB && f2 < 4*fpsB){rowCol = rowColArray[11];}
			f = 0;
			f2++;
			f3 = 0;
			moved = 2;
			f4 = 0;
			f5 = 0;
			movecos = cos(f4*2)*7;
		}
		
		if(ObjRender_GetScaleZ(FPEnemy) == 1)
		{
			f2 = 0;
			ObjRender_SetScaleZ(FPEnemy, 0);
		}
		ObjRender_SetPosition(obj,round(ObjMove_GetX(FPEnemy)),round(ObjMove_GetY(FPEnemy) + movecos),1);
		ObjSprite2D_SetSourceRect(obj, x_min + offsetX*rowCol[0], y_min + offsetY*rowCol[1], x_max + offsetX*rowCol[0], y_max + offsetY*rowCol[1]);
		yield;
	}
	Obj_Delete(obj);
}

task AnimateNue(FPEnemy)
{
	let rowColArray =
	[
		[0, 0], //0
		[1, 0], //1
		[2, 0], //2
		[3, 0], //3
		
		[0, 1], //4
		[1, 1], //5
		[2, 1], //6
		[3, 1], //7
		
		[0, 2], //8
		[1, 2], //9
		[2, 2], //10
		[3, 2],  //11
		
		[0, 3], //12
		[1, 3], //13
		[2, 3], //14
		[3, 3], //15
		[4, 3]  //16
	];
	
	let rowCol = rowColArray[0];
	
	let f = 0;
	let f2 = 0;
	let f3 = 0;
	let f4 = 0;
	let f5 = 0;
	let frame = 0;
	let movecos = 0;
	let moved = 0;
	
	let x_min = 0;
	let y_min = 0;
	let x_max = 96;
	let y_max = 112;
	
	let offsetX = 96;
	let offsetY = 112;
	
	let spriteRow = 0;
	let spriteCol = 0;
	
	let fpsA = 10;
	let fpsB = 3;
	let fpsC = 7;
	
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(obj, img_enm_nue00);
	Obj_SetRenderPriority(obj, 0.41);
	ObjSprite2D_SetSourceRect(obj, x_min, y_min, x_max, y_max);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetScaleXYZ(obj, 1, 1, 1);
	
	while(!Obj_IsDeleted(FPEnemy))
	{
		if(ObjMove_GetSpeed(FPEnemy) == 0)
		{
			if(moved == 1) //Reverse move anim to idle
			{
				if(f3 >= 0 && f3 < 1*fpsB)     {rowCol = rowColArray[11];}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){rowCol = rowColArray[10];}
				if(f3 >= 2*fpsB && f3 < 3*fpsB){rowCol = rowColArray[9];}
				if(f3 >= 3*fpsB && f3 < 4*fpsB){rowCol = rowColArray[8];}
				if(f3 == 4*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 2) //Reverse move anim to idle
			{
				if(f3 >= 0*fpsB && f3 < 1*fpsB){rowCol = rowColArray[7];}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){rowCol = rowColArray[6];}
				if(f3 >= 2*fpsB && f3 < 3*fpsB){rowCol = rowColArray[5];}
				if(f3 >= 3*fpsB && f3 < 4*fpsB){rowCol = rowColArray[4];}
				if(f3 == 4*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 0) //Idle animation loops
			{
				if(useAtkAnim == 1) //Idle attack anim
				{
					ObjRender_SetScaleXYZ(obj, 1, 1, 1);
					if(f5 >= 0*fpsC && f5 < 1*fpsC){rowCol = rowColArray[12];}
					if(f5 >= 1*fpsC && f5 < 2*fpsC){rowCol = rowColArray[13];}
					if(f5 >= 2*fpsC && f5 < 3*fpsC){rowCol = rowColArray[14];}
					if(f5 >= 3*fpsC && f5 < 4*fpsC){rowCol = rowColArray[15];}
					if(f5 >= 4*fpsC && f5 < 5*fpsC){rowCol = rowColArray[16];}
					if(f >= 5*fpsA){f = 3*fpsC;}
					f5++;
				}
				else //Idle
				{
					//ObjRender_SetScaleXYZ(obj, 1, 1, 1);
					if(f >= 0 && f < 1*fpsA)     {rowCol = rowColArray[0];}
					if(f >= 1*fpsA && f < 2*fpsA){rowCol = rowColArray[1];}
					if(f >= 2*fpsA && f < 3*fpsA){rowCol = rowColArray[2];}
					if(f >= 3*fpsA && f < 4*fpsA){rowCol = rowColArray[3];}
					if(f >= 4*fpsA){f = 0;}
					f++;
					f5 = 0;
				}
				f2 = 0;
				f3 = 0;
				f4++;
				movecos = cos(f4*2)*7;
			}
		}
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) > 0) //Moving right
		{
			//ObjRender_SetScaleXYZ(obj, 1, 1, 1);
			if(f2 >= 0 && f2 < 1*fpsB)     {rowCol = rowColArray[8];}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){rowCol = rowColArray[9];}
			if(f2 >= 2*fpsB && f2 < 3*fpsB){rowCol = rowColArray[10];}
			if(f2 >= 3*fpsB && f2 < 4*fpsB){rowCol = rowColArray[11];}
			f = 0;
			f2++;
			f3 = 0;
			moved = 1;
			f4 = 0;
			f5 = 0;
			movecos = cos(f4*2)*7;
		}
		
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) < 0) //Moving left
		{
			//ObjRender_SetScaleXYZ(obj, -1, 1, 1);
			if(f2 >= 0 && f2 < 1*fpsB)     {rowCol = rowColArray[4];}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){rowCol = rowColArray[5];}
			if(f2 >= 2*fpsB && f2 < 3*fpsB){rowCol = rowColArray[6];}
			if(f2 >= 3*fpsB && f2 < 4*fpsB){rowCol = rowColArray[7];}
			f = 0;
			f2++;
			f3 = 0;
			moved = 2;
			f4 = 0;
			f5 = 0;
			movecos = cos(f4*2)*7;
		}
		
		if(ObjRender_GetScaleZ(FPEnemy) == 1)
		{
			f2 = 0;
			ObjRender_SetScaleZ(FPEnemy, 0);
		}
		ObjRender_SetPosition(obj,round(ObjMove_GetX(FPEnemy)),round(ObjMove_GetY(FPEnemy) + movecos),1);
		ObjSprite2D_SetSourceRect(obj, x_min + offsetX*rowCol[0], y_min + offsetY*rowCol[1], x_max + offsetX*rowCol[0], y_max + offsetY*rowCol[1]);
		yield;
	}
	Obj_Delete(obj);
}



task AnimateYukari(FPEnemy)
{
	let f = 0;
	let f2 = 0;
	let f3 = 0;
	let f4 = 0;
	let frame = 0;
	let movecos = 0;
	let moved = 0;
	
	let x_min = 0;
	let y_min = 192;
	let x_max = 80;
	let y_max = 288;
	
	let offsetX = 80;
	let offsetY = 96;
	
	let spriteRow = 0;
	let spriteCol = 0;
	
	let fpsA = 8;
	let fpsB = 4;
	
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(obj, img_enm_yukari_ran);
	Obj_SetRenderPriority(obj, 0.41);
	ObjSprite2D_SetSourceRect(obj, x_min, y_min, x_max, y_max);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetScaleXYZ(obj, 1, 1, 1);
	
	while(!Obj_IsDeleted(FPEnemy))
	{
		if(ObjMove_GetSpeed(FPEnemy) == 0)
		{
			if(moved == 1)
			{
				if(f3 >= 0 && f3 < 1*fpsB){spriteCol = 2; spriteRow = 1;}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){spriteCol = 1; spriteRow = 1;}
				if(f3 >= 2*fpsB && f3 < 3*fpsB){spriteCol = 0; spriteRow = 1;}
				if(f3 == 3*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 2)
			{
				if(f3 >= 0 && f3 < 1*fpsB){spriteCol = 2; spriteRow = 2;}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){spriteCol = 1; spriteRow = 2;}
				if(f3 >= 2*fpsB && f3 < 3*fpsB){spriteCol = 0; spriteRow = 2;}
				if(f3 == 3*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 0)
			{
				if(useAtkAnim == 1)
				{
					ObjRender_SetScaleXYZ(obj, 1, 1, 1);
					if(f >= 0*fpsA && f < 1*fpsA){spriteCol = 1; spriteRow = 0;}
					if(f >= 1*fpsA && f < 2*fpsA){spriteCol = 2; spriteRow = 0;}
					if(f >= 2*fpsA){f = 0;}
					f++;
				}
				else
				{
					ObjRender_SetScaleXYZ(obj, 1, 1, 1);
					if(f >= 0 && f < 1*fpsA){spriteCol = 0; spriteRow = 0;}
					if(f >= 1*fpsA){f = 0;}
					f++;
				}
				f2 = 0;
				f3 = 0;
				f4++;
				movecos = cos(f4*2)*7;
			}
		}
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) > 0)
		{
			ObjRender_SetScaleXYZ(obj, 1, 1, 1);
			if(f2 >= 0 && f2 < 1*fpsB){spriteCol = 0; spriteRow = 1;}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){spriteCol = 1; spriteRow = 1;}
			if(f2 >= 2*fpsB && f2 < 3*fpsB){spriteCol = 2; spriteRow = 1;}
			f = 0;
			f2++;
			f3 = 0;
			moved = 1;
			f4 = 0;
			movecos = cos(f4*2)*7;
		}
		
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) < 0)
		{
			ObjRender_SetScaleXYZ(obj, 1, 1, 1);
			if(f2 >= 0 && f2 < 1*fpsB){spriteCol = 0; spriteRow = 2;}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){spriteCol = 1; spriteRow = 2;}
			if(f2 >= 2*fpsB && f2 < 3*fpsB){spriteCol = 2; spriteRow = 2;}
			f = 0;
			f2++;
			f3 = 0;
			moved = 2;
			f4 = 0;
			movecos = cos(f4*2)*7;
		}
		ObjRender_SetPosition(obj,round(ObjMove_GetX(FPEnemy)),round(ObjMove_GetY(FPEnemy) + movecos),1);
		ObjSprite2D_SetSourceRect(obj, x_min + offsetX*spriteCol, y_min + offsetY*spriteRow, x_max + offsetX*spriteCol, y_max + offsetY*spriteRow);
		yield;
	}
	Obj_Delete(obj);
}

task AnimateYuyuko(FPEnemy)
{
	let f = 0;
	let f2 = 0;
	let f3 = 0;
	let f4 = 0;
	let frame = 0;
	let fanscale = 0;
	let fanup = 0.03;
	let movecos = 0;
	let moved = 0;
	
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(obj, img_enm_yuyuko);
	Obj_SetRenderPriority(obj, 0.41);
	ObjSprite2D_SetSourceRect(obj, 0, 0, 48, 80);
	ObjSprite2D_SetDestRect(obj, 0, 0, 48, 80);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetScaleXYZ(obj, 1, 1, 1);
	
	let fan = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(fan, img_enm_yuyuko);
	ObjRender_SetBlendType(fan, BLEND_ADD_RGB);
	Obj_SetRenderPriority(fan, 0.41);
	ObjSprite2D_SetSourceRect(fan, 0, 256, 512, 512);
	ObjSprite2D_SetDestRect(fan, 0, 256, 512, 512);
	ObjSprite2D_SetDestCenter(fan);
	ObjRender_SetScaleXYZ(fan, 1, 0, 1);
	
	while(!Obj_IsDeleted(FPEnemy))
	{
		if(frame == 61 && yuyuko_UseFan == true)
		{
			PlaySE(se_boon01);
		}
		if(frame > 60 && frame <= 120 && yuyuko_UseFan == true)
		{
			fanscale += 0.001;
			ObjRender_SetScaleXYZ(fan, 1, fanscale, 1);
		}
		if(frame > 120 && fanscale < 1 && yuyuko_UseFan == true)
		{
			fanscale += fanup;
			fanup -= 0.00045;
			ObjRender_SetScaleXYZ(fan, 1, fanscale, 1);
		}
		if(fanscale > 1 && yuyuko_UseFan == true)
		{
			fanscale = 1;
			ObjRender_SetScaleXYZ(fan, 1, fanscale, 1);
		}
		if(ObjMove_GetSpeed(FPEnemy) == 0)
		{
			if(moved == 1)
			{
				if(f3 >= 0 && f3 < 4){ObjSprite2D_SetSourceRect(obj, 96, 80, 144, 160);}
				if(f3 >= 4 && f3 < 8){ObjSprite2D_SetSourceRect(obj, 48, 80, 96, 160);}
				if(f3 >= 8 && f3 < 12){ObjSprite2D_SetSourceRect(obj, 0, 80, 48, 160);}
				if(f3 == 12){moved = 0;}
				f3++;
			}
			if(moved == 2)
			{
				if(f3 >= 0 && f3 < 4){ObjSprite2D_SetSourceRect(obj, 96, 80, 144, 160);}
				if(f3 >= 4 && f3 < 8){ObjSprite2D_SetSourceRect(obj, 48, 80, 96, 160);}
				if(f3 >= 8 && f3 < 12){ObjSprite2D_SetSourceRect(obj, 0, 80, 48, 160);}
				if(f3 == 12){moved = 0;}
				f3++;
			}
			if(moved == 0)
			{
				ObjRender_SetScaleXYZ(FPEnemy, 1, 1, 1);
				if(useAtkAnim == 1)
				{
					if(f >= 0 && f < 6){ObjSprite2D_SetSourceRect(obj, 0, 160, 48, 240);}
					if(f >= 6 && f < 12){ObjSprite2D_SetSourceRect(obj, 48, 160, 96, 240);}
					if(f >= 12 && f < 18){ObjSprite2D_SetSourceRect(obj, 96, 160, 144, 240);}
					if(f >= 18 && f < 24){ObjSprite2D_SetSourceRect(obj, 144, 160, 192, 240);}
					if(f >= 24){f = 18;}
					f++;
				}
				else
				{
					if(f >= 0 && f < 6){ObjSprite2D_SetSourceRect(obj, 0, 0, 48, 80);}
					if(f >= 6 && f < 12){ObjSprite2D_SetSourceRect(obj, 48, 0, 96, 80);}
					if(f >= 12 && f < 18){ObjSprite2D_SetSourceRect(obj, 96, 0, 144, 80);}
					if(f >= 18 && f < 24){ObjSprite2D_SetSourceRect(obj, 144, 0, 192, 80);}
					if(f >= 24){f = 0;}
					f++;
				}
				f2 = 0;
				f3 = 0;
				f4++;
				movecos = cos(f4*2)*7;
			}
		}
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) > 0)
		{
			ObjRender_SetScaleXYZ(obj, 1, 1, 1);
			if(f2 >= 0 && f2 < 4){ObjSprite2D_SetSourceRect(obj, 0, 80, 48, 160);}
			if(f2 >= 4 && f2 < 8){ObjSprite2D_SetSourceRect(obj, 48, 80, 96, 160);}
			if(f2 >= 8 && f2 < 16){ObjSprite2D_SetSourceRect(obj, 96, 80, 144, 160);}
			f = 0;
			f2++;
			f3 = 0;
			moved = 1;
			f4 = 0;
			movecos = cos(f4*2)*7;
		}
		
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) < 0)
		{
			ObjRender_SetScaleXYZ(obj, -1, 1, 1);
			if(f2 >= 0 && f2 < 4){ObjSprite2D_SetSourceRect(obj, 0, 80, 48, 160);}
			if(f2 >= 4 && f2 < 8){ObjSprite2D_SetSourceRect(obj, 48, 80, 96, 160);}
			if(f2 >= 8 && f2 < 16){ObjSprite2D_SetSourceRect(obj, 96, 80, 144, 160);}
			f = 0;
			f2++;
			f3 = 0;
			moved = 2;
			f4 = 0;
			movecos = cos(f4*2)*7;
		}
		ObjRender_SetPosition(obj,round(ObjMove_GetX(FPEnemy)),round(ObjMove_GetY(FPEnemy) + movecos),1);
		ObjRender_SetPosition(fan,round(ObjMove_GetX(FPEnemy)),round(ObjMove_GetY(FPEnemy) + movecos),1);
		if(yuyuko_UseFan == true)
		{
			frame++;
		}
		yield;
	}
	Obj_Delete(obj);
	Obj_Delete(fan);
}

task AnimateSeiga(FPEnemy)
{
	let f = 0;
	let f2 = 0;
	let f3 = 0;
	let f4 = 0;
	let frame = 0;
	let movecos = 0;
	let moved = 0;
	
	let x_min = 0;
	let y_min = 0;
	let x_max = 80;
	let y_max = 80;
	
	let offsetX = 80;
	let offsetY = 80;
	
	let spriteRow = 0;
	let spriteCol = 0;
	
	let fpsA = 8;
	let fpsB = 4;
	
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(obj, img_enm_seiga);
	Obj_SetRenderPriority(obj, 0.41);
	ObjSprite2D_SetSourceRect(obj, x_min, y_min, x_max, y_max);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetScaleXYZ(obj, 1, 1, 1);
	
	while(!Obj_IsDeleted(FPEnemy))
	{
		if(ObjMove_GetSpeed(FPEnemy) == 0)
		{
			if(moved == 1)
			{
				if(f3 >= 0 && f3 < 1*fpsB){spriteCol = 2; spriteRow = 1;}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){spriteCol = 1; spriteRow = 1;}
				if(f3 >= 2*fpsB && f3 < 3*fpsB){spriteCol = 0; spriteRow = 1;}
				if(f3 == 3*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 2)
			{
				if(f3 >= 0*fpsB && f3 < 1*fpsB){spriteCol = 5; spriteRow = 1;}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){spriteCol = 4; spriteRow = 1;}
				if(f3 >= 2*fpsB && f3 < 3*fpsB){spriteCol = 3; spriteRow = 1;}
				if(f3 == 3*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 0)
			{
				if(useAtkAnim == 1)
				{
					if(f >= 0*fpsA && f < 1*fpsA){spriteCol = 0; spriteRow = 2;}
					if(f >= 1*fpsA && f < 2*fpsA){spriteCol = 1; spriteRow = 2;}
					if(f >= 2*fpsA && f < 3*fpsA){spriteCol = 2; spriteRow = 2;}
					if(f >= 3*fpsA && f < 4*fpsA){spriteCol = 1; spriteRow = 2;}
					if(f >= 4*fpsA){f = 0;}
					f++;
				}
				else
				{
					if(f >= 0 && f < 1*fpsA){spriteCol = 0; spriteRow = 0;}
					if(f >= 1*fpsA && f < 2*fpsA){spriteCol = 1; spriteRow = 0;}
					if(f >= 2*fpsA && f < 3*fpsA){spriteCol = 2; spriteRow = 0;}
					if(f >= 3*fpsA && f < 4*fpsA){spriteCol = 1; spriteRow = 0;}
					if(f >= 4*fpsA){f = 0;}
					f++;
				}
				f2 = 0;
				f3 = 0;
				f4++;
				movecos = cos(f4*2)*7;
			}
		}
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) > 0)
		{
			
			if(f2 >= 0 && f2 < 1*fpsB){spriteCol = 0; spriteRow = 1;}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){spriteCol = 1; spriteRow = 1;}
			if(f2 >= 2*fpsB && f2 < 3*fpsB){spriteCol = 2; spriteRow = 1;}
			f = 0;
			f2++;
			f3 = 0;
			moved = 1;
			f4 = 0;
			movecos = cos(f4*2)*7;
		}
		
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) < 0)
		{
			if(f2 >= 0 && f2 < 1*fpsB){spriteCol = 3; spriteRow = 1;}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){spriteCol = 4; spriteRow = 1;}
			if(f2 >= 2*fpsB && f2 < 3*fpsB){spriteCol = 5; spriteRow = 1;}
			f = 0;
			f2++;
			f3 = 0;
			moved = 2;
			f4 = 0;
			movecos = cos(f4*2)*7;
		}
		ObjRender_SetPosition(obj,round(ObjMove_GetX(FPEnemy)),round(ObjMove_GetY(FPEnemy) + movecos),1);
		ObjSprite2D_SetSourceRect(obj, x_min + offsetX*spriteCol, y_min + offsetY*spriteRow, x_max + offsetX*spriteCol, y_max + offsetY*spriteRow);
		yield;
	}
	Obj_Delete(obj);
}


task AnimateSanae_old(FPEnemy)
{
	let f = 0;
	let f2 = 0;
	let f3 = 0;
	let f4 = 0;
	let frame = 0;
	let movecos = 0;
	let moved = 0;
	
	let x_min = 0;
	let y_min = 0;
	let x_max = 64;
	let y_max = 64;
	
	let offsetX = 64;
	let offsetY = 64;
	
	let spriteRow = 0;
	let spriteCol = 0;
	
	let fpsA = 8;
	let fpsB = 4;
	
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(obj, img_enm_sanae);
	Obj_SetRenderPriority(obj, 0.41);
	ObjSprite2D_SetSourceRect(obj, x_min, y_min, x_max, y_max);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetScaleXYZ(obj, 1, 1, 1);
	
	while(!Obj_IsDeleted(FPEnemy))
	{
		if(ObjMove_GetSpeed(FPEnemy) == 0)
		{
			if(moved == 1)
			{
				if(f3 >= 0 && f3 < 1*fpsB){spriteCol = 3; spriteRow = 1;}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){spriteCol = 2; spriteRow = 1;}
				if(f3 >= 2*fpsB && f3 < 3*fpsB){spriteCol = 1; spriteRow = 1;}
				if(f3 >= 3*fpsB && f3 < 4*fpsB){spriteCol = 0; spriteRow = 1;}
				if(f3 == 4*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 2)
			{
				if(f3 >= 0*fpsB && f3 < 1*fpsB){spriteCol = 3; spriteRow = 1;}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){spriteCol = 2; spriteRow = 1;}
				if(f3 >= 2*fpsB && f3 < 3*fpsB){spriteCol = 1; spriteRow = 1;}
				if(f3 >= 3*fpsB && f3 < 4*fpsB){spriteCol = 0; spriteRow = 1;}
				if(f3 == 4*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 0)
			{
				if(useAtkAnim == 1)
				{
					ObjRender_SetScaleXYZ(obj, 1, 1, 1);
					if(f >= 0*fpsA && f < 1*fpsA){spriteCol = 0; spriteRow = 2;}
					if(f >= 1*fpsA && f < 2*fpsA){spriteCol = 1; spriteRow = 2;}
					if(f >= 2*fpsA && f < 3*fpsA){spriteCol = 2; spriteRow = 2;}
					if(f >= 3*fpsA && f < 4*fpsA){spriteCol = 3; spriteRow = 2;}
					if(f >= 4*fpsA){f = 0;}
					f++;
				}
				else
				{
					ObjRender_SetScaleXYZ(obj, 1, 1, 1);
					if(f >= 0 && f < 1*fpsA){spriteCol = 0; spriteRow = 0;}
					if(f >= 1*fpsA && f < 2*fpsA){spriteCol = 1; spriteRow = 0;}
					if(f >= 2*fpsA && f < 3*fpsA){spriteCol = 2; spriteRow = 0;}
					if(f >= 3*fpsA && f < 4*fpsA){spriteCol = 3; spriteRow = 0;}
					if(f >= 4*fpsA){f = 0;}
					f++;
				}
				f2 = 0;
				f3 = 0;
				f4++;
				movecos = cos(f4*2)*7;
			}
		}
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) > 0)
		{
			ObjRender_SetScaleXYZ(obj, 1, 1, 1);
			if(f2 >= 0 && f2 < 1*fpsB){spriteCol = 0; spriteRow = 1;}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){spriteCol = 1; spriteRow = 1;}
			if(f2 >= 2*fpsB && f2 < 3*fpsB){spriteCol = 2; spriteRow = 1;}
			if(f2 >= 3*fpsB && f2 < 4*fpsB){spriteCol = 3; spriteRow = 1;}
			f = 0;
			f2++;
			f3 = 0;
			moved = 1;
			f4 = 0;
			movecos = cos(f4*2)*7;
		}
		
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) < 0)
		{
			ObjRender_SetScaleXYZ(obj, -1, 1, 1);
			if(f2 >= 0 && f2 < 1*fpsB){spriteCol = 0; spriteRow = 1;}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){spriteCol = 1; spriteRow = 1;}
			if(f2 >= 2*fpsB && f2 < 3*fpsB){spriteCol = 2; spriteRow = 1;}
			if(f2 >= 3*fpsB && f2 < 4*fpsB){spriteCol = 3; spriteRow = 1;}
			f = 0;
			f2++;
			f3 = 0;
			moved = 2;
			f4 = 0;
			movecos = cos(f4*2)*7;
		}
		ObjRender_SetPosition(obj,round(ObjMove_GetX(FPEnemy)),round(ObjMove_GetY(FPEnemy) + movecos),1);
		ObjSprite2D_SetSourceRect(obj, x_min + offsetX*spriteCol, y_min + offsetY*spriteRow, x_max + offsetX*spriteCol, y_max + offsetY*spriteRow);
		yield;
	}
	Obj_Delete(obj);
}

task AnimateSuwako_old(FPEnemy)
{
	let f = 0;
	let f2 = 0;
	let f3 = 0;
	let f4 = 0;
	let frame = 0;
	let movecos = 0;
	let moved = 0;
	
	let x_min = 0;
	let y_min = 0;
	let x_max = 64;
	let y_max = 64;
	
	let offsetX = 64;
	let offsetY = 64;
	
	let spriteRow = 0;
	let spriteCol = 0;
	
	let fpsA = 8;
	let fpsB = 4;
	
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(obj, img_enm_suwako00);
	Obj_SetRenderPriority(obj, 0.41);
	ObjSprite2D_SetSourceRect(obj, x_min, y_min, x_max, y_max);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetScaleXYZ(obj, 1, 1, 1);
	
	while(!Obj_IsDeleted(FPEnemy))
	{
		if(ObjMove_GetSpeed(FPEnemy) == 0)
		{
			if(moved == 1)
			{
				if(f3 >= 0 && f3 < 1*fpsB){spriteCol = 3; spriteRow = 1;}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){spriteCol = 2; spriteRow = 1;}
				if(f3 >= 2*fpsB && f3 < 3*fpsB){spriteCol = 1; spriteRow = 1;}
				if(f3 >= 3*fpsB && f3 < 4*fpsB){spriteCol = 0; spriteRow = 1;}
				if(f3 == 4*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 2)
			{
				if(f3 >= 0*fpsB && f3 < 1*fpsB){spriteCol = 3; spriteRow = 1;}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){spriteCol = 2; spriteRow = 1;}
				if(f3 >= 2*fpsB && f3 < 3*fpsB){spriteCol = 1; spriteRow = 1;}
				if(f3 >= 3*fpsB && f3 < 4*fpsB){spriteCol = 0; spriteRow = 1;}
				if(f3 == 4*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 0)
			{
				if(useAtkAnim == 1)
				{
					ObjRender_SetScaleXYZ(obj, 1, 1, 1);
					if(f >= 0*fpsA && f < 1*fpsA){spriteCol = 0; spriteRow = 2;}
					if(f >= 1*fpsA && f < 2*fpsA){spriteCol = 1; spriteRow = 2;}
					if(f >= 2*fpsA && f < 3*fpsA){spriteCol = 2; spriteRow = 2;}
					if(f >= 3*fpsA && f < 4*fpsA){spriteCol = 3; spriteRow = 2;}
					if(f >= 4*fpsA){f = 0;}
					f++;
				}
				else
				{
					ObjRender_SetScaleXYZ(obj, 1, 1, 1);
					if(f >= 0 && f < 1*fpsA){spriteCol = 0; spriteRow = 0;}
					if(f >= 1*fpsA && f < 2*fpsA){spriteCol = 1; spriteRow = 0;}
					if(f >= 2*fpsA && f < 3*fpsA){spriteCol = 2; spriteRow = 0;}
					if(f >= 3*fpsA && f < 4*fpsA){spriteCol = 3; spriteRow = 0;}
					if(f >= 4*fpsA){f = 0;}
					f++;
				}
				f2 = 0;
				f3 = 0;
				f4++;
				movecos = cos(f4*2)*7;
			}
		}
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) > 0)
		{
			ObjRender_SetScaleXYZ(obj, 1, 1, 1);
			if(f2 >= 0 && f2 < 1*fpsB){spriteCol = 0; spriteRow = 1;}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){spriteCol = 1; spriteRow = 1;}
			if(f2 >= 2*fpsB && f2 < 3*fpsB){spriteCol = 2; spriteRow = 1;}
			if(f2 >= 3*fpsB && f2 < 4*fpsB){spriteCol = 3; spriteRow = 1;}
			f = 0;
			f2++;
			f3 = 0;
			moved = 1;
			f4 = 0;
			movecos = cos(f4*2)*7;
		}
		
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) < 0)
		{
			ObjRender_SetScaleXYZ(obj, -1, 1, 1);
			if(f2 >= 0 && f2 < 1*fpsB){spriteCol = 0; spriteRow = 1;}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){spriteCol = 1; spriteRow = 1;}
			if(f2 >= 2*fpsB && f2 < 3*fpsB){spriteCol = 2; spriteRow = 1;}
			if(f2 >= 3*fpsB && f2 < 4*fpsB){spriteCol = 3; spriteRow = 1;}
			f = 0;
			f2++;
			f3 = 0;
			moved = 2;
			f4 = 0;
			movecos = cos(f4*2)*7;
		}
		ObjRender_SetPosition(obj,round(ObjMove_GetX(FPEnemy)),round(ObjMove_GetY(FPEnemy) + movecos),1);
		ObjSprite2D_SetSourceRect(obj, x_min + offsetX*spriteCol, y_min + offsetY*spriteRow, x_max + offsetX*spriteCol, y_max + offsetY*spriteRow);
		yield;
	}
	Obj_Delete(obj);
}

task AnimateMamizou(FPEnemy)
{
	let f = 0;
	let f2 = 0;
	let f3 = 0;
	let f4 = 0;
	let frame = 0;
	let movecos = 0;
	let moved = 0;
	
	let x_min = 0;
	let y_min = 0;
	let x_max = 48;
	let y_max = 80;
	
	let offsetX = 48;
	let offsetY = 80;
	
	let spriteRow = 0;
	let spriteCol = 0;
	
	let fpsA = 8;
	let fpsB = 4;
	
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(obj, img_enm_mamizou);
	Obj_SetRenderPriority(obj, 0.41);
	ObjSprite2D_SetSourceRect(obj, x_min, y_min, x_max, y_max);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetScaleXYZ(obj, 1, 1, 1);
	
	while(!Obj_IsDeleted(FPEnemy))
	{
		if(ObjMove_GetSpeed(FPEnemy) == 0)
		{
			if(moved == 1)
			{
				if(f3 >= 0 && f3 < 1*fpsB){spriteCol = 3; spriteRow = 1;}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){spriteCol = 2; spriteRow = 1;}
				if(f3 >= 2*fpsB && f3 < 3*fpsB){spriteCol = 1; spriteRow = 1;}
				if(f3 >= 3*fpsB && f3 < 4*fpsB){spriteCol = 0; spriteRow = 1;}
				if(f3 == 4*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 2)
			{
				if(f3 >= 0*fpsB && f3 < 1*fpsB){spriteCol = 3; spriteRow = 1;}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){spriteCol = 2; spriteRow = 1;}
				if(f3 >= 2*fpsB && f3 < 3*fpsB){spriteCol = 1; spriteRow = 1;}
				if(f3 >= 3*fpsB && f3 < 4*fpsB){spriteCol = 0; spriteRow = 1;}
				if(f3 == 4*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 0)
			{
				if(useAtkAnim == 1)
				{
					ObjRender_SetScaleXYZ(obj, 1, 1, 1);
					if(f >= 0*fpsA && f < 1*fpsA){spriteCol = 0; spriteRow = 2;}
					if(f >= 1*fpsA && f < 2*fpsA){spriteCol = 1; spriteRow = 2;}
					if(f >= 2*fpsA && f < 3*fpsA){spriteCol = 2; spriteRow = 2;}
					if(f >= 3*fpsA && f < 4*fpsA){spriteCol = 3; spriteRow = 2;}
					if(f >= 4*fpsA){f = 0;}
					f++;
				}
				else
				{
					ObjRender_SetScaleXYZ(obj, 1, 1, 1);
					if(f >= 0 && f < 1*fpsA){spriteCol = 0; spriteRow = 0;}
					if(f >= 1*fpsA && f < 2*fpsA){spriteCol = 1; spriteRow = 0;}
					if(f >= 2*fpsA && f < 3*fpsA){spriteCol = 2; spriteRow = 0;}
					if(f >= 3*fpsA && f < 4*fpsA){spriteCol = 3; spriteRow = 0;}
					if(f >= 4*fpsA){f = 0;}
					f++;
				}
				f2 = 0;
				f3 = 0;
				f4++;
				movecos = cos(f4*2)*7;
			}
		}
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) > 0)
		{
			ObjRender_SetScaleXYZ(obj, 1, 1, 1);
			if(f2 >= 0 && f2 < 1*fpsB){spriteCol = 0; spriteRow = 1;}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){spriteCol = 1; spriteRow = 1;}
			if(f2 >= 2*fpsB && f2 < 3*fpsB){spriteCol = 2; spriteRow = 1;}
			if(f2 >= 3*fpsB && f2 < 4*fpsB){spriteCol = 3; spriteRow = 1;}
			f = 0;
			f2++;
			f3 = 0;
			moved = 1;
			f4 = 0;
			movecos = cos(f4*2)*7;
		}
		
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) < 0)
		{
			ObjRender_SetScaleXYZ(obj, -1, 1, 1);
			if(f2 >= 0 && f2 < 1*fpsB){spriteCol = 0; spriteRow = 1;}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){spriteCol = 1; spriteRow = 1;}
			if(f2 >= 2*fpsB && f2 < 3*fpsB){spriteCol = 2; spriteRow = 1;}
			if(f2 >= 3*fpsB && f2 < 4*fpsB){spriteCol = 3; spriteRow = 1;}
			f = 0;
			f2++;
			f3 = 0;
			moved = 2;
			f4 = 0;
			movecos = cos(f4*2)*7;
		}
		ObjRender_SetPosition(obj,round(ObjMove_GetX(FPEnemy)),round(ObjMove_GetY(FPEnemy) + movecos),1);
		ObjSprite2D_SetSourceRect(obj, x_min + offsetX*spriteCol, y_min + offsetY*spriteRow, x_max + offsetX*spriteCol, y_max + offsetY*spriteRow);
		yield;
	}
	Obj_Delete(obj);
}

task AnimateSukuna(FPEnemy)
{
	let f = 0;
	let f2 = 0;
	let f3 = 0;
	let f4 = 0;
	let frame = 0;
	let movecos = 0;
	let moved = 0;
	
	let x_min = 0;
	let y_min = 0;
	let x_max = 96;
	let y_max = 96;
	
	let offsetX = 96;
	let offsetY = 96;
	
	let spriteRow = 0;
	let spriteCol = 0;
	
	let fpsA = 8;
	let fpsB = 4;
	let fpsC = 3;
	
	let sukunaOffset = 0;
	
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(obj, img_enm_sukuna);
	Obj_SetRenderPriority(obj, 0.41);
	ObjSprite2D_SetSourceRect(obj, x_min, y_min, x_max, y_max);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetScaleXYZ(obj, 1, 1, 1);
	
	while(!Obj_IsDeleted(FPEnemy))
	{
		if(ObjMove_GetSpeed(FPEnemy) == 0)
		{
			if(moved == 1)
			{
				if(f3 >= 0*fpsB && f3 < 1*fpsB){spriteCol = 3; spriteRow = 3; sukunaOffset = 2;}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){spriteCol = 2; spriteRow = 3;}
				if(f3 >= 2*fpsB && f3 < 3*fpsB){spriteCol = 1; spriteRow = 3;}
				if(f3 >= 3*fpsB && f3 < 4*fpsB){spriteCol = 0; spriteRow = 3;}
				if(f3 >= 4*fpsB && f3 < 5*fpsB){spriteCol = 4; spriteRow = 2;}
				if(f3 >= 5*fpsB && f3 < 6*fpsB){spriteCol = 3; spriteRow = 2;}
				if(f3 >= 6*fpsB && f3 < 7*fpsB){spriteCol = 2; spriteRow = 2;}
				if(f3 >= 7*fpsB && f3 < 8*fpsB){spriteCol = 1; spriteRow = 2;}
				if(f3 >= 8*fpsB && f3 < 9*fpsB){spriteCol = 0; spriteRow = 2;}
				if(f3 == 9*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 2)
			{
				if(f3 >= 0*fpsB && f3 < 1*fpsB){spriteCol = 3; spriteRow = 5; sukunaOffset = 12;}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){spriteCol = 2; spriteRow = 5;}
				if(f3 >= 2*fpsB && f3 < 3*fpsB){spriteCol = 1; spriteRow = 5;}
				if(f3 >= 3*fpsB && f3 < 4*fpsB){spriteCol = 0; spriteRow = 5;}
				if(f3 >= 4*fpsB && f3 < 5*fpsB){spriteCol = 4; spriteRow = 4;}
				if(f3 >= 5*fpsB && f3 < 6*fpsB){spriteCol = 3; spriteRow = 4;}
				if(f3 >= 6*fpsB && f3 < 7*fpsB){spriteCol = 2; spriteRow = 4;}
				if(f3 >= 7*fpsB && f3 < 8*fpsB){spriteCol = 1; spriteRow = 4;}
				if(f3 >= 8*fpsB && f3 < 9*fpsB){spriteCol = 0; spriteRow = 4;}
				if(f3 == 9*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 0)
			{
				if(useAtkAnim == 1)
				{
					ObjRender_SetScaleXYZ(obj, 1, 1, 1);
					if(f >= 0*fpsC && f < 1*fpsC){spriteCol = 0; spriteRow = 4; sukunaOffset = 12;}
					if(f >= 1*fpsC && f < 2*fpsC){spriteCol = 1; spriteRow = 4;}
					if(f >= 2*fpsC && f < 3*fpsC){spriteCol = 2; spriteRow = 4;}
					if(f >= 3*fpsC && f < 4*fpsC){spriteCol = 3; spriteRow = 4;}
					if(f >= 4*fpsC && f < 5*fpsC){spriteCol = 4; spriteRow = 4;}
					if(f >= 5*fpsC && f < 6*fpsC){spriteCol = 0; spriteRow = 5;}
					if(f >= 6*fpsC && f < 7*fpsC){spriteCol = 1; spriteRow = 5;}
					if(f >= 7*fpsC && f < 8*fpsC){spriteCol = 2; spriteRow = 5;}
					if(f >= 8*fpsC && f < 9*fpsC){spriteCol = 3; spriteRow = 5;}
					
					if(f >= 9*fpsC && f < 10*fpsC){spriteCol = 3; spriteRow = 5;}
					if(f >= 10*fpsC && f < 11*fpsC){spriteCol = 3; spriteRow = 5;}
					
					if(f >= 11*fpsC && f < 12*fpsC){spriteCol = 3; spriteRow = 5;}
					if(f >= 12*fpsC && f < 13*fpsC){spriteCol = 2; spriteRow = 5;}
					if(f >= 13*fpsC && f < 14*fpsC){spriteCol = 1; spriteRow = 5;}
					if(f >= 14*fpsC && f < 15*fpsC){spriteCol = 0; spriteRow = 5;}
					if(f >= 15*fpsC && f < 16*fpsC){spriteCol = 4; spriteRow = 4;}
					if(f >= 16*fpsC && f < 17*fpsC){spriteCol = 3; spriteRow = 4;}
					if(f >= 17*fpsC && f < 18*fpsC){spriteCol = 2; spriteRow = 4;}
					if(f >= 18*fpsC && f < 19*fpsC){spriteCol = 1; spriteRow = 4;}
					if(f >= 19*fpsC && f < 20*fpsC){spriteCol = 0; spriteRow = 4; sukunaOffset = 12;}
					
					if(f >= 20*fpsC && f < 21*fpsC){spriteCol = 0; spriteRow = 2; sukunaOffset = 2;}
					if(f >= 21*fpsC && f < 22*fpsC){spriteCol = 1; spriteRow = 2;}
					if(f >= 22*fpsC && f < 23*fpsC){spriteCol = 2; spriteRow = 2;}
					if(f >= 23*fpsC && f < 24*fpsC){spriteCol = 3; spriteRow = 2;}
					if(f >= 24*fpsC && f < 25*fpsC){spriteCol = 4; spriteRow = 2;}
					if(f >= 25*fpsC && f < 26*fpsC){spriteCol = 0; spriteRow = 3;}
					if(f >= 26*fpsC && f < 27*fpsC){spriteCol = 1; spriteRow = 3;}
					if(f >= 27*fpsC && f < 28*fpsC){spriteCol = 2; spriteRow = 3;}
					if(f >= 28*fpsC && f < 29*fpsC){spriteCol = 3; spriteRow = 3;}
					
					if(f >= 29*fpsC && f < 30*fpsC){spriteCol = 3; spriteRow = 3;}
					if(f >= 30*fpsC && f < 31*fpsC){spriteCol = 3; spriteRow = 3;}
					
					if(f >= 31*fpsC && f < 32*fpsC){spriteCol = 3; spriteRow = 3;}
					if(f >= 32*fpsC && f < 33*fpsC){spriteCol = 2; spriteRow = 3;}
					if(f >= 33*fpsC && f < 34*fpsC){spriteCol = 1; spriteRow = 3;}
					if(f >= 34*fpsC && f < 35*fpsC){spriteCol = 0; spriteRow = 3;}
					if(f >= 35*fpsC && f < 36*fpsC){spriteCol = 4; spriteRow = 2;}
					if(f >= 36*fpsC && f < 37*fpsC){spriteCol = 3; spriteRow = 2;}
					if(f >= 37*fpsC && f < 38*fpsC){spriteCol = 2; spriteRow = 2;}
					if(f >= 38*fpsC && f < 39*fpsC){spriteCol = 1; spriteRow = 2;}
					if(f >= 39*fpsC && f < 40*fpsC){spriteCol = 0; spriteRow = 2; sukunaOffset = 2;}
					if(f >= 40*fpsC){f = 0;}
					f++;
				}
				else
				{
					ObjRender_SetScaleXYZ(obj, 1, 1, 1);
					if(f >= 0 && f < 1*fpsA){spriteCol = 0; spriteRow = 0; sukunaOffset = 0;}
					if(f >= 1*fpsA && f < 2*fpsA){spriteCol = 1; spriteRow = 0;sukunaOffset = 0;}
					if(f >= 2*fpsA && f < 3*fpsA){spriteCol = 2; spriteRow = 0;sukunaOffset = 0;}
					if(f >= 3*fpsA && f < 4*fpsA){spriteCol = 3; spriteRow = 0;sukunaOffset = 0;}
					if(f >= 4*fpsA && f < 5*fpsA){spriteCol = 4; spriteRow = 0;sukunaOffset = 0;}
					if(f >= 5*fpsA && f < 6*fpsA){spriteCol = 0; spriteRow = 1;sukunaOffset = 0;}
					if(f >= 6*fpsA && f < 7*fpsA){spriteCol = 1; spriteRow = 1;sukunaOffset = 0;}
					if(f >= 7*fpsA && f < 8*fpsA){spriteCol = 2; spriteRow = 1;sukunaOffset = 0;}
					if(f >= 8*fpsA && f < 9*fpsA){spriteCol = 3; spriteRow = 1;sukunaOffset = 0;}
					if(f >= 9*fpsA && f < 10*fpsA){spriteCol = 4; spriteRow = 1;sukunaOffset = 0;}
					if(f >= 10*fpsA){f = 0;}
					f++;
				}
				f2 = 0;
				f3 = 0;
				f4++;
				//movecos = cos(f4*2)*7;
			}
		}
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) > 0)
		{
			ObjRender_SetScaleXYZ(obj, 1, 1, 1);
			if(f2 >= 0*fpsB && f2 < 1*fpsB){spriteCol = 0; spriteRow = 2; sukunaOffset = 2;}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){spriteCol = 1; spriteRow = 2;}
			if(f2 >= 2*fpsB && f2 < 3*fpsB){spriteCol = 2; spriteRow = 2;}
			if(f2 >= 3*fpsB && f2 < 4*fpsB){spriteCol = 3; spriteRow = 2;}
			if(f2 >= 4*fpsB && f2 < 5*fpsB){spriteCol = 4; spriteRow = 2;}
			if(f2 >= 5*fpsB && f2 < 6*fpsB){spriteCol = 0; spriteRow = 3;}
			if(f2 >= 6*fpsB && f2 < 7*fpsB){spriteCol = 1; spriteRow = 3;}
			if(f2 >= 7*fpsB && f2 < 8*fpsB){spriteCol = 2; spriteRow = 3;}
			if(f2 >= 8*fpsB && f2 < 9*fpsB){spriteCol = 3; spriteRow = 3;}
			f = 0;
			f2++;
			f3 = 0;
			moved = 1;
			f4 = 0;
			movecos = cos(f4*2)*7;
		}
		
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) < 0)
		{
			ObjRender_SetScaleXYZ(obj, 1, 1, 1);
			if(f2 >= 0*fpsB && f2 < 1*fpsB){spriteCol = 0; spriteRow = 4; sukunaOffset = 12;}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){spriteCol = 1; spriteRow = 4;}
			if(f2 >= 2*fpsB && f2 < 3*fpsB){spriteCol = 2; spriteRow = 4;}
			if(f2 >= 3*fpsB && f2 < 4*fpsB){spriteCol = 3; spriteRow = 4;}
			if(f2 >= 4*fpsB && f2 < 5*fpsB){spriteCol = 4; spriteRow = 4;}
			if(f2 >= 5*fpsB && f2 < 6*fpsB){spriteCol = 0; spriteRow = 5;}
			if(f2 >= 6*fpsB && f2 < 7*fpsB){spriteCol = 1; spriteRow = 5;}
			if(f2 >= 7*fpsB && f2 < 8*fpsB){spriteCol = 2; spriteRow = 5;}
			if(f2 >= 8*fpsB && f2 < 9*fpsB){spriteCol = 3; spriteRow = 5;}
			f = 0;
			f2++;
			f3 = 0;
			moved = 2;
			f4 = 0;
			movecos = cos(f4*2)*7;
		}
		ObjRender_SetPosition(obj,round(ObjMove_GetX(FPEnemy) + sukunaOffset),round(ObjMove_GetY(FPEnemy) + movecos),1);
		ObjSprite2D_SetSourceRect(obj, x_min + offsetX*spriteCol, y_min + offsetY*spriteRow, x_max + offsetX*spriteCol, y_max + offsetY*spriteRow);
		yield;
	}
	Obj_Delete(obj);
}

task AnimateReimu(FPEnemy)
{
	let f = 0;
	let f2 = 0;
	let f3 = 0;
	let f4 = 0;
	let frame = 0;
	let movecos = 0;
	let moved = 0;
	
	let x_min = 0;
	let y_min = 0;
	let x_max = 64;
	let y_max = 80;
	
	let offsetX = 64;
	let offsetY = 80;
	
	let spriteRow = 0;
	let spriteCol = 0;
	
	let fpsA = 8;
	let fpsB = 4;
	
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(obj, img_enm_reimu);
	Obj_SetRenderPriority(obj, 0.41);
	ObjSprite2D_SetSourceRect(obj, x_min, y_min, x_max, y_max);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetScaleXYZ(obj, 1, 1, 1);
	
	while(!Obj_IsDeleted(FPEnemy))
	{
		if(ObjMove_GetSpeed(FPEnemy) == 0)
		{
			if(moved == 1)
			{
				if(f3 >= 0 && f3 < 1*fpsB){spriteCol = 3; spriteRow = 1;}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){spriteCol = 2; spriteRow = 1;}
				if(f3 >= 2*fpsB && f3 < 3*fpsB){spriteCol = 1; spriteRow = 1;}
				if(f3 >= 3*fpsB && f3 < 4*fpsB){spriteCol = 0; spriteRow = 1;}
				if(f3 == 4*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 2)
			{
				if(f3 >= 0*fpsB && f3 < 1*fpsB){spriteCol = 3; spriteRow = 1;}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){spriteCol = 2; spriteRow = 1;}
				if(f3 >= 2*fpsB && f3 < 3*fpsB){spriteCol = 1; spriteRow = 1;}
				if(f3 >= 3*fpsB && f3 < 4*fpsB){spriteCol = 0; spriteRow = 1;}
				if(f3 == 4*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 0)
			{
				if(useAtkAnim == 1)
				{
					if(f >= 0*fpsA && f < 1*fpsA){spriteCol = 0; spriteRow = 2;}
					if(f >= 1*fpsA && f < 2*fpsA){spriteCol = 1; spriteRow = 2;}
					if(f >= 2*fpsA && f < 3*fpsA){spriteCol = 2; spriteRow = 2;}
					if(f >= 3*fpsA && f < 4*fpsA){spriteCol = 3; spriteRow = 2;}
					if(f >= 4*fpsA){f = 0;}
					f++;
				}
				else
				{
					ObjRender_SetScaleXYZ(obj, 1, 1, 1);
					if(f >= 0 && f < 1*fpsA){spriteCol = 0; spriteRow = 0;}
					if(f >= 1*fpsA && f < 2*fpsA){spriteCol = 1; spriteRow = 0;}
					if(f >= 2*fpsA && f < 3*fpsA){spriteCol = 2; spriteRow = 0;}
					if(f >= 3*fpsA && f < 4*fpsA){spriteCol = 3; spriteRow = 0;}
					if(f >= 4*fpsA){f = 0;}
					f++;
				}
				f2 = 0;
				f3 = 0;
				f4++;
				movecos = cos(f4*2)*7;
			}
		}
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) > 0)
		{
			ObjRender_SetScaleXYZ(obj, 1, 1, 1);
			if(f2 >= 0 && f2 < 1*fpsB){spriteCol = 0; spriteRow = 1;}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){spriteCol = 1; spriteRow = 1;}
			if(f2 >= 2*fpsB && f2 < 3*fpsB){spriteCol = 2; spriteRow = 1;}
			if(f2 >= 3*fpsB && f2 < 4*fpsB){spriteCol = 3; spriteRow = 1;}
			f = 0;
			f2++;
			f3 = 0;
			moved = 1;
			f4 = 0;
			movecos = cos(f4*2)*7;
		}
		
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) < 0)
		{
			ObjRender_SetScaleXYZ(obj, -1, 1, 1);
			if(f2 >= 0 && f2 < 1*fpsB){spriteCol = 0; spriteRow = 1;}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){spriteCol = 1; spriteRow = 1;}
			if(f2 >= 2*fpsB && f2 < 3*fpsB){spriteCol = 2; spriteRow = 1;}
			if(f2 >= 3*fpsB && f2 < 4*fpsB){spriteCol = 3; spriteRow = 1;}
			f = 0;
			f2++;
			f3 = 0;
			moved = 2;
			f4 = 0;
			movecos = cos(f4*2)*7;
		}
		ObjRender_SetPosition(obj,round(ObjMove_GetX(FPEnemy)),round(ObjMove_GetY(FPEnemy) + movecos),1);
		ObjSprite2D_SetSourceRect(obj, x_min + offsetX*spriteCol, y_min + offsetY*spriteRow, x_max + offsetX*spriteCol, y_max + offsetY*spriteRow);
		yield;
	}
	Obj_Delete(obj);
}

task AnimateByakuren_old(FPEnemy)
{
	let f = 0;
	let f2 = 0;
	let f3 = 0;
	let f4 = 0;
	let frame = 0;
	let movecos = 0;
	let moved = 0;
	
	let x_min = 0;
	let y_min = 0;
	let x_max = 96;
	let y_max = 128;
	
	let offsetX = 96;
	let offsetY = 128;
	
	let spriteRow = 0;
	let spriteCol = 0;
	
	let fpsA = 8;
	let fpsB = 4;
	
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(obj, img_enm_byakuren00);
	Obj_SetRenderPriority(obj, 0.41);
	ObjSprite2D_SetSourceRect(obj, x_min, y_min, x_max, y_max);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetScaleXYZ(obj, 1, 1, 1);
	
	while(!Obj_IsDeleted(FPEnemy))
	{
		if(ObjMove_GetSpeed(FPEnemy) == 0)
		{
			if(moved == 1)
			{
				if(f3 >= 0 && f3 < 1*fpsB){spriteCol = 3; spriteRow = 1;}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){spriteCol = 2; spriteRow = 1;}
				if(f3 >= 2*fpsB && f3 < 3*fpsB){spriteCol = 1; spriteRow = 1;}
				if(f3 >= 3*fpsB && f3 < 4*fpsB){spriteCol = 0; spriteRow = 1;}
				if(f3 == 4*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 2)
			{
				if(f3 >= 0*fpsB && f3 < 1*fpsB){spriteCol = 3; spriteRow = 1;}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){spriteCol = 2; spriteRow = 1;}
				if(f3 >= 2*fpsB && f3 < 3*fpsB){spriteCol = 1; spriteRow = 1;}
				if(f3 >= 3*fpsB && f3 < 4*fpsB){spriteCol = 0; spriteRow = 1;}
				if(f3 == 4*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 0)
			{
				if(useAtkAnim == 1)
				{
					if(f >= 0*fpsA && f < 1*fpsA){spriteCol = 0; spriteRow = 2;}
					if(f >= 1*fpsA && f < 2*fpsA){spriteCol = 1; spriteRow = 2;}
					if(f >= 2*fpsA && f < 3*fpsA){spriteCol = 2; spriteRow = 2;}
					if(f >= 3*fpsA && f < 4*fpsA){spriteCol = 3; spriteRow = 2;}
					if(f >= 4*fpsA){f = 0;}
					f++;
				}
				else
				{
					ObjRender_SetScaleXYZ(obj, 1, 1, 1);
					if(f >= 0 && f < 1*fpsA){spriteCol = 0; spriteRow = 0;}
					if(f >= 1*fpsA && f < 2*fpsA){spriteCol = 1; spriteRow = 0;}
					if(f >= 2*fpsA && f < 3*fpsA){spriteCol = 2; spriteRow = 0;}
					if(f >= 3*fpsA && f < 4*fpsA){spriteCol = 3; spriteRow = 0;}
					if(f >= 4*fpsA){f = 0;}
					f++;
				}
				f2 = 0;
				f3 = 0;
				f4++;
				movecos = cos(f4*2)*7;
			}
		}
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) > 0)
		{
			ObjRender_SetScaleXYZ(obj, 1, 1, 1);
			if(f2 >= 0 && f2 < 1*fpsB){spriteCol = 0; spriteRow = 1;}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){spriteCol = 1; spriteRow = 1;}
			if(f2 >= 2*fpsB && f2 < 3*fpsB){spriteCol = 2; spriteRow = 1;}
			if(f2 >= 3*fpsB && f2 < 4*fpsB){spriteCol = 3; spriteRow = 1;}
			f = 0;
			f2++;
			f3 = 0;
			moved = 1;
			f4 = 0;
			movecos = cos(f4*2)*7;
		}
		
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) < 0)
		{
			ObjRender_SetScaleXYZ(obj, -1, 1, 1);
			if(f2 >= 0 && f2 < 1*fpsB){spriteCol = 0; spriteRow = 1;}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){spriteCol = 1; spriteRow = 1;}
			if(f2 >= 2*fpsB && f2 < 3*fpsB){spriteCol = 2; spriteRow = 1;}
			if(f2 >= 3*fpsB && f2 < 4*fpsB){spriteCol = 3; spriteRow = 1;}
			f = 0;
			f2++;
			f3 = 0;
			moved = 2;
			f4 = 0;
			movecos = cos(f4*2)*7;
		}
		ObjRender_SetPosition(obj,round(ObjMove_GetX(FPEnemy)),round(ObjMove_GetY(FPEnemy) + movecos),1);
		ObjSprite2D_SetSourceRect(obj, x_min + offsetX*spriteCol, y_min + offsetY*spriteRow, x_max + offsetX*spriteCol, y_max + offsetY*spriteRow);
		yield;
	}
	Obj_Delete(obj);
}

task AnimatePatchouli(FPEnemy)
{
	let f = 0;
	let f2 = 0;
	let f3 = 0;
	let f4 = 0;
	let frame = 0;
	let movecos = 0;
	let moved = 0;
	
	let x_min = 0;
	let y_min = 0;
	let x_max = 64;
	let y_max = 64;
	
	let offsetX = 64;
	let offsetY = 64;
	
	let spriteRow = 0;
	let spriteCol = 0;
	
	let fpsA = 8;
	let fpsB = 4;
	
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(obj, img_enm_patchouli);
	Obj_SetRenderPriority(obj, 0.41);
	ObjSprite2D_SetSourceRect(obj, x_min, y_min, x_max, y_max);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetScaleXYZ(obj, 1, 1, 1);
	
	while(!Obj_IsDeleted(FPEnemy))
	{
		if(ObjMove_GetSpeed(FPEnemy) == 0)
		{
			if(moved == 1)
			{
				if(f3 >= 0 && f3 < 1*fpsB){spriteCol = 3; spriteRow = 1;}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){spriteCol = 2; spriteRow = 1;}
				if(f3 >= 2*fpsB && f3 < 3*fpsB){spriteCol = 1; spriteRow = 1;}
				if(f3 >= 3*fpsB && f3 < 4*fpsB){spriteCol = 0; spriteRow = 1;}
				if(f3 == 4*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 2)
			{
				if(f3 >= 0*fpsB && f3 < 1*fpsB){spriteCol = 3; spriteRow = 1;}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){spriteCol = 2; spriteRow = 1;}
				if(f3 >= 2*fpsB && f3 < 3*fpsB){spriteCol = 1; spriteRow = 1;}
				if(f3 >= 3*fpsB && f3 < 4*fpsB){spriteCol = 0; spriteRow = 1;}
				if(f3 == 4*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 0)
			{
				if(useAtkAnim == 1)
				{
					ObjRender_SetScaleXYZ(obj, 1, 1, 1);
					spriteCol = 0; spriteRow = 2;
					f = 0;
					f++;
				}
				else
				{
					ObjRender_SetScaleXYZ(obj, 1, 1, 1);
					if(f >= 0 && f < 1*fpsA){spriteCol = 0; spriteRow = 0;}
					if(f >= 1*fpsA && f < 2*fpsA){spriteCol = 1; spriteRow = 0;}
					if(f >= 2*fpsA && f < 3*fpsA){spriteCol = 2; spriteRow = 0;}
					if(f >= 3*fpsA && f < 4*fpsA){spriteCol = 3; spriteRow = 0;}
					if(f >= 4*fpsA){f = 0;}
					f++;
				}
				f2 = 0;
				f3 = 0;
				f4++;
				movecos = cos(f4*2)*7;
			}
		}
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) > 0)
		{
			ObjRender_SetScaleXYZ(obj, 1, 1, 1);
			if(f2 >= 0 && f2 < 1*fpsB){spriteCol = 0; spriteRow = 1;}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){spriteCol = 1; spriteRow = 1;}
			if(f2 >= 2*fpsB && f2 < 3*fpsB){spriteCol = 2; spriteRow = 1;}
			if(f2 >= 3*fpsB && f2 < 4*fpsB){spriteCol = 3; spriteRow = 1;}
			f = 0;
			f2++;
			f3 = 0;
			moved = 1;
			f4 = 0;
			movecos = cos(f4*2)*7;
		}
		
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) < 0)
		{
			ObjRender_SetScaleXYZ(obj, -1, 1, 1);
			if(f2 >= 0 && f2 < 1*fpsB){spriteCol = 0; spriteRow = 1;}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){spriteCol = 1; spriteRow = 1;}
			if(f2 >= 2*fpsB && f2 < 3*fpsB){spriteCol = 2; spriteRow = 1;}
			if(f2 >= 3*fpsB && f2 < 4*fpsB){spriteCol = 3; spriteRow = 1;}
			f = 0;
			f2++;
			f3 = 0;
			moved = 2;
			f4 = 0;
			movecos = cos(f4*2)*7;
		}
		ObjRender_SetPosition(obj,round(ObjMove_GetX(FPEnemy)),round(ObjMove_GetY(FPEnemy) + movecos),1);
		ObjSprite2D_SetSourceRect(obj, x_min + offsetX*spriteCol, y_min + offsetY*spriteRow, x_max + offsetX*spriteCol, y_max + offsetY*spriteRow);
		yield;
	}
	Obj_Delete(obj);
}

task AnimateMeiling(FPEnemy)
{
	let f = 0;
	let f2 = 0;
	let f3 = 0;
	let f4 = 0;
	let frame = 0;
	let movecos = 0;
	let moved = 0;
	
	let x_min = 0;
	let y_min = 0;
	let x_max = 64;
	let y_max = 64;
	
	let offsetX = 64;
	let offsetY = 64;
	
	let spriteRow = 0;
	let spriteCol = 0;
	
	let fpsA = 8;
	let fpsB = 4;
	
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(obj, img_enm_meiling);
	Obj_SetRenderPriority(obj, 0.41);
	ObjSprite2D_SetSourceRect(obj, x_min, y_min, x_max, y_max);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetScaleXYZ(obj, 1, 1, 1);
	
	while(!Obj_IsDeleted(FPEnemy))
	{
		if(ObjMove_GetSpeed(FPEnemy) == 0)
		{
			if(moved == 1)
			{
				if(f3 >= 0 && f3 < 1*fpsB){spriteCol = 3; spriteRow = 1;}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){spriteCol = 2; spriteRow = 1;}
				if(f3 >= 2*fpsB && f3 < 3*fpsB){spriteCol = 1; spriteRow = 1;}
				if(f3 >= 3*fpsB && f3 < 4*fpsB){spriteCol = 0; spriteRow = 1;}
				if(f3 == 4*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 2)
			{
				if(f3 >= 0*fpsB && f3 < 1*fpsB){spriteCol = 3; spriteRow = 1;}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){spriteCol = 2; spriteRow = 1;}
				if(f3 >= 2*fpsB && f3 < 3*fpsB){spriteCol = 1; spriteRow = 1;}
				if(f3 >= 3*fpsB && f3 < 4*fpsB){spriteCol = 0; spriteRow = 1;}
				if(f3 == 4*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 0)
			{
				if(useAtkAnim == 1)
				{
					ObjRender_SetScaleXYZ(obj, 1, 1, 1);
					spriteCol = 0; spriteRow = 2;
					f = 0;
					f++;
				}
				else
				{
					ObjRender_SetScaleXYZ(obj, 1, 1, 1);
					if(f >= 0 && f < 1*fpsA){spriteCol = 0; spriteRow = 0;}
					if(f >= 1*fpsA && f < 2*fpsA){spriteCol = 1; spriteRow = 0;}
					if(f >= 2*fpsA && f < 3*fpsA){spriteCol = 2; spriteRow = 0;}
					if(f >= 3*fpsA && f < 4*fpsA){spriteCol = 3; spriteRow = 0;}
					if(f >= 4*fpsA){f = 0;}
					f++;
				}
				f2 = 0;
				f3 = 0;
				f4++;
				movecos = cos(f4*2)*7;
			}
		}
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) > 0)
		{
			ObjRender_SetScaleXYZ(obj, -1, 1, 1);
			if(f2 >= 0 && f2 < 1*fpsB){spriteCol = 0; spriteRow = 1;}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){spriteCol = 1; spriteRow = 1;}
			if(f2 >= 2*fpsB && f2 < 3*fpsB){spriteCol = 2; spriteRow = 1;}
			if(f2 >= 3*fpsB && f2 < 4*fpsB){spriteCol = 3; spriteRow = 1;}
			f = 0;
			f2++;
			f3 = 0;
			moved = 1;
			f4 = 0;
			movecos = cos(f4*2)*7;
		}
		
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) < 0)
		{
			ObjRender_SetScaleXYZ(obj, 1, 1, 1);
			if(f2 >= 0 && f2 < 1*fpsB){spriteCol = 0; spriteRow = 1;}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){spriteCol = 1; spriteRow = 1;}
			if(f2 >= 2*fpsB && f2 < 3*fpsB){spriteCol = 2; spriteRow = 1;}
			if(f2 >= 3*fpsB && f2 < 4*fpsB){spriteCol = 3; spriteRow = 1;}
			f = 0;
			f2++;
			f3 = 0;
			moved = 2;
			f4 = 0;
			movecos = cos(f4*2)*7;
		}
		ObjRender_SetPosition(obj,round(ObjMove_GetX(FPEnemy)),round(ObjMove_GetY(FPEnemy) + movecos),1);
		ObjSprite2D_SetSourceRect(obj, x_min + offsetX*spriteCol, y_min + offsetY*spriteRow, x_max + offsetX*spriteCol, y_max + offsetY*spriteRow);
		yield;
	}
	Obj_Delete(obj);
}

task AnimateSeiran(FPEnemy)
{
	let f = 0;
	let f2 = 0;
	let f3 = 0;
	let f4 = 0;
	let frame = 0;
	let movecos = 0;
	let moved = 0;
	
	let x_min = 0;
	let y_min = 0;
	let x_max = 64;
	let y_max = 96;
	
	let offsetX = 64;
	let offsetY = 96;
	
	let spriteRow = 0;
	let spriteCol = 0;
	
	let fpsA = 8;
	let fpsB = 4;
	
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(obj, img_enm_seiran);
	Obj_SetRenderPriority(obj, 0.41);
	ObjSprite2D_SetSourceRect(obj, x_min, y_min, x_max, y_max);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetScaleXYZ(obj, 1, 1, 1);
	
	while(!Obj_IsDeleted(FPEnemy))
	{
		if(ObjMove_GetSpeed(FPEnemy) == 0)
		{
			if(moved == 1)
			{
				if(f3 >= 0 && f3 < 1*fpsB){spriteCol = 3; spriteRow = 1;}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){spriteCol = 2; spriteRow = 1;}
				if(f3 >= 2*fpsB && f3 < 3*fpsB){spriteCol = 1; spriteRow = 1;}
				if(f3 >= 3*fpsB && f3 < 4*fpsB){spriteCol = 0; spriteRow = 1;}
				if(f3 == 4*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 2)
			{
				if(f3 >= 0*fpsB && f3 < 1*fpsB){spriteCol = 3; spriteRow = 1;}
				if(f3 >= 1*fpsB && f3 < 2*fpsB){spriteCol = 2; spriteRow = 1;}
				if(f3 >= 2*fpsB && f3 < 3*fpsB){spriteCol = 1; spriteRow = 1;}
				if(f3 >= 3*fpsB && f3 < 4*fpsB){spriteCol = 0; spriteRow = 1;}
				if(f3 == 4*fpsB){moved = 0;}
				f3++;
			}
			if(moved == 0)
			{
				if(useAtkAnim == 1)
				{
					ObjRender_SetScaleXYZ(obj, 1, 1, 1);
					spriteCol = 0; spriteRow = 2;
					f = 0;
					f++;
				}
				else
				{
					ObjRender_SetScaleXYZ(obj, 1, 1, 1);
					if(f >= 0 && f < 1*fpsA){spriteCol = 0; spriteRow = 0;}
					if(f >= 1*fpsA && f < 2*fpsA){spriteCol = 1; spriteRow = 0;}
					if(f >= 2*fpsA && f < 3*fpsA){spriteCol = 2; spriteRow = 0;}
					if(f >= 3*fpsA && f < 4*fpsA){spriteCol = 3; spriteRow = 0;}
					if(f >= 4*fpsA){f = 0;}
					f++;
				}
				f2 = 0;
				f3 = 0;
				f4++;
				movecos = cos(f4*2)*7;
			}
		}
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) > 0)
		{
			ObjRender_SetScaleXYZ(obj, -1, 1, 1);
			if(f2 >= 0 && f2 < 1*fpsB){spriteCol = 0; spriteRow = 1;}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){spriteCol = 1; spriteRow = 1;}
			if(f2 >= 2*fpsB && f2 < 3*fpsB){spriteCol = 2; spriteRow = 1;}
			if(f2 >= 3*fpsB && f2 < 4*fpsB){spriteCol = 3; spriteRow = 1;}
			f = 0;
			f2++;
			f3 = 0;
			moved = 1;
			f4 = 0;
			movecos = cos(f4*2)*7;
		}
		
		if(ObjMove_GetSpeed(FPEnemy)*cos(ObjMove_GetAngle(FPEnemy)) < 0)
		{
			ObjRender_SetScaleXYZ(obj, 1, 1, 1);
			if(f2 >= 0 && f2 < 1*fpsB){spriteCol = 0; spriteRow = 1;}
			if(f2 >= 1*fpsB && f2 < 2*fpsB){spriteCol = 1; spriteRow = 1;}
			if(f2 >= 2*fpsB && f2 < 3*fpsB){spriteCol = 2; spriteRow = 1;}
			if(f2 >= 3*fpsB && f2 < 4*fpsB){spriteCol = 3; spriteRow = 1;}
			f = 0;
			f2++;
			f3 = 0;
			moved = 2;
			f4 = 0;
			movecos = cos(f4*2)*7;
		}
		ObjRender_SetPosition(obj,round(ObjMove_GetX(FPEnemy)),round(ObjMove_GetY(FPEnemy) + movecos),1);
		ObjSprite2D_SetSourceRect(obj, x_min + offsetX*spriteCol, y_min + offsetY*spriteRow, x_max + offsetX*spriteCol, y_max + offsetY*spriteRow);
		yield;
	}
	Obj_Delete(obj);
}

